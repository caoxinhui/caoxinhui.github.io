<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>发布订阅模式</title>
    <url>/2020/04/11/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>本文简单介绍发布订阅模式的实际应用</p>
<a id="more"></a>


<p>实现一个简单的createStore函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> state</span><br><span class="line">    <span class="keyword">const</span> listerners = []</span><br><span class="line">    <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> state</span><br><span class="line">    <span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">        state = reducer(state, action)</span><br><span class="line">        listerners.forEach(<span class="function"><span class="params">listerner</span> =&gt;</span> listerner())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> subscribe = <span class="function"><span class="keyword">function</span> (<span class="params">listener</span>) </span>&#123;</span><br><span class="line">        listeners.push(listener)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            listerners = listerners.filter(<span class="function"><span class="params">l</span> =&gt;</span> l !== listener)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dispatch()</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getState,</span><br><span class="line">        dispatch,</span><br><span class="line">        subscribe</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = &#123;&#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'INCREMENT'</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...state,</span><br><span class="line">            ++state.count</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br><span class="line"><span class="keyword">const</span> render = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.innerText = store.getState().count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.subscribe(render)</span><br><span class="line">render()</span><br><span class="line"><span class="keyword">const</span> INCREASE_ACTION = &#123;<span class="attr">type</span>: <span class="string">'INCREMENT'</span>&#125;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    store.dispatch(INCREASE_ACTION)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>Redux</title>
    <url>/2020/04/04/Redux/</url>
    <content><![CDATA[<p>redux的核心概念，全局 store，所有的状态都会放在store中</p>
<p>产生 store，其中reducer是一个纯函数<br><code>const store = createStore(reducer)</code></p>
<a id="more"></a>

<p>store的三个方法</p>
<ol>
<li>getState()</li>
<li>dispatch(action)<br>UI上点击了一个button，可能产生一个action，store可以把它dispatch出去，dispatch给reducer，reducer是真正处理action的，并更新store</li>
<li>subscribe(listener)<br>监听store的变化，store有任何变化都会调用他的 callback-&gt; listener</li>
<li>replaceReducer(nextReducer)<br>更新当前store里的reducer</li>
</ol>
<h3 id="理解action"><a href="#理解action" class="headerlink" title="理解action"></a>理解action</h3><p>描述行为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    type:ADD_TODO,</span><br><span class="line">    text:<span class="string">'Build my first Redux app'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="理解reducer"><a href="#理解reducer" class="headerlink" title="理解reducer"></a>理解reducer</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todoApp</span>(<span class="params">state = initialState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> ADD_TODO:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">                todos: [</span><br><span class="line">                    ...state.todos, &#123;</span><br><span class="line">                        text: action.text,</span><br><span class="line">                        completed: <span class="literal">false</span></span><br><span class="line">                    &#125;]</span><br><span class="line">            &#125;)</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> store</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.amazonaws.com/media-p.slid.es/uploads/364812/images/2473907/ARCH-Classic-Flux__2_.png" alt="flux"><br><img src="https://s3.amazonaws.com/media-p.slid.es/uploads/364812/images/2484555/ARCH-Redux2.png" alt="redux"><br><img src="https://s3.amazonaws.com/media-p.slid.es/uploads/364812/images/2484552/ARCH-Redux2-real.gif" alt="redux状态流"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(state,action)=&gt;<span class="keyword">new</span> state</span><br></pre></td></tr></table></figure>


<h3 id="理解-combineReducers"><a href="#理解-combineReducers" class="headerlink" title="理解 combineReducers"></a>理解 combineReducers</h3><p>工具函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state = [], action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</span><br><span class="line">            <span class="keyword">return</span> state.concat([action.text])</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</span><br><span class="line">            <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'DECREMENT'</span>:</span><br><span class="line">            <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> todos <span class="keyword">from</span> <span class="string">'./todos'</span></span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">'./counter'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">    todos,</span><br><span class="line">    counter</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="理解-bindActionCreators"><a href="#理解-bindActionCreators" class="headerlink" title="理解 bindActionCreators"></a>理解 bindActionCreators</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodoWithDispatch</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> action = &#123;</span><br><span class="line">        type: ADD_TODO,</span><br><span class="line">        text</span><br><span class="line">&#125;</span><br><span class="line">    dispatch(action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch(addTodo(text))</span><br><span class="line">dispatch(completeTodo(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boundAddTodo = <span class="function"><span class="params">text</span> =&gt;</span> dispatch(addTodo(text));</span><br><span class="line"><span class="keyword">const</span> boundCompleteTodo = <span class="function"><span class="params">index</span> =&gt;</span> dispatch(completeTodo(index));</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>(<span class="params">actionCreator, dispatch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dispatch(actionCreator.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">actionCreators, dispatch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(actionCreators);</span><br><span class="line">    <span class="keyword">const</span> boundActionCreators = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> key = keys[i];</span><br><span class="line">        <span class="keyword">const</span> actionCreator = actionCreators[key];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreator === <span class="string">'function'</span>) &#123;</span><br><span class="line">            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> boundActionCreators;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createStore,</span><br><span class="line">  combineReducers,</span><br><span class="line">  bindActionCreators</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Store initial state</span></span><br><span class="line">  <span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// reducer</span></span><br><span class="line">  <span class="keyword">const</span> counter = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"PLUS_ONE"</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"MINUS_ONE"</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count - <span class="number">1</span> &#125;;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"CUSTOM_COUNT"</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          count: state.count + action.payload.count</span><br><span class="line">        &#125;;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> todos = <span class="function">(<span class="params">state = &#123;&#125;</span>) =&gt;</span> state;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create store</span></span><br><span class="line">  <span class="keyword">const</span> store = createStore(</span><br><span class="line">    combineReducers(&#123;</span><br><span class="line">      todos,</span><br><span class="line">      counter</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Action creator</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">plusOne</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// action</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">"PLUS_ONE"</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">minusOne</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">"MINUS_ONE"</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">customCount</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">"CUSTOM_COUNT"</span>, <span class="attr">payload</span>: &#123; count &#125; &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  plusOne = bindActionCreators(plusOne, store.dispatch);</span><br><span class="line"></span><br><span class="line">  store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(store.getState()));</span><br><span class="line">  <span class="comment">// store.dispatch(plusOne());</span></span><br><span class="line">  plusOne();</span><br><span class="line">  store.dispatch(minusOne());</span><br><span class="line">  store.dispatch(customCount(<span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button onClick=&#123;run&#125;&gt;Run&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;* 请打开控制台查看运行结果&lt;/</span>p&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>


<h3 id="将组件-connect-到-store-上"><a href="#将组件-connect-到-store-上" class="headerlink" title="将组件 connect 到 store 上"></a>将组件 connect 到 store 上</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SidePanel</span> <span class="keyword">extends</span> <span class="title">Comment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        nextgen: state.nextgen,</span><br><span class="line">        router: state.router,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        actions: bindActionCreators(&#123;...actions&#125;, dispatch)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(SidePanel);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators, createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider, connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Store initial state</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducer</span></span><br><span class="line"><span class="keyword">const</span> counter = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"PLUS_ONE"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"MINUS_ONE"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"CUSTOM_COUNT"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count + action.payload.count &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create store</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(counter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Action creator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plusOne</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// action</span></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">"PLUS_ONE"</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minusOne</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">"MINUS_ONE"</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; count, plusOne, minusOne &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"counter"</span>&gt;</span><br><span class="line">        &lt;button onClick=&#123;minusOne&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;span style=&#123;&#123; <span class="attr">display</span>: <span class="string">"inline-block"</span>, <span class="attr">margin</span>: <span class="string">"0 10px"</span> &#125;&#125;&gt;</span><br><span class="line">          &#123;count&#125;</span><br><span class="line">        &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;plusOne&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function mapStateToProps(state) &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    count: state.count</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function mapDispatchToProps(dispatch) &#123;</span></span><br><span class="line"><span class="regexp">  return bindActionCreators(&#123; plusOne, minusOne &#125;, dispatch);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const ConnectedCounter = connect(mapStateToProps, mapDispatchToProps)(Counter);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default class CounterSample extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;Provider store=&#123;store&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ConnectedCounter /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>


<h3 id="异步action"><a href="#异步action" class="headerlink" title="异步action"></a>异步action</h3><p><img src="https://s3.amazonaws.com/media-p.slid.es/uploads/364812/images/2484714/ARCH-Redux2-extended-api.png" alt="redux异步请求"></p>
<h3 id="redux-中间件（Middleware）"><a href="#redux-中间件（Middleware）" class="headerlink" title="redux 中间件（Middleware）"></a>redux 中间件（Middleware）</h3><ol>
<li>截获 action</li>
<li>发出 action</li>
</ol>
]]></content>
      <categories>
        <category>极客时间</category>
      </categories>
  </entry>
  <entry>
    <title>Git &amp; npm</title>
    <url>/2019/12/28/Git/</url>
    <content><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><a id="more"></a>

<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。若要指定不同的目录名，将目录名作为git clone 命令的第二个参数<br><code>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</code></p>
<h3 id="git-批量删除本地分支-删除分支名包含指定字符的分支"><a href="#git-批量删除本地分支-删除分支名包含指定字符的分支" class="headerlink" title="git 批量删除本地分支(删除分支名包含指定字符的分支)"></a>git 批量删除本地分支(删除分支名包含指定字符的分支)</h3><p><code>git branch |grep &#39;xxx&#39; |xargs git branch -D</code></p>
<h3 id="删除当前分支以外的分支"><a href="#删除当前分支以外的分支" class="headerlink" title="删除当前分支以外的分支"></a>删除当前分支以外的分支</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git branch | xargs git branch -d</span><br></pre></td></tr></table></figure>


<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>每个远程主机都有一个主机名，git remote 用于管理主机名</p>
<p><code>git remote</code> 列出所有远程主机<br><code>git remote -v</code>参看远程主机网址<br><code>git remote show &lt;主机名&gt;</code>查看主机详细信息<br><code>git remote add &lt;主机名&gt; &lt;网址&gt;</code>添加远程主机<br><code>git remote rm &lt;主机名&gt;</code>删除远程主机<br><code>git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</code>修改远程主机</p>
<p>克隆版本库的时候，所使用的远程主机，自动被git命名为origin，若想使用其他主机名，使用 -o<br><code>git clone -o jQuery https://github.com/jquery/jquery.git</code></p>
<h3 id="HEAD-与-HEAD-区别"><a href="#HEAD-与-HEAD-区别" class="headerlink" title="HEAD^ 与 HEAD~ 区别"></a>HEAD^ 与 HEAD~ 区别</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A = A^<span class="number">0</span></span><br><span class="line">A^ = A^<span class="number">1</span>= A~<span class="number">1</span></span><br><span class="line">^^= A^<span class="number">1</span>^<span class="number">1</span>= A~<span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="reset-hard-soft-区别"><a href="#reset-hard-soft-区别" class="headerlink" title="reset, hard, soft 区别"></a>reset, hard, soft 区别</h3><ul>
<li>HEAD:当前分支当前版本的游标</li>
<li>index：暂存区</li>
</ul>
<p><code>git reset --soft HEAD~</code> 本地的内容没有发生变化，index中有最近一次修改的内容，提交变成staged状态。</p>
<p><code>--mixed</code> 修改了index，使得提交变成了unstaged状态</p>
<p><code>--hard</code> 彻底回到上一次提交的状态，无法找回</p>
<p><code>git revert commitid</code> ,<code>git revert HEAD~3</code>会回到最近的第四个提交状态，并且生成一个新的commitid</p>
<h3 id="代码自动格式化"><a href="#代码自动格式化" class="headerlink" title="代码自动格式化"></a>代码自动格式化</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装husky，prettier,lint-staged</span></span><br><span class="line">"husky": &#123;</span><br><span class="line">    "hooks": &#123;</span><br><span class="line">      "pre-commit": "lint-staged"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "lint-staged": &#123;</span><br><span class="line">    "*.&#123;js,jsx&#125;": [</span><br><span class="line">      "prettier --write \"src/**/*.&#123;js,jsx&#125;\"",</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<!-- more -->

<h3 id="本机权限问题"><a href="#本机权限问题" class="headerlink" title="本机权限问题"></a>本机权限问题</h3><p><code>git pull</code> 的时候 <code>error: cannot open .git/FETCH_HEAD: Permission denied</code> , 因为没有当前目录的修改权限<br><code>sudo chmod -R g+w .git</code> 修改目录权限。即可正常 <code>git pull</code> </p>
<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p>
<h3 id="git表情提示符"><a href="#git表情提示符" class="headerlink" title="git表情提示符"></a>git表情提示符</h3><p>全局安装 <code>git-cz</code> 或者 <code>gitmoji</code><br><code>npm install -g git-cz</code><br><code>npm i -g gitmoji-cli</code> </p>
<h3 id="撤销错误的提交"><a href="#撤销错误的提交" class="headerlink" title="撤销错误的提交"></a>撤销错误的提交</h3><p><code>git reset --soft HEAD^</code> 撤销commit，并保留更改<br><code>git push origin &lt;分支名&gt; --force</code> </p>
<h3 id="force"><a href="#force" class="headerlink" title="force"></a>force</h3><p>如果远程主机的版本比本地版本更新，推送时 git 会报错，要求先在本地做 git pull 合并差异，再推送到远程主机。这时，如果一定要推送，可以使用 force<br><code>git push --force origin</code></p>
<h3 id="清理分支"><a href="#清理分支" class="headerlink" title="清理分支"></a>清理分支</h3><p><code>git remote prune origin</code> 清理远程分支，把本地不存在的远程分支删除，同时 <code>git branch -a</code> 拉到的也是远程最新的分支，不会保留已删除的远程的分支<br><code>git remote show origin</code> ，可以查看 <code>remote</code> 地址，远程分支，还有本地分支与之相对应关系等信息。</p>
<h3 id="修改git的用户名和密码"><a href="#修改git的用户名和密码" class="headerlink" title="修改git的用户名和密码"></a>修改git的用户名和密码</h3><p><code>Git config –global user.name</code> 用户名<br><code>Git config –global user.email</code> 邮箱名</p>
<h3 id="回退到之前的版本号"><a href="#回退到之前的版本号" class="headerlink" title="回退到之前的版本号"></a>回退到之前的版本号</h3><p><code>Git reset –hard</code> 提交版本号</p>
<h3 id="删除远程分支-不需要先切换到其他分支"><a href="#删除远程分支-不需要先切换到其他分支" class="headerlink" title="删除远程分支(不需要先切换到其他分支)"></a>删除远程分支(不需要先切换到其他分支)</h3><ol>
<li><code>git push origin --delete 要删除的分支名</code> </li>
<li><code>git push origin -d 分支名</code> </li>
<li><code>git push &lt;远程分支名&gt; -d 分支名</code> </li>
</ol>
<h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><p><code>git branch -d 本地分支名</code><br><code>git branch -D 本地分支名(分支没有完全merge会报错提示，改为强制删除即可)</code> </p>
<h3 id="暂存修改"><a href="#暂存修改" class="headerlink" title="暂存修改"></a>暂存修改</h3><ol>
<li>暂存 <code>git stash save &quot;message&quot;</code> </li>
<li>恢复 <code>git stash apply</code> </li>
<li>恢复之前一个 <code>git stash apply stash@{2}</code> </li>
<li>删除 <code>git stash drop</code> </li>
<li>恢复 + 删除 <code>git stash pop</code> </li>
<li>列表 <code>git stash list</code> </li>
<li>从储藏创建一个文件 <code>git stash branch branchname</code> </li>
</ol>
<h3 id="查看远程仓库信息"><a href="#查看远程仓库信息" class="headerlink" title="查看远程仓库信息"></a>查看远程仓库信息</h3><ol>
<li><code>git remote -v</code> </li>
</ol>
<h3 id="git撤销操作"><a href="#git撤销操作" class="headerlink" title="git撤销操作"></a>git撤销操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 只会产生一次提交，第二次提交修正了第一次的提交内容 --&gt;</span><br><span class="line">&#96;git commit -m &#39;initial commit&#39;&#96; </span><br><span class="line">&#96;git add forgotten_file&#96; </span><br><span class="line">&#96;git commit --amend&#96;</span><br></pre></td></tr></table></figure>

<h3 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h3><p><code>git branch testing 新建testing分支 在当前commit对象上新建一个分支指针，不会自动切换到该分支中去</code><br><code>git checkout -b iss53 新建分支并切换到该分支</code><br><code>git push -u origin 分支名</code> 提交新建的分支到远程<br><code>git push origin 分支名:分支名</code> 推送新分支到远程<br><code>git fetch &lt;远程主机名&gt; 同步远程服务器上的数据到本地。</code><br><code>git fetch &lt;远程主机名&gt; &lt;分支名&gt;</code>取回特定分支的更新<br><code>git checkout -b newBranch origin/master</code> 在origin/master分支的基础上，新建一个分支</p>
<blockquote>
<p>如果没有推送的远程的话，commit之后只会显示 working tree clean</p>
</blockquote>
<h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p><code>git push origin :[分支名]</code> 删除远程分支</p>
<!--SSH公钥默认存储在账户的主目录下的~/.ssh目录 -->

<h3 id="ssh-key"><a href="#ssh-key" class="headerlink" title="ssh key"></a>ssh key</h3><p><code>cd ~/.ssh</code><br>查找有没有 <code>something</code> 和 <code>something.pub</code> 来命名的一对文件，这个 <code>something</code> 通常是 <code>id_dsa</code> 或 <code>id_rsa</code> 。<br>有 <code>.pub</code> 后缀的文件就是公钥，另一个文件是私钥。若 <code>.ssh</code> 目录没有，可以用 <code>ssh-keygen</code> 来创建。</p>
<h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><ul>
<li>合并多个commit为1个</li>
<li>合并分支 <code>git rebase master</code> 在master分支上的最先提交上补上开发分支的代码</li>
</ul>
<h3 id="合并commit"><a href="#合并commit" class="headerlink" title="合并commit"></a>合并commit</h3><p><code>git</code> 修改多个 <code>commit</code> 为一个 <code>commit</code> </p>
<ol>
<li>从HEAD版本开始往过去数3个版本 <code>git rebase -i HEAD~3</code><br>将后面的2个commit之前的pick改成s，表示，要把后面的两个commit合并到前一个commit</li>
</ol>
<p>或者，指明要合并的版本之前的版本号 <code>git rebase -i commitId（不参与合并）</code> </p>
<ol start="2">
<li>除了第一个以外，后面的多个 <code>commit pick</code> 改为 <code>s</code> </li>
<li><code>esc</code> 键退出编辑</li>
<li><code>:wq</code> 退出</li>
<li><code>git add .</code> </li>
<li><code>git rebase --continue</code> </li>
<li><code>git rebase --abort</code> 放弃压缩</li>
</ol>
<h3 id="撤销改动"><a href="#撤销改动" class="headerlink" title="撤销改动"></a>撤销改动</h3><p><code>git clean -f -d</code> 移除工作目录中所有未追踪的文件以及空的子目录<br>如果只是想要看看它会做什么，可以使用 -n 选项来运行命令，这意味着 “做一次演习然后告诉你 将要 移除什么”。<br><code>git clean -d -n</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git checkout. / publish</span><br><span class="line">git clean - f. / publish</span><br></pre></td></tr></table></figure>

<h3 id="merge-分支"><a href="#merge-分支" class="headerlink" title="merge 分支"></a>merge 分支</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// merge 代码用</span></span><br><span class="line">git merge 分支名--squash</span><br><span class="line">git merge abort 取消合并</span><br></pre></td></tr></table></figure>

<h3 id="比较两次-commit-的差异"><a href="#比较两次-commit-的差异" class="headerlink" title="比较两次 commit 的差异"></a>比较两次 commit 的差异</h3><ol>
<li><p>比较两次commit提交之后的差异：<br><code>git diff hash1 hash2 --stat</code>能够查看出两次提交之后，文件发生的变化。</p>
</li>
<li><p>具体查看两次commit提交之后某文件的差异：<br><code>git diff hash1 hash2 --文件名</code></p>
</li>
<li><p>比较两个分支的所有有差异的文件的详细差异：<br><code>git diff branch1 branch2</code></p>
</li>
<li><p>比较两个分支的指定文件的详细差异<br><code>git diff branch1 branch2 文件名(带路径)</code></p>
</li>
<li><p>比较两个分支的所有有差异的文件列表<br><code>git diff branch1 branch2 --stat</code></p>
</li>
</ol>
<h3 id="撤销已经提交的commit"><a href="#撤销已经提交的commit" class="headerlink" title="撤销已经提交的commit"></a>撤销已经提交的commit</h3><p><code>git reset --hard HEAD~1</code> 撤销上次的commit，保留之前的更改<br><code>git reset --hard &lt;需要回退到的版本号（只需输入前几位）&gt;</code><br><code>git push origin &lt;分支名&gt; --force</code> 或者 <code>git push --force</code> 强制提交</p>
<h3 id="删除中间某次提交-待补充"><a href="#删除中间某次提交-待补充" class="headerlink" title="删除中间某次提交(待补充)"></a>删除中间某次提交(待补充)</h3><ol>
<li>首先 <code>git log</code> 查看提交记录，找到出错的前一笔提交的 <code>commit_id</code> </li>
<li>用命令 <code>git rebase -i commit_id</code> , 查找提交记录</li>
<li>将出错那次提交的 <code>pick</code> 改为 <code>drop</code> </li>
<li><code>Esc，:wq</code> </li>
<li>完成！</li>
</ol>
<h3 id="git-reset分为三种模式"><a href="#git-reset分为三种模式" class="headerlink" title="git reset分为三种模式"></a>git reset分为三种模式</h3><ul>
<li>soft </li>
<li>mixed </li>
<li>hard</li>
</ul>
<p><strong>git reset –hard commitId</strong><br>重置暂存区和工作区，完全重置为指定的commitId，当前分支没有commit的代码会被清除<br><strong>git reset –soft commitId</strong><br>保留工作目录，把指定的commit节点与当前分支的差异都存入暂存区。没有被commit的代码也能够保留下来<br><strong>git reset commitId</strong><br>不带参数，就是mixed模式。将会保留工作目录，并把工作区、暂存区、以及与reset的差异都放到工作区，然后清空暂存区。</p>
<h3 id="rn-项目操作命令"><a href="#rn-项目操作命令" class="headerlink" title="rn 项目操作命令"></a>rn 项目操作命令</h3><p><code>xcrun simctl list devices</code> 获取所有设备名称<br><code>crn-cli run-ios --port=5390 --simulator=&quot;iPad Air (3rd generation)&quot; --reset</code> 指定打开设备</p>
<h3 id="关联本地项目与GitHub"><a href="#关联本地项目与GitHub" class="headerlink" title="关联本地项目与GitHub"></a>关联本地项目与GitHub</h3><ol>
<li>在本地项目 <code>git init</code> </li>
<li><code>git add .</code> </li>
<li><code>git commit -m &quot; message&quot;</code> </li>
<li>在 <code>GitHub</code> 建立一个项目</li>
<li>复制项目 <code>HTTPS</code> 地址</li>
<li><code>git remote add origin https 地址</code> </li>
<li><code>git push -u origin master</code> </li>
</ol>
<h3 id="代码版本"><a href="#代码版本" class="headerlink" title="代码版本"></a>代码版本</h3><ol>
<li>查看过去版本 <code>git log --pretty=oneline</code> </li>
</ol>
<h3 id="暂存区文件撤销"><a href="#暂存区文件撤销" class="headerlink" title="暂存区文件撤销"></a>暂存区文件撤销</h3><ol>
<li><code>git reset HEAD 文件</code> </li>
</ol>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><ol>
<li>从版本库中删除文件 <code>git rm 文件名</code> </li>
<li>从版本库中删除文件，但是本地不删除该文件 <code>git rm --cached 文件名</code> </li>
</ol>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ol>
<li>仅创建 <code>git branch 分支名</code> </li>
<li>创建并切换 <code>git checkout -b 分支名</code> </li>
</ol>
<p><code>git branch -r</code>查看远程分支</p>
<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>npm rebuild  重建软件包<br>npm build</p>
<h3 id="与-的区别"><a href="#与-的区别" class="headerlink" title="^ 与 ~ 的区别"></a>^ 与 ~ 的区别</h3><ul>
<li>~ 会匹配最近的小版本依赖包，~1.2.3 会匹配 1.2.x </li>
<li>^ 会匹配最新的大版本依赖包，^1.2.3 会匹配 1.x.x</li>
</ul>
<h2 id="Unexpected-end-of-JSON-input-while-parsing-near-‘…-“http-registry-npm-39"><a href="#Unexpected-end-of-JSON-input-while-parsing-near-‘…-“http-registry-npm-39" class="headerlink" title="Unexpected end of JSON input while parsing near ‘… “http://registry.npm.&#39;"></a>Unexpected end of JSON input while parsing near ‘… “<a href="http://registry.npm.&#39;" target="_blank" rel="noopener">http://registry.npm.&#39;</a></h2><p>第一步<br><code>npm cache clean --force</code><br>第二步<br><code>npm install --registry=https://registry.npm（镜像）</code> </p>
<p>原因：可以先看下npm install的执行过程：</p>
<ul>
<li>发出npm install命令</li>
<li>npm 向 registry 查询模块压缩包的网址</li>
<li>下载压缩包，存放在~/.npm(本地NPM缓存路径)目录</li>
<li>解压压缩包到当前项目的node_modules目录</li>
</ul>
<p>&nbsp; &nbsp; 实际上说一个模块安装以后，本地其实保存了两份。一份是 ~/.npm 目录下的压缩包，另一份是 node_modules 目录下解压后的代码。但是，运行 npm install 的时候，只会检查 node_modules 目录，而不会检查 ~/.npm 目录。如果一个模块在 ~./npm 下有压缩包，但是没有安装在 node_modules 目录中，npm 依然会从远程仓库下载一次新的压缩包。</p>
<p>&nbsp; &nbsp; 我们想利用已经在缓存中之前已经备份的模块实现离线模块安装的的 cache 机制已经在V5的时候重写了，缓存将由 npm 来全局维护不再需要开发人员操心，离线安装时将不再尝试连接网络，而是降级尝试从缓存中读取，或直接失败。就是如果你 offline ，npm将无缝地使用您的缓存。</p>
<p>&nbsp; &nbsp; 这是一个与npm缓存腐败的问题。尽管在较新版本的npm中他们实现了自我修复，这通常可以保证没有腐败，但似乎并不那么有效。</p>
<h3 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h3><p>npm 脚本有pre和post两个钩子。举例来说，build脚本命令的钩子就是prebuild和postbuild<br>用户执行npm run build的时候，会自动按照 <code>npm run prebuild &amp;&amp; npm run build &amp;&amp; npm run postbuild</code> 的顺序执行</p>
<h3 id="更新-npm-插件"><a href="#更新-npm-插件" class="headerlink" title="更新 npm 插件"></a>更新 npm 插件</h3><p><code>npm update &lt;name&gt; [-g] [--save-dev]</code></p>
<h3 id="vscode-自带终端，每次打开都报错误"><a href="#vscode-自带终端，每次打开都报错误" class="headerlink" title="vscode 自带终端，每次打开都报错误"></a>vscode 自带终端，每次打开都报错误</h3><p><code>nvm is not compatible with the npm config &quot;prefix&quot; option: currently set to &quot;/usr/local&quot; Run &quot;npm config delete prefix&quot; or &quot;nvm use --delete-prefix v10.15.1 --silent&quot; to unset it.</code> </p>
<p>👇<br><code>npm config delete prefix</code><br><code>npm config set prefix $NVM_DIR/versions/node/v10.15.1</code> </p>
<p><img src="http://ww1.sinaimg.cn/large/92babc53gy1gbmq2fukejj21ai35sqm4.jpg" alt="git.jpg"></p>
<h2 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h2><p>cat file.js 输入 file.js 文件内容</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>react组件复用</title>
    <url>/2020/04/04/react%E7%BB%84%E4%BB%B6%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<p>组件复用的两种形式：高阶组价 和 函数作为子组件</p>
<a id="more"></a>
<h3 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h3><p>高阶组件一般不会有自己的UI展现，而只是为他封装的组件提供额外的功能或者数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Clock constructed"</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Clock did mount"</span>);</span><br><span class="line">    <span class="keyword">this</span>.timerID = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.tick(), <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Clock will unmount"</span>);</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timerID);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Clock did update"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">          It is &#123;<span class="keyword">this</span>.state.date.toLocaleTimeString()&#125;.</span><br><span class="line">        &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>高阶组件<br>withTimer给已有的组件注入计时器的功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">withTimer</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123; <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">      <span class="keyword">this</span>.timerID = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.tick(), <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">      clearInterval(<span class="keyword">this</span>.timerID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tick() &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> <span class="attr">time</span>=<span class="string">&#123;this.state.time&#125;</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>


<h3 id="函数作为子组件"><a href="#函数作为子组件" class="headerlink" title="函数作为子组件"></a>函数作为子组件</h3><p>把函数作为children，组件如何呈现由使用他的人来决定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">component</span></span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.children(<span class="string">'hello'</span>)&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;MyComponent&gt;</span></span><br><span class="line"><span class="regexp">&#123;(name)=&gt;(</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&#123;name&#125;&lt;/</span>div&gt;</span><br><span class="line">)&#125;</span><br><span class="line">&lt;<span class="regexp">/MyComponent&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">AdvancedTabSelector</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    value: PropTypes.object,</span><br><span class="line">    options: PropTypes.array,</span><br><span class="line">    onChange: PropTypes.func,</span><br><span class="line">    children: PropTypes.func</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    value: <span class="literal">null</span>,</span><br><span class="line">    options: [],</span><br><span class="line">    onChange: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">    children: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; options, value, onChange &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"tab-selector"</span>&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;options.map(<span class="function"><span class="params">opt</span> =&gt;</span> (</span><br><span class="line">            &lt;li</span><br><span class="line">              key=&#123;opt.value&#125;</span><br><span class="line">              className=&#123;<span class="string">`tab-item <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">                opt.value === <span class="keyword">this</span>.props.value ? <span class="string">"selected"</span> : <span class="string">""</span></span></span></span><br><span class="line"><span class="string"><span class="subst">              &#125;</span>`</span>&#125;</span><br><span class="line">              onClick=&#123;() =&gt; <span class="keyword">this</span>.props.onChange(opt.value)&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              &#123;opt.name&#125;</span><br><span class="line">            &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          ))&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/u</span>l&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.value &amp;&amp; <span class="keyword">this</span>.props.children(<span class="keyword">this</span>.props.value)&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const colors = [</span></span><br><span class="line"><span class="regexp">  &#123; name: "Red", value: "red" &#125;,</span></span><br><span class="line"><span class="regexp">  &#123; name: "Blue", value: "blue" &#125;,</span></span><br><span class="line"><span class="regexp">  &#123; name: "Orange", value: "orange" &#125;</span></span><br><span class="line"><span class="regexp">];</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const animals = [</span></span><br><span class="line"><span class="regexp">  &#123; name: "Tiger", value: "tiger" &#125;,</span></span><br><span class="line"><span class="regexp">  &#123; name: "Elephant", value: "elephant" &#125;,</span></span><br><span class="line"><span class="regexp">  &#123; name: "Cow", value: "cow" &#125;</span></span><br><span class="line"><span class="regexp">];</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export class AdvancedTabSelectorSample extends PureComponent &#123;</span></span><br><span class="line"><span class="regexp">  state = &#123;</span></span><br><span class="line"><span class="regexp">    color: null</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h3&gt;Select color: &lt;/</span>h3&gt;</span><br><span class="line">        &lt;AdvancedTabSelector</span><br><span class="line">          options=&#123;colors&#125;</span><br><span class="line">          value=&#123;<span class="keyword">this</span>.state.color&#125;</span><br><span class="line">          onChange=&#123;c =&gt; <span class="keyword">this</span>.setState(&#123; <span class="attr">color</span>: c &#125;)&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;color =&gt; (</span><br><span class="line">            &lt;span</span><br><span class="line">              style=&#123;&#123;</span><br><span class="line">                display: <span class="string">"inline-block"</span>,</span><br><span class="line">                backgroundColor: color,</span><br><span class="line">                width: <span class="string">"40px"</span>,</span><br><span class="line">                height: <span class="string">"40px"</span></span><br><span class="line">              &#125;&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;<span class="regexp">/AdvancedTabSelector&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br /</span>&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;h3&gt;Select animal: <span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">        &lt;AdvancedTabSelector</span><br><span class="line">          options=&#123;animals&#125;</span><br><span class="line">          value=&#123;<span class="keyword">this</span>.state.animal&#125;</span><br><span class="line">          onChange=&#123;c =&gt; <span class="keyword">this</span>.setState(&#123; <span class="attr">animal</span>: c &#125;)&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;animal =&gt; (</span><br><span class="line">            &lt;img width=<span class="string">"100px"</span> src=&#123;<span class="built_in">require</span>(<span class="string">`../../images/<span class="subst">$&#123;animal&#125;</span>.png`</span>)&#125; /&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;<span class="regexp">/AdvancedTabSelector&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>极客时间</category>
      </categories>
  </entry>
  <entry>
    <title>Proxy</title>
    <url>/2020/04/04/Proxy/</url>
    <content><![CDATA[<p>Proxy用于修改某些操作的默认行为，可以理解成在目标对象前拦截。</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function (target, key, receiver) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`getting <span class="subst">$&#123;key&#125;</span>!`</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function (target, key, value, receiver) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`setting <span class="subst">$&#123;key&#125;</span>!`</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">obj.count = <span class="number">1</span></span><br><span class="line">++obj.count</span><br></pre></td></tr></table></figure>

<p>以上代码说明，Proxy 实际上重载了点运算符，即用自己的定义覆盖了语言的原始定义。</p>
<p>要使proxy起作用，必须针对proxy实例进行操作，而不是目标对象。如果handler没有设置任何拦截，那就等同于直接通向原对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br><span class="line">proxy.a = <span class="string">'b'</span></span><br><span class="line"><span class="built_in">console</span>.log(target.a)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="keyword">get</span>: function (target, name) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name === <span class="string">'prototype'</span>) <span class="keyword">return</span> <span class="built_in">Object</span>.prototype</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello, '</span> + name</span><br><span class="line">    &#125;,</span><br><span class="line">    apply: <span class="function"><span class="keyword">function</span> (<span class="params">target, thisBinding, args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args[<span class="number">0</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">constructor</span>: function (target, args) &#123;</span><br><span class="line">        <span class="keyword">return</span> args[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fproxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;, handler)</span><br><span class="line"></span><br><span class="line">fproxy(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">new</span> fproxy(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fproxy.prototype</span><br><span class="line">fproxy.foo</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>(<span class="params">...elements</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> handler = &#123;</span><br><span class="line">        <span class="keyword">get</span>(target, propKey, receiver) &#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="built_in">Number</span>(propKey)</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                propKey = <span class="built_in">String</span>(target.length + index)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, propKey, receiver)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> target = []</span><br><span class="line">    target.push(...elements)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = createArray(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ES6</category>
      </categories>
  </entry>
  <entry>
    <title>WebStorm快捷键</title>
    <url>/2020/02/25/WebStorm%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>webStorm快捷键汇总</p>
<a id="more"></a>
<p>command + option + L 格式化代码<br>command + shift + O 跳到某个文件<br>ctrl + alt + R 运行文件<br>alt + f12 打开终端<br>cmd + d 复制当前行<br>command + option + esc 杀进程</p>
<p>command + / 单行注释</p>
<p>command + option + / 多行注释</p>
<p>/** + enter 方法注释</p>
<p>command + alt + T 用 if…else… 或者 try…catch 包住</p>
<p>alt + / 与 enter 功能相似，代码自动补全</p>
<p>command + R 替换</p>
<p>command + G 查找下一个</p>
<p>shift + F6 重命名</p>
<p>cmd + home 回到顶部</p>
<p>ctrl + tab 切换导航栏文件</p>
<p>cmd+shift+r 批量替换<br>ctrl+shift+g 批量查找</p>
]]></content>
  </entry>
  <entry>
    <title>Hooks原理</title>
    <url>/2020/01/14/Hooks%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>!TODO 如何在hooks中使用异步方法？</p>
<p><a href="https://github.com/brickspert/blog/issues/26" target="_blank" rel="noopener">参考文章</a></p>
<a id="more"></a>


<h3 id="useState-原理"><a href="#useState-原理" class="headerlink" title="useState 原理"></a>useState 原理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;&#123;count&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Button onClick=&#123;() =&gt; &#123; setCount(count + 1) &#125;&#125;&gt;点击&lt;/</span>Button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">let _state</span></span><br><span class="line"><span class="regexp">function useState(initialValue) &#123;</span></span><br><span class="line"><span class="regexp">  _state = initialValue</span></span><br><span class="line"><span class="regexp">  function setState(newValue) &#123;</span></span><br><span class="line"><span class="regexp">    _state = newValue</span></span><br><span class="line"><span class="regexp">    render()</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  return [_state, setState]</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="useEffect-原理"><a href="#useEffect-原理" class="headerlink" title="useEffect 原理"></a>useEffect 原理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(count)</span><br><span class="line">&#125;, [count])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _deps</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useEffect</span>(<span class="params">callback, depArray</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hasNoDeps = !depArray</span><br><span class="line">  <span class="keyword">const</span> hasChangedDeps = _deps</span><br><span class="line">    ? !depArray.every(<span class="function">(<span class="params">el, i</span>) =&gt;</span> el === _deps[i])</span><br><span class="line">    : <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span> (hasNoDeps || hasChangedDeps) &#123;</span><br><span class="line">    callback()</span><br><span class="line">    _deps = depArray</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是如果页面中需要使用多个useState就会有问题，因为useState需要公用全局变量_state，我们需要可以存储多个_state 和 _deps</p>
<p>关键在于：</p>
<ol>
<li>初次渲染的时候，按照useState、useEffect的顺序，把state，deps等按顺序塞到 memoizedState 数组中</li>
<li>更新的时候，按照顺序，从 memoizedState 中把上次记录的值拿回来。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> memoizedState = []</span><br><span class="line"><span class="keyword">let</span> cursor = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useState</span>(<span class="params">initialValue</span>) </span>&#123;</span><br><span class="line">  memoizedState[cursor] = memoizedState[cursor] || initialValue</span><br><span class="line">  <span class="keyword">const</span> currentCursor = cursor</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">newState</span>) </span>&#123;</span><br><span class="line">    memoizedState[currentCursor] = newState</span><br><span class="line">    render()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [memoizedState[cursor + <span class="number">1</span>], setState] <span class="comment">//  返回当前 state，并把 cursor 加 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useEffect</span>(<span class="params">callback, depArray</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hasNoDeps = !depArray</span><br><span class="line">  <span class="keyword">const</span> deps = memoizedState[cursor]</span><br><span class="line">  <span class="keyword">const</span> hasChangedDeps = deps</span><br><span class="line">    ? !depArray.every(<span class="function">(<span class="params">el, i</span>) =&gt;</span> el === deps[i])</span><br><span class="line">    : <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span> (hasNoDeps || hasChangedDeps) &#123;</span><br><span class="line">    callback()</span><br><span class="line">    memoizedState[cursor] = depArray</span><br><span class="line">  &#125;</span><br><span class="line">  cursor++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>react-router</title>
    <url>/2020/04/04/react-router/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>极客时间</category>
      </categories>
  </entry>
  <entry>
    <title>react性能优化</title>
    <url>/2020/04/04/react%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>异步渲染的两个部分</p>
<ul>
<li>时间分片<br>DOM操作的优先级低于浏览器原生行为，例如键盘和鼠标输入，从而保证操作的流畅</li>
<li>渲染挂起<br>虚拟DOM节点可以等待某个异步操作的完成，并指定timeout，之后才完成真正的渲染。</li>
</ul>
<h3 id="时间分片"><a href="#时间分片" class="headerlink" title="时间分片"></a>时间分片</h3><ol>
<li>虚拟dom的diff操作可以分片进行</li>
<li>React新API：unstable_deferredUpdates<br>UI更新会等其他高优先级的UI更新先完成之后才更新</li>
<li>Chrome新的API：requestIdleCallback<br>浏览器告诉你什么时候浏览器不忙了</li>
</ol>
]]></content>
      <categories>
        <category>极客时间</category>
      </categories>
  </entry>
  <entry>
    <title>防抖和节流</title>
    <url>/2020/03/12/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><blockquote>
<p>你尽管触发事件，但是我一定在事件触发 n 秒后才执行，如果你在一个事件触发的 n 秒内又触发了这个事件，那我就以新的事件的时间为准，n 秒后才执行，总之，就是要等你触发完事件 n 秒内不再触发事件</p>
</blockquote>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;border: 1px solid red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> count = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> container = <span class="built_in">document</span>.querySelector(<span class="string">'#container'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getUserAction</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.innerHTML = count++</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">debounce</span><span class="params">(fn)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> timer</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> context = <span class="keyword">this</span></span></span><br><span class="line">            clearTimeout(timer)</span><br><span class="line"><span class="javascript">            timer = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                fn.apply(context,<span class="built_in">arguments</span>)</span></span><br><span class="line">            &#125;,1000)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    container.onmousemove = debounce(getUserAction)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><blockquote>
<p>如果你持续触发事件，每隔一段时间，只执行一次事件</p>
</blockquote>
<h4 id="使用时间戳"><a href="#使用时间戳" class="headerlink" title="使用时间戳"></a>使用时间戳</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="container" style="width: 100px;height: 100px;border: 1px solid red"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> container = <span class="built_in">document</span>.querySelector(<span class="string">'#container'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getUserAction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.innerHTML = count++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> previous = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> context,args</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">            context = <span class="keyword">this</span></span><br><span class="line">            args = <span class="built_in">arguments</span></span><br><span class="line">            <span class="keyword">if</span>(now-previous&gt;<span class="number">1000</span>)&#123;</span><br><span class="line">                fn.apply(context,args)</span><br><span class="line">                previous = now</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    container.onmousemove = debounce(getUserAction)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="使用定时器"><a href="#使用定时器" class="headerlink" title="使用定时器"></a>使用定时器</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;border: 1px solid red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> count = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> container = <span class="built_in">document</span>.querySelector(<span class="string">'#container'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getUserAction</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.innerHTML = count++</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">throttle</span><span class="params">(fn)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> previous = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> timeout</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="actionscript">            context = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">            args = <span class="built_in">arguments</span></span></span><br><span class="line">            if(!timeout)&#123;</span><br><span class="line"><span class="javascript">                timeout = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                    timeout = <span class="literal">null</span></span></span><br><span class="line">                    fn.apply(context,args)</span><br><span class="line">                &#125;,1000)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    container.onmousemove = throttle(getUserAction)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title>React</title>
    <url>/2019/12/28/React/</url>
    <content><![CDATA[<h3 id="React-如何区分-class-和-functions"><a href="#React-如何区分-class-和-functions" class="headerlink" title="React 如何区分 class 和 functions"></a><a href="https://overreacted.io/zh-hans/how-does-react-tell-a-class-from-a-function/" target="_blank" rel="noopener">React 如何区分 class 和 functions</a></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span> &gt;</span> Hello <span class="tag">&lt; /<span class="attr">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span> &gt;</span> hello <span class="tag">&lt; /<span class="attr">p</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果 Greeting 是一个函数，React 需要调用它。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = Greeting(props)</span><br></pre></td></tr></table></figure>

<p>但如果 Greeting 是一个类，React 需要先用 new 操作符将其实例化，然后 调用刚才生成实例的 render 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Greeting(props); <span class="comment">// Greeting &#123;&#125;</span></span><br><span class="line"><span class="keyword">const</span> result = instance.render(); <span class="comment">// &lt;p&gt;Hello&lt;/p&gt;</span></span><br></pre></td></tr></table></figure>

<p>new 的作用：创建一个 {} 对象并把 Person 中的 this 指向那个对象，以便我可以通过类似 this.name 的形式去设置一些东西，然后把这个对象返回给我。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fred = <span class="keyword">new</span> Person(<span class="string">'Fred'</span>)</span><br></pre></td></tr></table></figure>
<p>我们可以利用箭头函数没有 prototype 的特点来检测箭头函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;).prototype <span class="comment">// undefined</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;).prototype <span class="comment">// &#123;constructor: f&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Greeting(); <span class="comment">// ✅ 'Hello'</span></span><br><span class="line"><span class="keyword">new</span> Greeting(); <span class="comment">// 😳 Greeting &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p> dangerouslySetInnerHTML 是 React 提供的替换浏览器 DOM 中的 innerHTML 接口的一个参数。<br>一般而言，使用 JS 代码设置 HTML 文档的内容是危险的，因为这样很容易把你的用户信息暴露给跨站脚本攻击. 所以，你虽然可以直接在 React 中设置 html 的内容，但你要使用 dangerouslySetInnerHTML 并向该函数传递一个含有__html 键的对象，用来提醒你自己这样做很危险。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ProfilePage</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> showMessage = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        alert(<span class="string">"Followed "</span> + props.user);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(showMessage, <span class="number">3000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span> = <span class="string">&#123;</span></span></span></span><br><span class="line"><span class="xml">        handleClick</span></span><br><span class="line"><span class="xml">    &#125; &gt; Follow <span class="tag">&lt; /<span class="attr">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// function handleClick不需要使用箭头函数，用不用箭头函数的表现形式都是一样的</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    showMessage = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        alert(<span class="string">"Followed "</span> + <span class="keyword">this</span>.props.user);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="keyword">this</span>.showMessage, <span class="number">3000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span> = <span class="string">&#123;</span></span></span></span><br><span class="line"><span class="xml">            this.handleClick</span></span><br><span class="line"><span class="xml">        &#125; &gt; Follow <span class="tag">&lt; /<span class="attr">button</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>function 和 class 的区别在于：<br>1、点击 function 旁边的按钮，然后在三秒内改变 select 输入框的值：例如从 Dan 改为 Sophie，弹框弹出 Dan<br>2、点击 class 旁边的按钮，然后三秒内改变 select 输入框的值，弹框弹出 Sophie。<br>在这两种表现形式中，function 表现的是正确的。</p>
<p>那为何 class 会这样的表现呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        showMessage = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="string">'Followed '</span> + <span class="keyword">this</span>.props.user);</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>

<p>在 react 中，props 是不可变更的，但是 this 总是可变的。React 经过一段时间后改变自己，所以我们可以在 render 和生命周期函数中得到最新的版本。</p>
<p>那么如何解决 class 的这种问题呢？<br>1、早点读 this.props, 并且把值传递下去</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    showMessage = <span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">        alert(<span class="string">"Followed "</span> + user);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            user</span><br><span class="line">        &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.showMessage(user), <span class="number">3000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span> = <span class="string">&#123;</span></span></span></span><br><span class="line"><span class="xml">            this.handleClick</span></span><br><span class="line"><span class="xml">        &#125; &gt; Follow <span class="tag">&lt; /<span class="attr">button</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、可以通过使用闭包把这个问题解决: 在 render 里面定义一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> props = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">const</span> showMessage = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="string">"Followed "</span> + props.user);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            setTimeout(showMessage, <span class="number">3000</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span> = <span class="string">&#123;</span></span></span></span><br><span class="line"><span class="xml">            handleClick</span></span><br><span class="line"><span class="xml">        &#125; &gt; Follow <span class="tag">&lt; /<span class="attr">button</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 react 中，props 和 state 是不可以变的，变化的是 this</p>
<p>另一个例子。alert 出来的是，当点击 send 的时候输入框的值。而不是 3 秒之后输入框的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MessageThread</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [message, setMessage] = useState(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> showMessage = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        alert(<span class="string">"You said: "</span> + message);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleSendClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(showMessage, <span class="number">3000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleMessageChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        setMessage(e.target.value);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        &gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        input value = &#123;</span></span><br><span class="line"><span class="xml">            message</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        onChange = &#123;</span></span><br><span class="line"><span class="xml">            handleMessageChange</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        /&gt; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        button onClick = &#123;</span></span><br><span class="line"><span class="xml">            handleSendClick</span></span><br><span class="line"><span class="xml">        &#125; &gt; Send <span class="tag">&lt; /<span class="attr">button</span>&gt;</span></span> <span class="xml"><span class="tag">&lt; / &gt;</span></span></span><br><span class="line"><span class="xml">    );</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果想读取最新的 props 或 state 值怎么办呢？用上述的 class 方法。<br>在 function 函数中，用 ref</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MessageThread</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [message, setMessage] = useState(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">const</span> latestMessage = useRef(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> showMessage = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        alert(<span class="string">'You said: '</span> + latestMessage.current);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleSendClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(showMessage, <span class="number">3000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleMessageChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        setMessage(e.target.value);</span><br><span class="line">        latestMessage.current = e.target.value;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>手动更新 ref 是特别烦的，可以用 useEffect 来更新</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MessageThread</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [message, setMessage] = useState(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">const</span> latestMessage = useRef(<span class="string">''</span>);</span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        latestMessage.current = message;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> showMessage = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        alert(<span class="string">'You said: '</span> + latestMessage.current);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>今天在 every 的问题上纠结了一段时间，后来发现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element &gt;= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough); <span class="comment">// false</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 这里的函数一定要加return，不然得到的结果是错误的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// some，filter，map，都要加</span></span><br></pre></td></tr></table></figure>

<p>React 的 setState</p>
<p>setState 被调用之后，更新组件的过程：</p>
<ul>
<li><p>enqueueState(this, partialState)</p>
<p>1、 获取当前组件的 instance<br>2、 将要更新的 state 放进一个数组_pendingStateQueue 里<br>3、 将 instance 给 enqueueUpdate 处理</p>
</li>
<li><p>enqueueUpdate —-&gt; 是否处于创建/更新阶段</p>
<p>1、 是 —–&gt; 只是将当前组件放在 dirtyComponent 中<br>2、 否 调用 bachingUpdates</p>
</li>
</ul>
<p>nodejs 返回状态码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">"/test"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">    res.status(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>React Refs</p>
<ul>
<li>字符串模式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props, context)</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.refs.inputEl.focus()</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span> = <span class="string">"inputEl"</span> / &gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>回调函数模式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props, context)</span><br><span class="line">    &#125;</span><br><span class="line">    _ref = <span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (el) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.els) &#123;</span><br><span class="line">                <span class="keyword">this</span>.els = []</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.els.push(el)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.els = []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            list</span><br><span class="line">        &#125; = <span class="keyword">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            ul &gt; &#123;</span></span><br><span class="line"><span class="xml">                list.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                    return ( <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">                        li ref = &#123;</span></span><br><span class="line"><span class="xml">                            this._ref</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                        key = &#123;</span></span><br><span class="line"><span class="xml">                            index</span></span><br><span class="line"><span class="xml">                        &#125; &gt; &#123;</span></span><br><span class="line"><span class="xml">                            item</span></span><br><span class="line"><span class="xml">                        &#125; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">                        /li&gt;</span></span><br><span class="line">                    )</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; &lt;</span><br><span class="line">            /ul&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        value: <span class="string">""</span>,</span><br><span class="line">        list: []</span><br><span class="line">    &#125;</span><br><span class="line">    onchange = (&#123;</span><br><span class="line">        target: &#123;</span><br><span class="line">            value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    add = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            list,</span><br><span class="line">            value</span><br><span class="line">        &#125; = <span class="keyword">this</span>.state</span><br><span class="line">        list.push(value)</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            value: <span class="string">''</span>,</span><br><span class="line">            list</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            value,</span><br><span class="line">            list</span><br><span class="line">        &#125; = <span class="keyword">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            div className = "App" &gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            input value = &#123;</span></span><br><span class="line"><span class="xml">                value</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            onchange = &#123;</span></span><br><span class="line"><span class="xml">                this.onchange</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            /&gt; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            button onClick = &#123;</span></span><br><span class="line"><span class="xml">                this.add</span></span><br><span class="line"><span class="xml">            &#125; &gt; add <span class="tag">&lt; /<span class="attr">button</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            List list = &#123;</span></span><br><span class="line"><span class="xml">                list</span></span><br><span class="line"><span class="xml">            &#125; &gt; <span class="tag">&lt; /<span class="attr">List</span>&gt;</span></span> <span class="xml"><span class="tag">&lt; /</span></span></span><br><span class="line"><span class="xml">            div &gt;</span></span><br><span class="line"><span class="xml">        )</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="react渲染原理"><a href="#react渲染原理" class="headerlink" title="react渲染原理"></a>react渲染原理</h3><h3 id="渲染劫持（Render-Hijacking）"><a href="#渲染劫持（Render-Hijacking）" class="headerlink" title="渲染劫持（Render Hijacking）"></a>渲染劫持（Render Hijacking）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 高阶组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enhancer</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">EnhancedComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;</span></span></span><br><span class="line"><span class="xml">                ...this.props</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            /&gt;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enhancer</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">EnhancedComponent</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">const</span> elementsTree = <span class="keyword">super</span>.render();</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="高阶组件-HOC"><a href="#高阶组件-HOC" class="headerlink" title="高阶组件 HOC"></a>高阶组件 HOC</h4><p>实现高阶组件的方式：</p>
<ul>
<li>属性代理</li>
<li>反向继承</li>
</ul>
<p><strong>属性代理</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;</span><br><span class="line">    Component</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'React'</span>;</span><br><span class="line"><span class="comment">//高阶组件定义</span></span><br><span class="line"><span class="keyword">const</span> HOC = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WrapperComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;</span></span></span><br><span class="line"><span class="xml">                ...this.props</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            /&gt;;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">//普通的组件</span></span><br><span class="line"><span class="xml">class WrappedComponent extends Component &#123;</span></span><br><span class="line"><span class="xml">    render() &#123;</span></span><br><span class="line"><span class="xml">        //....</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">//高阶组件使用</span></span><br><span class="line"><span class="xml">export default HOC(WrappedComponent)</span></span><br></pre></td></tr></table></figure>

<p><strong>属性代理作用</strong></p>
<ul>
<li>操作props</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HOC = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WrapperComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">                name: <span class="string">'HOC'</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;</span></span></span><br><span class="line"><span class="xml">                ...this.props</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            /&gt;;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>获得refs的引用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;</span><br><span class="line">    Component</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'React'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HOC = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">wrapperComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">        storeRef(ref) &#123;</span><br><span class="line">            <span class="keyword">this</span>.ref = ref;</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;</span></span></span><br><span class="line"><span class="xml">                ...this.props</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            ref = &#123;</span></span><br><span class="line"><span class="xml">                this.storeRef</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            /&gt;;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>抽象state</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrappedComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span> = <span class="string">"name"</span> &#123;</span></span></span><br><span class="line"><span class="xml">            ...this.props.name</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        /&gt;;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">const HOC = (WrappedComponent) =&gt;</span></span><br><span class="line"><span class="xml">    class extends Component &#123;</span></span><br><span class="line"><span class="xml">        constructor(props) &#123;</span></span><br><span class="line"><span class="xml">            super(props);</span></span><br><span class="line"><span class="xml">            this.state = &#123;</span></span><br><span class="line"><span class="xml">                name: '',</span></span><br><span class="line"><span class="xml">            &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">            this.onNameChange = this.onNameChange.bind(this);</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        onNameChange(event) &#123;</span></span><br><span class="line"><span class="xml">            this.setState(&#123;</span></span><br><span class="line"><span class="xml">                name: event.target.value,</span></span><br><span class="line"><span class="xml">            &#125;)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        render() &#123;</span></span><br><span class="line"><span class="xml">            const newProps = &#123;</span></span><br><span class="line"><span class="xml">                value: this.state.name,</span></span><br><span class="line"><span class="xml">                onChange: this.onNameChange</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line">            return &lt;WrappedComponent &#123;</span><br><span class="line">                ...this.props</span><br><span class="line">            &#125; &#123;</span><br><span class="line">                ...newProps</span><br><span class="line">            &#125;</span><br><span class="line">            /&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>反向继承</strong></p>
<blockquote>
<p>反向继承是指返回的组件去继承之前的组件(这里都用WrappedComponent代指)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HOC = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.render();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>渲染劫持</li>
</ul>
<p>渲染劫持是指我们可以有意识地控制WrappedComponent的渲染过程，从而控制渲染控制的结果。例如我们可以根据部分参数去决定是否渲染组件:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HOC = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.props.isRender) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.render();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>  甚至我们可以修改修改render的结果:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HOC = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">const</span> elementsTree = <span class="keyword">super</span>.render();</span><br><span class="line">            <span class="keyword">let</span> newProps = &#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span> (elementsTree &amp;&amp; elementsTree.type === <span class="string">'input'</span>) &#123;</span><br><span class="line">                newProps = &#123;</span><br><span class="line">                    value: <span class="string">'may the force be with you'</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, elementsTree.props, newProps);</span><br><span class="line">            <span class="keyword">const</span> newElementsTree = React.cloneElement(elementsTree, props, elementsTree.props.children);</span><br><span class="line">            <span class="keyword">return</span> newElementsTree;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrappedComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            input value = &#123;</span></span><br><span class="line"><span class="xml">                'Hello World'</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            /&gt;</span></span><br><span class="line"><span class="xml">        )</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">export default HOC(WrappedComponent)</span></span><br><span class="line"><span class="xml">//实际显示的效果是input的值为"may the force be with you"</span></span><br></pre></td></tr></table></figure>

<h3 id="render-方法原理"><a href="#render-方法原理" class="headerlink" title="render 方法原理"></a>render 方法原理</h3><p>useEffect 第二个参数的比较规则是 Object.is</p>
<p>如果 props 改变， props 的变量是 改变的值 和 应用吗？React中的值是怎么存储在内存中的？？？？❓❓❓</p>
<p>Hooks规则</p>
<ul>
<li>仅顶层使用 hooks</li>
</ul>
<p>不要在循环语句，条件语句，嵌套函数中使用 hooks。这样可以确保每次组件渲染的时候，hooks以相同的次序被调用。这就使得 react 可以在多次 useState 和 useEffect 的调用中保存状态。</p>
<p>React<br>高阶组件：给一个组件注入参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withTimer</span>(<span class="params">Wrappedcomponent</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取当前时间</span></span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Wrappedcomponent</span> <span class="attr">time</span>=<span class="string">&#123;time&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<p>函数作为子组件，利用好 &lt;&gt;&lt;/&gt; 这种形式，组件如何render她的内容，有很大一部分可以由使用它的人决定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &#123;<span class="keyword">this</span>.props.children(<span class="string">'not'</span>)&#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;MyComponent&gt;</span><br><span class="line">&#123;(name)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/MyComponent&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="生命周期-http-projects-wojtekmaj-pl-react-lifecycle-methods-diagram"><a href="#生命周期-http-projects-wojtekmaj-pl-react-lifecycle-methods-diagram" class="headerlink" title="生命周期[http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/]"></a>生命周期[<a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/]" target="_blank" rel="noopener">http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/]</a></h3><p>三个阶段</p>
<ul>
<li>render<br>主要用于计算当前的状态</li>
<li>pre-commit<br>还没有更新dom，当时可以读取dom的内容</li>
<li>commit<br>把实际的状态都更新到dom上</li>
</ul>
<h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><ul>
<li>用于初始化内部状态，很少使用</li>
<li>唯一可以直接修改state的地方</li>
</ul>
<h4 id="getDerivedStateFromProps"><a href="#getDerivedStateFromProps" class="headerlink" title="getDerivedStateFromProps"></a>getDerivedStateFromProps</h4><p>用外部的属性去初始化内部的状态</p>
<p>Redux 中间件</p>
<ol>
<li>截获action</li>
<li>发出action</li>
</ol>
<p>immutable data 不可变数据</p>
<p>为何需要不可变数据</p>
<ol>
<li>性能优化</li>
<li>已与调试和跟踪</li>
<li>易于推测</li>
</ol>
<p>如何操作不可变数据</p>
<ol>
<li>原生写法{…},Object.assign</li>
<li>immutability-helper</li>
<li>immer</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state=&#123;<span class="attr">filter</span>:<span class="string">'completed'</span>,<span class="attr">todos</span>:[<span class="string">'Learn React'</span>]&#125;</span><br><span class="line"><span class="keyword">const</span> newState=&#123;...state,<span class="attr">todos</span>:[...state.todos,<span class="string">'Learn Redux'</span>]&#125;</span><br><span class="line"><span class="keyword">const</span> newState2 = <span class="built_in">Object</span>.assign(&#123;&#125;,state,&#123;<span class="attr">todos</span>:[</span><br><span class="line">        ...state.todos,</span><br><span class="line">        <span class="string">'Learn Redux'</span></span><br><span class="line">    ]&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>react</title>
    <url>/2020/03/21/react/</url>
    <content><![CDATA[const state={filter:'completed',todos:['Learn React']}
const newState={...state,todos:[...state.todos,'Learn Redux']}
const newState2 = Object.assign({},state,{todos:[
        ...state.todos,
        'Learn Redux'
    ]})]]></content>
  </entry>
  <entry>
    <title>Webpack</title>
    <url>/2019/12/29/Webpack/</url>
    <content><![CDATA[<p><a href="https://github.com/ruanyf/webpack-demos" target="_blank" rel="noopener">原文链接</a></p>
<p>webpack-dev-server提供了一个简单的Web服务器和实时热更新的能力</p>
<p>webpack-dev-server –open 告诉 dev-server 在 server 启动后打开浏览器。默认禁用。</p>
<p>webpack-dev-server 开发模式使用，打包的内容在内存中存在，不生成文件。</p>
<p>webpack -p 打包生成静态文件</p>
<a id="more"></a>

<p>webpack –mode production 打包命令</p>
<p>webpack-dev-server 配置</p>
<p>devServer: {<br>        contentBase: ‘./dist’,<br>        port: ‘8080’,<br>        host: ‘localhost’<br>    }</p>
<h3 id="打包-jsx-文件"><a href="#打包-jsx-文件" class="headerlink" title="打包 jsx 文件"></a>打包 jsx 文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="打包-css-文件"><a href="#打包-css-文件" class="headerlink" title="打包 css 文件"></a>打包 css 文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [ <span class="string">'style-loader'</span>, <span class="string">'css-loader'</span> ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="打包图片"><a href="#打包图片" class="headerlink" title="打包图片"></a>打包图片</h3><p>会将大图片生成一个 base64 格式的 文件，小图片则放在 bundle.js 文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js[x]?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">             loader: <span class="string">'css-loader'</span>,</span><br><span class="line">             options: &#123;</span><br><span class="line">               modules: <span class="literal">true</span></span><br><span class="line">             &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>css-loader?modules 的作用 ❓</p>
<h3 id="webpack-插件系统"><a href="#webpack-插件系统" class="headerlink" title="webpack 插件系统"></a>webpack 插件系统</h3><p>uglifyjs-webpack-plugin 压缩 JS</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> UglifyJsPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>html-webpack-plugin 创建 index.html, open-browser-webpack-plugin 在webpack打包完成后，自动打开浏览器</p>
<h3 id="区分开发环境和测试环境代码"><a href="#区分开发环境和测试环境代码" class="headerlink" title="区分开发环境和测试环境代码"></a>区分开发环境和测试环境代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> devFlagPlugin = <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">  __DEV__: <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(process.env.DEBUG || <span class="string">'false'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [devFlagPlugin]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>设置环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;npx cross-env DEBUG&#x3D;true webpack-dev-server --open&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;npx cross-env DEBUG&#x3D;false webpack&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>


<h3 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./a'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> content = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">  <span class="built_in">document</span>.open();</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">'&lt;h1&gt;'</span> + content + <span class="string">'&lt;/h1&gt;'</span>);</span><br><span class="line">  <span class="built_in">document</span>.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>require.ensure 告诉 Webpack ./a.js 应该从 bundle.js 中分离出来，生成一个单独的 bundle.js。 于是就生成了一个 1.bundle.js.<br>但是使用的时候并不需要单独引用 1.bundle.js， 他只是 webpack 帮忙做的操作</p>
<h3 id="使用-bundle-loader-实现代码分割"><a href="#使用-bundle-loader-实现代码分割" class="headerlink" title="使用 bundle-loader 实现代码分割"></a>使用 bundle-loader 实现代码分割</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> load = <span class="built_in">require</span>(<span class="string">'bundle-loader!./a.js'</span>);</span><br><span class="line"></span><br><span class="line">load(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.open();</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">'&lt;h1&gt;'</span> + file + <span class="string">'&lt;/h1&gt;'</span>);</span><br><span class="line">  <span class="built_in">document</span>.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="提取公共包"><a href="#提取公共包" class="headerlink" title="提取公共包"></a>提取公共包</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">"commons"</span>,</span><br><span class="line"></span><br><span class="line">      filename: <span class="string">"commons.js"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<p>把 jQuery 打包到 vendor 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./main.js'</span>,</span><br><span class="line">    vendor: [<span class="string">'jquery'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'vendor'</span>,</span><br><span class="line">      filename: <span class="string">'vendor.js'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果想让一个变量全局可用，而不用到处 import<br>方法一</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: <span class="string">'jquery'</span>,</span><br><span class="line">      jQuery: <span class="string">'jquery'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>方法二<br>外层有 data.js 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// data.js</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="string">'Hello World'</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.jsx</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="built_in">require</span>(<span class="string">'data'</span>);</span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"><span class="keyword">var</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'react-dom'</span>);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;h1&gt;&#123;data&#125;&lt;<span class="regexp">/h1&gt;,</span></span><br><span class="line"><span class="regexp">  document.body</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./main.jsx'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js[x]?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  externals: &#123;</span><br><span class="line">    <span class="comment">// require('data') is external and available</span></span><br><span class="line">    <span class="comment">//  on the global var data</span></span><br><span class="line">    <span class="string">'data'</span>: <span class="string">'data'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h3 id="publicPath-上线时配置的是cdn的地址"><a href="#publicPath-上线时配置的是cdn的地址" class="headerlink" title="publicPath 上线时配置的是cdn的地址"></a>publicPath 上线时配置的是cdn的地址</h3><p>为什么需要打包</p>
<ul>
<li>编译ES6语法特性，编译jsx</li>
<li>整合资源，例如图片，Less/Sass</li>
<li>优化代码体积</li>
</ul>
]]></content>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算</title>
    <url>/2020/02/22/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h3 id="不用额外变量交换两个整数的值"><a href="#不用额外变量交换两个整数的值" class="headerlink" title="不用额外变量交换两个整数的值"></a>不用额外变量交换两个整数的值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = a ^ b</span><br><span class="line">b = a ^ b</span><br><span class="line">a = a ^ b</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="不用比较找到两数中较大的数（32位整数）"><a href="#不用比较找到两数中较大的数（32位整数）" class="headerlink" title="不用比较找到两数中较大的数（32位整数）"></a>不用比较找到两数中较大的数（32位整数）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flip</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n ^ <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sign</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> flip((number &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBigger</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> c = a - b</span><br><span class="line">  <span class="keyword">const</span> signC = sign(c)</span><br><span class="line">  <span class="keyword">const</span> flipC = flip(signC)</span><br><span class="line">  <span class="keyword">return</span> a * signC + b * flipC</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不用比较找到两数中较大的数"><a href="#不用比较找到两数中较大的数" class="headerlink" title="不用比较找到两数中较大的数"></a>不用比较找到两数中较大的数</h3><p>👇如果a的符号和b的符号不同，(difSignAB=1,sameSignAB=0)</p>
<ul>
<li>如果a为正，b为负(signA=1,signB=0)，返回a</li>
<li>如果a为负，b为正(signA=0,signB=1)，返回b<br>👇如果a的符号和b的符号相同，(difSignAB=0,sameSignAB=1)</li>
<li>如果a-b为正，signC=1，返回a</li>
<li>如果a-b为负，signC=0，返回b<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flip</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n ^ <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sign</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> flip((number &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBigger</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> c = a - b</span><br><span class="line">  <span class="keyword">const</span> signA = sign(a)</span><br><span class="line">  <span class="keyword">const</span> signB = sign(b)</span><br><span class="line">  <span class="keyword">const</span> signC = sign(c)</span><br><span class="line">  <span class="keyword">const</span> difSignAB = signA ^ signB</span><br><span class="line">  <span class="keyword">const</span> sameSignAB = flip(difSignAB)</span><br><span class="line">  <span class="keyword">const</span> returnA = difSignAB * signA + sameSignAB * signC</span><br><span class="line">  <span class="keyword">const</span> returnB = flip(returnA)</span><br><span class="line">  <span class="keyword">return</span> a * returnA + b * returnB</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="位运算符实现加减乘除"><a href="#位运算符实现加减乘除" class="headerlink" title="位运算符实现加减乘除"></a>位运算符实现加减乘除</h3><h4 id="加"><a href="#加" class="headerlink" title="加"></a>加</h4><ul>
<li>在完全不考虑进位的情况下，a^b就是正确结果</li>
<li>在只算进位的情况下，进位(a&amp;b)&lt;&lt;1</li>
<li>把完全不考虑进位的相加值与只考虑进位的产生值再相加，就是最终结果<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = a</span><br><span class="line">  <span class="keyword">while</span> (b !== <span class="number">0</span>) &#123;</span><br><span class="line">    sum = a ^ b</span><br><span class="line">    b = (a &amp; b) &lt;&lt; <span class="number">1</span></span><br><span class="line">    a = sum</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="减"><a href="#减" class="headerlink" title="减"></a>减</h4><p>实现a-b只要实现a+(-b)即可，得到一个数的相反数，就是这个数的二进制数表达取反加一的结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">negNum</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> add(~n, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minus</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> add(a, negNum(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="乘"><a href="#乘" class="headerlink" title="乘"></a>乘</h4><p>a * b = a * 2^0 * b0 + a * 2^1 * b1 + …… + a * 2^i * bi + a * 2^31 * b31 </p>
<ul>
<li>b最右侧为1时，res = res + a，同时b右移1位，a左移一位</li>
<li>b最右侧为0时，res不变，同时b右移1位，a左移一位<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multi</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (b !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((b &amp; <span class="number">1</span>) !== <span class="number">0</span>) &#123;</span><br><span class="line">      res = add(res, a)</span><br><span class="line">    &#125;</span><br><span class="line">    a &lt;&lt;= <span class="number">1</span></span><br><span class="line">    b &gt;&gt;= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="除"><a href="#除" class="headerlink" title="除"></a>除</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNeg</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n &lt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">div</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = isNeg(a) ? negNum(a) : a</span><br><span class="line">  <span class="keyword">let</span> y = isNeg(b) ? negNum(b) : b</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">31</span>; i &gt; <span class="number">-1</span>; i = minus(i, <span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((x &gt;&gt; i) &gt;= y) &#123;</span><br><span class="line">      res |= (<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">      x = minus(x, y &lt;&lt; i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isNeg(a) ^ isNeg(b) ? negNum(res) : res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNeg</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n &lt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">div</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = isNeg(a) ? negNum(a) : a</span><br><span class="line">  <span class="keyword">let</span> y = isNeg(b) ? negNum(b) : b</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">31</span>; i &gt; <span class="number">-1</span>; i = minus(i, <span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((x &gt;&gt; i) &gt;= y) &#123;</span><br><span class="line">      res |= (<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">      x = minus(x, y &lt;&lt; i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isNeg(a) ^ isNeg(b) ? negNum(res) : res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (b === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'divisor is 0'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === <span class="built_in">Number</span>.MAX_SAFE_INTEGER &amp;&amp; b === <span class="built_in">Number</span>.MIN_SAFE_INTEGER) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b === <span class="built_in">Number</span>.MIN_SAFE_INTEGER) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a === <span class="built_in">Number</span>.MIN_SAFE_INTEGER) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = div(add(a, <span class="number">1</span>), b)</span><br><span class="line">    <span class="keyword">return</span> add(res, div(minus(a, multi(res, b)), b))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> div(a, b)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二进制表达式有多少1"><a href="#二进制表达式有多少1" class="headerlink" title="二进制表达式有多少1"></a>二进制表达式有多少1</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count1</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (n !== <span class="number">0</span>) &#123;</span><br><span class="line">    res += n &amp; <span class="number">1</span></span><br><span class="line">    n &gt;&gt;= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>n &amp;= (n - 1) 操作，是抹掉最右边的1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count2</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (n !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 抹掉最右边的1</span></span><br><span class="line">    n &amp;= (n - <span class="number">1</span>)</span><br><span class="line">    res++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res                              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count3</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (n !== <span class="number">0</span>) &#123;</span><br><span class="line">    n -= n &amp; (~n + <span class="number">1</span>)</span><br><span class="line">    res++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在其他数都出现偶数次的数组中找到出现奇数次的数"><a href="#在其他数都出现偶数次的数组中找到出现奇数次的数" class="headerlink" title="在其他数都出现偶数次的数组中找到出现奇数次的数"></a>在其他数都出现偶数次的数组中找到出现奇数次的数</h3><p>遍历数组，对每个数异或，最后的值就是出现奇数次的那个数。异或满足交换律和结合律。像个相同的数异或之后为0</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oddTimesNum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    res ^= arr[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="有两个数出现了奇数次，打印这两个数"><a href="#有两个数出现了奇数次，打印这两个数" class="headerlink" title="有两个数出现了奇数次，打印这两个数"></a>有两个数出现了奇数次，打印这两个数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printOddTimesNum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> e0 = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> e0hasOne = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    e0 ^= arr[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> rightOne = e0 &amp; (~e0 + <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((arr[i] &amp; rightOne) !== <span class="number">0</span>) &#123;</span><br><span class="line">      e0hasOne ^= arr[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> annother = e0 ^ e0hasOne</span><br><span class="line">  <span class="keyword">return</span> &#123; annother, e0hasOne &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他数字都出现k次的数组中找到只出现一次的数"><a href="#其他数字都出现k次的数组中找到只出现一次的数" class="headerlink" title="其他数字都出现k次的数组中找到只出现一次的数"></a>其他数字都出现k次的数组中找到只出现一次的数</h3><p>k进制的两个数，在i位上无进位相加的结果就是(c(i)+d(i))%k,那么如果k个相同的k进制数进行无进位相加，相加的结果一定是每一位上都是0的k进制数</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>闭包</title>
    <url>/2020/02/27/%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h3 id="你不知道的JS"><a href="#你不知道的JS" class="headerlink" title="你不知道的JS"></a>你不知道的JS</h3><blockquote>
<p>闭包晦涩难懂</p>
</blockquote>
<p>函数记住并访问其所在的词法作用域，叫做闭包现象，而此时函数对作用域的引用叫做闭包。</p>
<a id="more"></a>

<p>bar 这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的<br>词法作用域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> baz = foo()</span><br><span class="line">baz()   <span class="comment">//调用处</span></span><br></pre></td></tr></table></figure>

<p>无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到 闭包。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">    bar(baz)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    fn()  <span class="comment">//调用处</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用 域的引用，无论在何处执行这个函数都会使用闭包。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">    fn = baz</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line">bar()</span><br></pre></td></tr></table></figure>


<p>在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步(或者同步)任务中，只要使 用了回调函数，实际上就是在使用闭包!<br>❓❓❓ 这个该怎么理解呢</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(message)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">wait(<span class="string">"hello world"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(timer)</span><br></pre></td></tr></table></figure>

<p>IIFE 会通过声明并立即执行一个函数来创建作用域</p>
<p>思考以下几种情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;,i*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5 5 5 5</span></span><br></pre></td></tr></table></figure>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;,i*<span class="number">1000</span>)</span><br><span class="line">    &#125;)(i)</span><br><span class="line"><span class="comment">// 1 2 3 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">     <span class="comment">// let j = i 用来在每个迭代中储存 i 的值</span></span><br><span class="line">     (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">let</span> j = i</span><br><span class="line">         setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(j)</span><br><span class="line">         &#125;,j*<span class="number">1000</span>)</span><br><span class="line">     &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 4</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> j = i</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(j)</span><br><span class="line">    &#125;,j*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 4</span></span><br></pre></td></tr></table></figure>

<h3 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h3><p>foo 可以被调用多次，每次都会创建一个新的模块实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> something = <span class="string">"cool"</span></span><br><span class="line">    <span class="keyword">var</span> annother = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dosomething</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(something)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doAnnother</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(annother.join(<span class="string">' ! '</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        dosomething,</span><br><span class="line">        doAnnother</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CoolModule = foo()</span><br><span class="line">CoolModule.dosomething()</span><br><span class="line">CoolModule.doAnnother()</span><br></pre></td></tr></table></figure>

<p>略微改造后是单例模式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = (<span class="function"><span class="keyword">function</span> <span class="title">CoolModule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> something = <span class="string">"cool"</span></span><br><span class="line">    <span class="keyword">var</span> annother = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dosomething</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(something)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doAnnother</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(annother.join(<span class="string">' ! '</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        dosomething,</span><br><span class="line">        doAnnother</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">foo.dosomething()</span><br><span class="line">foo.doAnnother()</span><br></pre></td></tr></table></figure>


<h3 id="JavaScript-设计模式与开发实践"><a href="#JavaScript-设计模式与开发实践" class="headerlink" title="JavaScript 设计模式与开发实践"></a>JavaScript 设计模式与开发实践</h3><p>每次都是弹出 nodes.length， 原因是 onClick 事件是异步触发的，for 循环早已经结束。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nodes = <span class="built_in">document</span>.getElementsByTagName( <span class="string">'div'</span> );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, len = nodes.length; i &lt; len; i++ )&#123;</span><br><span class="line">    nodes[ i ].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert ( i );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>解决方法是，利用闭包，将每次循环的 i 值都封闭起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, len = nodes.length; i &lt; len; i++ )&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        nodes[ i ].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="闭包应用场景"><a href="#闭包应用场景" class="headerlink" title="闭包应用场景"></a>闭包应用场景</h4><ul>
<li>img 上报数据<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> report = <span class="function"><span class="keyword">function</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">    img.src=src</span><br><span class="line">&#125;</span><br><span class="line">report(<span class="string">""</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>但是 report 不是每次都成功发起 HTTP 请求。<br>原因是，img 在 report 是局部变量，当 report 函数调用结束后， img 就会被回收。而此时或许还没来得及发起 HTTP 请求</p>
<p>解决，把 img 用闭包包裹起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> report = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imgs = []</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">        imgs.push(src)</span><br><span class="line">        img.src=src</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">report(<span class="string">""</span>)</span><br></pre></td></tr></table></figure>

<h4 id="闭包与内存管理"><a href="#闭包与内存管理" class="headerlink" title="闭包与内存管理"></a>闭包与内存管理</h4><p>使用闭包的同时容易形成循环应用。<br>在基于引用计数的垃圾回收机制中，如果两个对象之间形成了循环引用，那么这两个对象都没办法被回收。</p>
<p>循环引用实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> element = <span class="built_in">document</span>.querySelector(<span class="string">"#element"</span>)</span><br><span class="line">     element.onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(element.id)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


<h4 id="所有回调函数都是闭包的理解"><a href="#所有回调函数都是闭包的理解" class="headerlink" title="所有回调函数都是闭包的理解"></a>所有回调函数都是闭包的理解</h4><blockquote>
<p>回调函数是一个函数，将会在另一个函数完成执行后立即执行。回调函数是一个作为参数传给另一个 JavaScript 函数的函数。这个回调函数会在传给的函数内部执行</p>
</blockquote>
<p>无论通过何种手段将内部函数传递到其所在的词法作用域外，它都会持有对原始定义作用域的引用。也就是说，无论在什么地方执行这个函数，都会使用闭包。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( a );</span><br><span class="line">    &#125;</span><br><span class="line">    fn = baz; <span class="comment">//将baz 分配给全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line">bar(); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title>Server Side Rendering</title>
    <url>/2019/12/29/Server-Side-Rendering/</url>
    <content><![CDATA[<h3 id="实现一个简单的服务端渲染"><a href="#实现一个简单的服务端渲染" class="headerlink" title="实现一个简单的服务端渲染"></a>实现一个简单的服务端渲染</h3><p>在前后端渲染相同的component，将输出一致的dom结构。完善的component属性及生命周期与客户端的render时机是react同构的关键<br>react的虚拟dom以对象树的形式保存在内存中，并且是可以在任何支持JavaScript的环境中生成的，所以可以在浏览器和node中生成。这为前后端同构提供了先决条件。</p>
<a id="more"></a>

<h4 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h4><ul>
<li><p><a href="https://medium.com/@mahesh_joshi/understanding-server-side-rendering-in-react-in-easy-way-d2984bb7aa51" target="_blank" rel="noopener">实现一个简单的服务端渲染</a></p>
</li>
<li><p><a href="https://www.freecodecamp.org/news/server-side-rendering-your-react-app-in-three-simple-steps-7a82b95db82e/" target="_blank" rel="noopener">三部实现SSR</a></p>
</li>
</ul>
<blockquote>
<p>Server side rendering is the way how you render the page initially in server and how the fully rendered page is send back to client.</p>
</blockquote>
<blockquote>
<p>服务端渲染：在服务端生成的页面，在客户端使用。</p>
</blockquote>
<h3 id="CSR-与-SSR-的区别"><a href="#CSR-与-SSR-的区别" class="headerlink" title="CSR 与 SSR 的区别"></a>CSR 与 SSR 的区别</h3><ul>
<li>客户端渲染：浏览器下载一个很小的HTML，将JavaScript和文件填充进去，页面渲染由JS负责进行</li>
<li>服务端渲染：服务器返回一堆HTML字符串，让浏览器显示</li>
</ul>
<h3 id="SSR-的弊端"><a href="#SSR-的弊端" class="headerlink" title="SSR 的弊端"></a>SSR 的弊端</h3><ol>
<li>如果应用很小，SSR 可以提高性能，但是如果应用很大，SSR 会降低性能</li>
<li>增加了服务端 response 的时间，如果服务端繁忙，则会更严重</li>
<li>增加了response size，页面需要花比较长的时间去加载</li>
<li>增加了应用的复杂性</li>
</ol>
<h3 id="什么时候使用-SSR"><a href="#什么时候使用-SSR" class="headerlink" title="什么时候使用 SSR"></a>什么时候使用 SSR</h3><ol>
<li><p>SEO</p>
<p>爬虫不能理解JavaScript，它们只认识 HTML，不做服务端渲染，爬虫看到的是空白页面</p>
</li>
<li><p>更好的首屏性能，不需要提前先下载一堆 CSS 和 JS 后才看到页面</p>
</li>
</ol>
<h3 id="同构"><a href="#同构" class="headerlink" title="同构"></a>同构</h3><blockquote>
<p>一套代码在服务端运行一遍，在客户端又运行一遍，服务端完成页面构建，客户端完成事件绑定</p>
</blockquote>
<p>同构并没有想象中那么美👻</p>
<ul>
<li>不容忽视的服务器端和浏览器环境差异，window、document、DOM以及 客户端与服务端渲染不一致。不一致可能会造成页面的闪动</li>
<li>内存溢出 指程序在为自身申请内存时，没有足够的内存空间供自己使用，出现out of memory<ul>
<li>注册事件必须放在 <code>componentDidMount</code> 。 在 componentWillMount 里做绑定事件就会发生内存溢出，因为 React 的设计是后端渲染只会运行 componentDidMount 之前的操作，而不会运行 componentWillUnmount 方法（一般解绑事件在这里）。</li>
</ul>
</li>
</ul>
<h3 id="React-服务端渲染原理"><a href="#React-服务端渲染原理" class="headerlink" title="React 服务端渲染原理"></a>React 服务端渲染原理</h3><blockquote>
<p>React 的虚拟 DOM 以对象树的形式存在内存中，并且可以在任何支持JavaScript的环境中生成，所以可以在浏览器和Node中生成。这为前后端同构提供了先决条件。</p>
</blockquote>
<h4 id="虚拟dom-在前后端都是以对象树的形式存在，但是展露原型的方式不一样。"><a href="#虚拟dom-在前后端都是以对象树的形式存在，但是展露原型的方式不一样。" class="headerlink" title="虚拟dom 在前后端都是以对象树的形式存在，但是展露原型的方式不一样。"></a>虚拟dom 在前后端都是以对象树的形式存在，但是展露原型的方式不一样。</h4><ul>
<li><p>虚拟dom – client –&gt; DOM Element</p>
<p>React提供ReactDOMServer.renderToString和ReactDOMServer.renderToStaticMarkup 可将其渲染为HTML字符串。</p>
</li>
<li><p>虚拟dom – server –&gt; HTML String </p>
<p>在浏览器，React通过ReactDOM的render方法将虚拟dom渲染到真实的dom树上，生成网页</p>
</li>
</ul>
<p>renderToString，会为组件增加checksum，react在客户端通过checksum判断是否需要重新render，相同则不重新render，省略创建dom和挂载dom的过程，接着触发componentDidMount等事件来处理服务端上的未尽事宜（事件绑定等），从而加快了交互时间。不同时，组件将客户端上重新挂载render</p>
<h3 id="静态资源处理方案"><a href="#静态资源处理方案" class="headerlink" title="静态资源处理方案"></a>静态资源处理方案</h3><p>静态资源：js、css、img 等非服务器动态运行生成的文件、静态资源被定义为一切可以在客户端或代理端缓存的资源</p>
]]></content>
      <tags>
        <tag>SSR</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深浅拷贝</title>
    <url>/2020/03/08/JavaScript%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><h4 id="手工实现"><a href="#手工实现" class="headerlink" title="手工实现"></a>手工实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> copy = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        copy[i] = obj[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> copy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><p>for…in</p>
<ul>
<li>Enumerable</li>
<li>遍历对象属性</li>
<li>key</li>
</ul>
</li>
<li><p>for…of</p>
<ul>
<li>[Symbol.iterator]</li>
<li>遍历数组</li>
<li>value</li>
</ul>
</li>
</ul>
<h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h4><p>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象</p>
<h4 id="concat-slice"><a href="#concat-slice" class="headerlink" title="concat/slice"></a>concat/slice</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], &#123;<span class="attr">name</span>:<span class="string">"array"</span>&#125;];</span><br><span class="line"><span class="keyword">const</span> arraySlice= array.slice(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> arrayConcat = array.concat()</span><br><span class="line">arraySlice[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;array&#125;,&#123;arraySlice&#125;)</span><br><span class="line">arrayConcat[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;array&#125;,&#123;arrayConcat&#125;)</span><br></pre></td></tr></table></figure>
<p>原数组都发生了改变</p>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><h4 id="JSON-parse-JSON-stringify"><a href="#JSON-parse-JSON-stringify" class="headerlink" title="JSON.parse(JSON.stringify())"></a>JSON.parse(JSON.stringify())</h4>]]></content>
      <categories>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title>项目踩坑</title>
    <url>/2020/02/17/%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<p>最近发现，项目重构的过程中，很容易出bug</p>
<ul>
<li><p>项目重构相较于项目 init ，不会那么谨慎。造成漏洞</p>
</li>
<li><p>测试资源也没有合理分配，导致项目重构了，却没有经过测试。</p>
<a id="more"></a>
<p>主要逻辑比较重的部分在于：优惠券 和 倒计时</p>
</li>
<li><p>DOM ref 什么时候会变化，感觉用useEffect监听 ref 的变化，并作出相应监听动作没有必要，因为dom ref 很少需要改变的。</p>
</li>
</ul>
<h3 id="弹出蒙层后，页面禁止滚动"><a href="#弹出蒙层后，页面禁止滚动" class="headerlink" title="弹出蒙层后，页面禁止滚动"></a>弹出蒙层后，页面禁止滚动</h3><p>👇将页面固定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyEl = <span class="built_in">document</span>.querySelector(<span class="string">"body"</span>);</span><br><span class="line">bodyEl.style.position = <span class="string">"fixed"</span>;</span><br></pre></td></tr></table></figure>

<p>🤔但是有一个问题啊，以上方法将 body 位置固定，页面会自动划到最顶上。<br>👉所以先记录下当前页面的滚动距离，在 body 样式设置为 fixed 之后，修改 body 的 top 值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyEl = <span class="built_in">document</span>.querySelector(<span class="string">"body"</span>);</span><br><span class="line">bodyEl.style.position = <span class="string">"fixe</span></span><br><span class="line"><span class="string">bodyEl.style.width = "</span><span class="number">100</span>%<span class="string">";</span></span><br><span class="line"><span class="string">bodyEl.style.top = -top + "</span>px<span class="string">";</span></span><br></pre></td></tr></table></figure>

<p>该方法，能使蒙层里面的内容禁止滚动，而不影响蒙层外面的可滚动区域</p>
<p>当需要关闭蒙层时，把一切复原，同时，还有滚动到原先的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyEl = <span class="built_in">document</span>.querySelector(<span class="string">"body"</span>);</span><br><span class="line"><span class="keyword">const</span> top = -bodyEl.style.top.split(<span class="string">"px"</span>)[<span class="number">0</span>];</span><br><span class="line">bodyEl.style.position = <span class="string">""</span>;</span><br><span class="line">bodyEl.style.top = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">window</span>.scrollTo(<span class="number">0</span>, top);</span><br></pre></td></tr></table></figure>

<p>componentWillCreate 里面请求数据，请求超时。经过了怎样的过程。为什么页面过一段时间后是白屏。</p>
<h3 id="Provisional-headers-are-shown"><a href="#Provisional-headers-are-shown" class="headerlink" title="Provisional headers are shown"></a>Provisional headers are shown</h3><h3 id="Promise-模拟异步请求"><a href="#Promise-模拟异步请求" class="headerlink" title="Promise 模拟异步请求"></a>Promise 模拟异步请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve([])</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过使用 promise 模拟接口异常，超时，可以发现，如果将 getData1 操作放在服务端进行（componentWillCreate），那么，页面 loading 的过程需要 10s，在这 10s 的过程中，页面始终是 loading状态，页面白屏，要等 10s 等待结束，才会出现首屏。</p>
<p>而如果放在 componentDidFirstMount 中执行，首屏内容快速加载。但是要等到 10s 之后，才会请求其他接口。</p>
<p>🤔遇到一个问题，如果将请求 getData1 的请求放在 componentDidFirstMount 中，立即执行，组件中Visibility Change 事件会等 getData1 函数完全执行完，才会执行。<br>但是当，将 getData1 请求放在 componentDidFirstMount 的最后一步。虽然 getData1 也会优先执行，但是在 getData1 结果返回之前，Visibility Change 事件也触发了。</p>
<p>在 componentDidFirstMount 之后， getData1 和 Visibility Change实际上是并列执行的，互不影响。</p>
<h3 id="const-active-setActive-useState-startToLoad-，当-startToLoad-变化的时候，active-是否会变化"><a href="#const-active-setActive-useState-startToLoad-，当-startToLoad-变化的时候，active-是否会变化" class="headerlink" title="const [active, setActive] = useState(startToLoad)，当 startToLoad 变化的时候，active 是否会变化"></a><code>const [active, setActive] = useState(startToLoad)</code>，当 startToLoad 变化的时候，active 是否会变化</h3><p>否，startToLoad 只是给 active 提供了一个初始值，赋值结束后，控制权交给 setActive</p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>当多个模板有可能同时更新一个变量时 (List)，并且更新之前可能还有异步操作，在更新 List 之前，一定要拿到最新的 List 信息，而不能通过传递。因为从异步操作之前拿到的 List 不是最新的。</p>
<h3 id="本地跑没问题，生产有问题"><a href="#本地跑没问题，生产有问题" class="headerlink" title="本地跑没问题，生产有问题"></a>本地跑没问题，生产有问题</h3><ul>
<li>项目中有两个同名文件，.js 和 .jsx 文件，在打包过程中，.tsx 文件会把 .js 源文件给覆盖，导致生产环境跑的是经过 tsx 编译后的 js 文件。</li>
<li>而在本地跑的时候，始终是跑的未编译的版本 .js 文件，所以测试环境不会有问题。</li>
<li>但是客户端渲染的时候，也是跑的 js 文件。</li>
<li>模拟生产环境，要在 publish 目录下运行项目</li>
</ul>
]]></content>
      <categories>
        <category>项目经历</category>
      </categories>
      <tags>
        <tag>项目经历</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题汇总</title>
    <url>/2020/02/29/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h3 id="遍历一个-DOM-树"><a href="#遍历一个-DOM-树" class="headerlink" title="遍历一个 DOM 树"></a>遍历一个 DOM 树</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traversal</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node &amp;&amp; node.nodeType===<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(node.tagName)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> childs = node.childNodes</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;childs.length;i++)&#123;</span><br><span class="line">        traversal(childs[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="new-操作的实现"><a href="#new-操作的实现" class="headerlink" title="new 操作的实现"></a>new 操作的实现</h3><ul>
<li>创建一个空对象，并把 this 指向空对象</li>
<li>继承了函数的原型</li>
<li>属性和方法被加入到 this 引用的对象中</li>
<li>新创建的对象由 this 引用，最后隐式返回 this</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new</span>(<span class="params">Function</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.__proto__ = <span class="built_in">Function</span>.prototype</span><br><span class="line">    <span class="keyword">let</span> res = <span class="built_in">Function</span>.call(obj)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(res) ===<span class="string">"function"</span> || <span class="keyword">typeof</span>(res) ===<span class="string">"object"</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="proto-和-prototype-的区别"><a href="#proto-和-prototype-的区别" class="headerlink" title="__proto__ 和 prototype 的区别"></a><code>__proto__</code> 和 prototype 的区别</h3><ul>
<li>对象有属性<code>__proto__</code>,指向该对象的构造函数的原型对象</li>
</ul>
<h3 id="实现-call-函数"><a href="#实现-call-函数" class="headerlink" title="实现 call 函数"></a>实现 call 函数</h3><p><a href="https://github.com/mqyqingfeng/Blog/issues/11" target="_blank" rel="noopener">参考文章</a></p>
<p>call 使用方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"obj name"</span></span><br><span class="line">&#125;</span><br><span class="line">foo.call2(obj)</span><br></pre></td></tr></table></figure>
<p>call 作用</p>
<ul>
<li>将 this 指向了 obj</li>
<li>执行了 foo 函数</li>
</ul>
<p>变形</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"obj name"</span>,</span><br><span class="line">    foo:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>将函数变成对象的属性</li>
<li>执行函数</li>
<li>删除函数<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">obj.fn = foo</span><br><span class="line">obj.fn()</span><br><span class="line"><span class="keyword">delete</span> obj.fn</span><br></pre></td></tr></table></figure>
实现，成功✅<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    context.fn = <span class="keyword">this</span></span><br><span class="line">    context.fn()</span><br><span class="line">    <span class="keyword">delete</span> context.fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"obj name"</span></span><br><span class="line">&#125;</span><br><span class="line">foo.call2(obj)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>如果传入参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">hello,age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    <span class="built_in">console</span>.log(hello,age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"obj name"</span></span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj,<span class="string">"hello"</span>,<span class="number">14</span>)</span><br></pre></td></tr></table></figure>


<p>实现方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    context.fn = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> args = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">1</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">        args.push(<span class="string">"arguments["</span> + i + <span class="string">"]"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行后 args为 ["arguments[1]", "arguments[2]"]</span></span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args + <span class="string">')'</span>)</span><br><span class="line">    <span class="keyword">delete</span> context.fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">hello,age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    <span class="built_in">console</span>.log(hello,age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"obj name"</span></span><br><span class="line">&#125;</span><br><span class="line">foo.call2(obj,<span class="string">"hello"</span>,<span class="number">14</span>)</span><br></pre></td></tr></table></figure>

<p>最后，需要注意</p>
<ul>
<li><p>this 参数可以传 null，当为 null 的时候，视为指向 window 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line">foo.call2(<span class="literal">null</span>) <span class="comment">// hello</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数可以有返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        value:<span class="keyword">this</span>.value,</span><br><span class="line">        name:name,</span><br><span class="line">        age:age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = &#123;</span><br><span class="line">    value:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">foo.call(bar)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">    context.fn = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> args = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">1</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">        args.push(<span class="string">"arguments["</span> + i + <span class="string">"]"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行后 args为 ["arguments[1]", "arguments[2]", "arguments[3]"]</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args + <span class="string">')'</span>)</span><br><span class="line">    <span class="keyword">delete</span> context.fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        value:<span class="keyword">this</span>.value,</span><br><span class="line">        name:name,</span><br><span class="line">        age:age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = &#123;</span><br><span class="line">    value:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo.call2(bar))</span><br></pre></td></tr></table></figure>


<h3 id="实现-apply-函数"><a href="#实现-apply-函数" class="headerlink" title="实现 apply 函数"></a>实现 apply 函数</h3><p>与 call 实现方法类似。只不过 argument 参数可以直接通过数组拿，而不用自己生成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply = <span class="function"><span class="keyword">function</span> (<span class="params">context, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="built_in">Object</span>(context) || <span class="built_in">window</span>;</span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">        result = context.fn();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> args = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">            args.push(<span class="string">'arr['</span> + i + <span class="string">']'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result = <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args + <span class="string">')'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> context.fn</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="实现-bind-函数"><a href="#实现-bind-函数" class="headerlink" title="实现 bind 函数"></a>实现 bind 函数</h3><p><a href="https://github.com/mqyqingfeng/Blog/issues/12" target="_blank" rel="noopener">参考文章</a></p>
<ul>
<li>返回函数</li>
<li>可以传入参数<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo=&#123;</span><br><span class="line">    value:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bindFoo = bar.bind(foo)</span><br><span class="line">bindFoo()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind2</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> self.apply(context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时，bind 可以实现柯里化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindFoo = bar.bind(foo, <span class="string">'daisy'</span>);</span><br><span class="line">bindFoo(<span class="string">'18'</span>);</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind2</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 获取bind2函数从第二个参数到最后一个参数</span></span><br><span class="line">    <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class="line">        <span class="keyword">const</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">        <span class="keyword">return</span> self.apply(context,args.concat(bindArgs))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">"function"</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Function.prototype.bind - what is trying to be bound is not callable"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fNOP = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> self.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> fNOP ? <span class="keyword">this</span> : context, args.concat(bindArgs));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fNOP.prototype = <span class="keyword">this</span>.prototype;</span><br><span class="line">    fBound.prototype = <span class="keyword">new</span> fNOP();</span><br><span class="line">    <span class="keyword">return</span> fBound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HTTPS-原理"><a href="#HTTPS-原理" class="headerlink" title="HTTPS 原理"></a>HTTPS 原理</h3><h3 id="劫持-HTTP-请求"><a href="#劫持-HTTP-请求" class="headerlink" title="劫持 HTTP 请求"></a>劫持 HTTP 请求</h3><h3 id="实现-Promise"><a href="#实现-Promise" class="headerlink" title="实现 Promise"></a>实现 Promise</h3><p><a href="https://github.com/xieranmaya/blog/issues/3" target="_blank" rel="noopener">参考文章</a></p>
<h3 id="实现项目按需加载，例如引入的-antd-只加载-button-组件"><a href="#实现项目按需加载，例如引入的-antd-只加载-button-组件" class="headerlink" title="实现项目按需加载，例如引入的 antd 只加载 button 组件"></a>实现项目按需加载，例如引入的 antd 只加载 button 组件</h3>]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>项目总结</title>
    <url>/2020/01/10/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>当业务发展到达某一程度，有限的开发人力和冗长的开发流程无法满足蓬勃发展的业务需求。如果完全依靠传统的开发模式，唯有通过加班来解决。</p>
<a id="more"></a>

<h3 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h3><p>目标用户是各个事业部的运营，搭建页面的操作应该是”傻瓜式“的，即不用懂任何技术相关的知识就能完成一个页面的搭建。他是一个页面搭建平台，同时也是一个活动发布平台，可以便捷地点击发布按钮更新页面</p>
<h3 id="活动页搭建"><a href="#活动页搭建" class="headerlink" title="活动页搭建"></a>活动页搭建</h3><p>所见即所得的操作模式，提供各种组件，通过组合配置出落地页。</p>
<ul>
<li>可视化配置界面： 通过配置写入数据库</li>
<li>接口系统：读取写入数据库的内容信息</li>
<li>前端：根据接口下发的内容展示页面</li>
</ul>
<h3 id="项目特点"><a href="#项目特点" class="headerlink" title="项目特点"></a>项目特点</h3><h3 id="项目难点"><a href="#项目难点" class="headerlink" title="项目难点"></a>项目难点</h3><ul>
<li>高度占位，防止楼层坍塌以及忽然出现的现象</li>
</ul>
<blockquote>
<p>采用dangerouslySetInnerHTML, 页面挂载的时候计算屏幕宽度，计算图片应该展示的高度。保证精确占位</p>
</blockquote>
<ul>
<li>采用服务端渲染，减少首屏渲染时间</li>
<li>锚点导航，动态计算页面需要滚动的高度</li>
</ul>
<blockquote>
<p>对于某些楼层来说（比如产品列表），由于不确定返回的产品数量，占位高度不准确。监听一个全局状态，当全局状态改变后，重新计算需要滚动的距离，并进行滚动。需要在componentDidMount之后执行。或者也可以用setTimeout，在render之后执行。</p>
</blockquote>
<ul>
<li>倒计时。使用requestAnimationFrame。</li>
</ul>
<blockquote>
<p>通过页面挂载的时间timestamp精准倒计时。防止setTimeout时间不准确的问题。同时，为了防止页面息屏之后，线程放缓的问题，通过监听visibilityChange事件，当页面重新可视时，请求服务接口，更新倒计时时间。</p>
</blockquote>
<h3 id="项目中有趣的bug"><a href="#项目中有趣的bug" class="headerlink" title="项目中有趣的bug"></a>项目中有趣的bug</h3><ul>
<li>底部导航IOS双击，页面下滑</li>
<li>safari浏览器把加个默认成电话号码，使得文字颜色改变为黑色</li>
</ul>
]]></content>
      <categories>
        <category>项目经历</category>
      </categories>
  </entry>
  <entry>
    <title>react 如何区分 class 和 function</title>
    <url>/2020/02/29/react-%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86-class-%E5%92%8C-function/</url>
    <content><![CDATA[<p>常规 React 组件的定义方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>


<p>如果 Greeting 是一个函数，React 需要调用它</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = Greeting(props)</span><br></pre></td></tr></table></figure>

<p>但如果 Greeting 是一个类，React 需要先用 new 操作符将其实例化，然后 调用刚才生成实例的 render 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Greeting(props)</span><br><span class="line"><span class="keyword">const</span> result = instance.render()</span><br></pre></td></tr></table></figure>


<p>只要在函数调用前加上 new 操作符，你就可以把任何函数当做一个类的构造函数来用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个 &#123;&#125; 对象并把 Person 中的 this 指向那个对象，以便我可以通过类似 this.name 的形式去设置一些东西，然后把这个对象返回给我</span></span><br><span class="line"><span class="keyword">const</span> fred = <span class="keyword">new</span> Person(<span class="string">"fred"</span>) <span class="comment">// Person &#123; name: 'fred' &#125;</span></span><br><span class="line"><span class="keyword">const</span> geroge = Person(<span class="string">"geroge"</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>new 操作符同时也把我们放在 Person.prototype 上的东西放到了 fred 对象上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fred = <span class="keyword">new</span> Person(<span class="string">"fred"</span>) <span class="comment">// Person &#123; name: 'fred' &#125;</span></span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello, I' m "</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">fred.sayHi()</span><br></pre></td></tr></table></figure>


<p>通过类来实现相同的功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    sayHi()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"hello, I'm "</span> + <span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fred = <span class="keyword">new</span> Person(<span class="string">"fred"</span>)</span><br><span class="line">fred.sayHi()</span><br></pre></td></tr></table></figure>
<ul>
<li>对于类，如果忘记加 new ，会导致程序报错</li>
<li>对于函数，如果忘记加 new ，会导致 this 指向全局或者 undefined</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>new Person()</th>
<th>Person()</th>
</tr>
</thead>
<tbody><tr>
<td>class</td>
<td>✅this 是一个 Person 实例</td>
<td>❌TypeError</td>
</tr>
<tr>
<td>function</td>
<td>✅this 是一个 Person 实例</td>
<td>⚠️this 是 window 或 undefined</td>
</tr>
</tbody></table>
<p>如果 React 每次调用前都加 new 会怎么样呢？</p>
<p>对于箭头函数，会抛出一个错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Greeting = <span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">new</span> Greeting(); <span class="comment">// 🔴 Greeting 不是一个构造函数</span></span><br></pre></td></tr></table></figure>


<ul>
<li><p>箭头函数的一个附带作用是它没有自己的 this 值 —— this 解析自离得最近的常规函数</p>
</li>
<li><p>箭头函数没有 this，意味着他作为构造函数是无用的。</p>
</li>
<li><p>箭头函数没有 prototype</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;).prototype</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;).prototype</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>另一个我们不能总是使用 new 的原因是它会妨碍 React 支持返回字符串或其它原始类型的组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Greeting())  <span class="comment">// Hello</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Greeting()) <span class="comment">// Greeting &#123;&#125;</span></span><br></pre></td></tr></table></figure>


<p>如果一个函数的返回值不是一个对象，它会被 new 完全忽略。如果你返回了一个字符串或数字，就好像完全没有 return 一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Answer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Answer(); <span class="comment">// ✅ 42</span></span><br><span class="line"><span class="keyword">new</span> Answer(); <span class="comment">// 🔴Answer &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<p>检查 Greeting 是否是一个 React 组件类的最符合语言习惯的方式是测试 Greeting.prototype instanceof React.Component</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(B.prototype <span class="keyword">instanceof</span> A); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>一个函数的 prototype 并不指向他的原型，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype <span class="comment">// Person &#123;&#125; 🔴 不是 Person 的原型</span></span><br><span class="line">Person.__proto__  <span class="comment">// f()&#123;[native code]&#125; ✅ Person 的原型</span></span><br></pre></td></tr></table></figure>

<p>因此「原型链」更像是 <strong>proto</strong>.<strong>proto</strong>.<strong>proto</strong> 而不是 prototype.prototype.prototype</p>
<p>那么函数和类的 prototype 属性又是什么？是用 new 调用那个类或函数生成的所有对象的 <strong>proto</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Hi, I am '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fred = <span class="keyword">new</span> Person(<span class="string">'Fred'</span>); <span class="comment">// 设置 `fred.__proto__` 为 `Person.prototype`</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Greeting();</span><br><span class="line"><span class="built_in">console</span>.log(c.__proto__); <span class="comment">// Greeting.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(c.__proto__.__proto__); <span class="comment">// React.Component.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(c.__proto__.__proto__.__proto__); <span class="comment">// Object.prototype</span></span><br><span class="line"></span><br><span class="line">c.render();      <span class="comment">// 在 c.__proto__ (Greeting.prototype) 上找到</span></span><br><span class="line">c.setState();    <span class="comment">// 在 c.__proto__.__proto__ (React.Component.prototype) 上找到</span></span><br><span class="line">c.toString();    <span class="comment">// 在 c.__proto__.__proto__.__proto__ (Object.prototype) 上找到</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>倒计时</title>
    <url>/2019/12/28/%E5%80%92%E8%AE%A1%E6%97%B6/</url>
    <content><![CDATA[<h2 id="最近用两种写发写了倒计时的功能"><a href="#最近用两种写发写了倒计时的功能" class="headerlink" title="最近用两种写发写了倒计时的功能"></a>最近用两种写发写了倒计时的功能</h2><a id="more"></a>


<h3 id="第一种，通过requestAnimationFrame实现"><a href="#第一种，通过requestAnimationFrame实现" class="headerlink" title="第一种，通过requestAnimationFrame实现"></a>第一种，通过requestAnimationFrame实现</h3><p>我们用 Hooks 来实现倒计时的功能。<br>找到一篇相同的文章，<a href="https://css-tricks.com/using-requestanimationframe-with-react-hooks/" target="_blank" rel="noopener">点击</a></p>
<p>在函数式组件中，有三种方式存储变量</p>
<ul>
<li>通过 let 或者 const 定义一个变量，每当组件重新渲染的时候，这些变量都会重新被初始化</li>
<li>通过 useState ,在多次重新渲染之后，它的值保持不变。并且，如果通过 setState 改变了它的值，也会引起 重新渲染</li>
<li>useRef</li>
</ul>
<p>useRef 最开始使用，是指向 DOM 的，但他的用处并不仅仅如此。他是一个可变的对象，并且在多次渲染后还能保持他的值不变。<br>useRef 定义的变量 和 useState 定义的变量相似，除了读取和更新他的值通过 .current 属性，除了改变他的值不会触发重新渲染</p>
<p>👇当 Component 组件的父组件不停 render 的时候，Component 组件也会跟着render，但是 variable 的值保持不变。<br>其中 setTimeout 函数会执行，但是 variable 的值始终保持 5。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> variable = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    variable = variable + <span class="number">3</span>;</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;variable&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>👇 当使用 useState 时，就算父组件不重新渲染， variable 的值还是会每隔一秒增加 3<br>因为当页面渲染时，setTimeout 会在一秒后 setVariable，而 setVariable 会触发组件渲染，而组件渲染又会导致 setTimeout 一秒后 setVariable</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [variable,setVariable] = useState(<span class="number">5</span>)</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        setVariable(variable+<span class="number">3</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;&#123;variable&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p> 👇 当使用 useRef ，组件会返回 5，并且不会触发重新渲染。但是，如果父组件重新渲染，会引起 variable 每次增加 3。<br> ⚠️ 注意，第一次渲染后，setTimeout 执行 1 秒后加 3，并不会导致 variable 加 3，因为没有触发重渲染。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> variable = useRef(<span class="number">5</span>)</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        variable.current += <span class="number">3</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;&#123;variable.current&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>✅ 在这里，我们需要使用 useRef 的两个地方</p>
<ul>
<li>request animation frame ID</li>
<li>前一次的 timestamp</li>
</ul>
<h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><p>useEffect 方法只执行一次，因此，给 useEffect 的第二个参数传递一个空数组。<br>但是，传递空数组有一个副作用，在动画期间，我们不能获取到正确的 state 信息。<br>第二个参数应该是一系列改变的值，而因为这些值的改变，组件需要作出相应的改变。<br>如例子所示，animation 中的 state 值，始终是初始值，不会因为 setState 而导致 animate 中的值发生变化。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = React.useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> requestRef = React.useRef()</span><br><span class="line">  <span class="keyword">const</span> animate = <span class="function"><span class="params">time</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// The 'state' will always be the initial value here</span></span><br><span class="line">    requestRef.current = requestAnimationFrame(animate);</span><br><span class="line">  &#125;</span><br><span class="line">  React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    requestRef.current = requestAnimationFrame(animate);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> cancelAnimationFrame(requestRef.current);</span><br><span class="line">  &#125;, []); <span class="comment">// Make sure the effect runs only once</span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;state&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那在 useEffect 中怎么获取最新状态呢？<br>🙌通过 <code>setState(prevState =&gt; prevState + delta)</code></p>
<p>实现的功能是：从 1 数到 100， 之后回到 1 重新开始计数<br>看看代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Counter = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> requestRef = React.useRef();</span><br><span class="line">    <span class="keyword">const</span> previousTimeRef = React.useRef();</span><br><span class="line">    <span class="keyword">const</span> animate = <span class="function"><span class="params">time</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (previousTimeRef.current != <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> deltaTime = time - previousTimeRef.current;</span><br><span class="line">            setCount(<span class="function"><span class="params">prevCount</span> =&gt;</span> (prevCount + deltaTime * <span class="number">0.01</span>) % <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        previousTimeRef.current = time;</span><br><span class="line">        requestRef.current = requestAnimationFrame(animate);</span><br><span class="line">    &#125;</span><br><span class="line">    React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        requestRef.current = requestAnimationFrame(animate);</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> cancelAnimationFrame(requestRef.current);</span><br><span class="line">    &#125;, []); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;Math.round(count)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>👏 将主要逻辑迁移到 自定义Hook。</p>
<ul>
<li>简化我们的组件，隐藏变量，不对组件影响</li>
<li>自定义组件可复用</li>
</ul>
<p>作为公约，自定义组件应该以 use 开头，并且 hooks 的规则适用。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useAnimationFrame = <span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> requestRef = React.useRef();</span><br><span class="line">    <span class="keyword">const</span> previousTimeRef = React.useRef();</span><br><span class="line">    <span class="keyword">const</span> animate = <span class="function"><span class="params">time</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (previousTimeRef.current != <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> deltaTime = time - previousTimeRef.current;</span><br><span class="line">            callback(deltaTime)</span><br><span class="line">        &#125;</span><br><span class="line">        previousTimeRef.current = time;</span><br><span class="line">        requestRef.current = requestAnimationFrame(animate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        requestRef.current = requestAnimationFrame(animate);</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> cancelAnimationFrame(requestRef.current);</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">0</span>)</span><br><span class="line">    useAnimationFrame(<span class="function"><span class="params">deltaTime</span> =&gt;</span> &#123;</span><br><span class="line">        setCount(<span class="function"><span class="params">prevCount</span> =&gt;</span> (prevCount + deltaTime * <span class="number">0.01</span>) % <span class="number">100</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;Math.round(count)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>通过 <code>document.addEventListener(&quot;visibilitychange&quot;,this.diffTime,false)</code> 触发可视监听事件。<br>但是，通过浏览器打开的页面，比如微信浏览器， <code>safari</code> 浏览器，其他手机自带浏览器等等，是在当前页面新开的，所以不会触发 <code>visibilitychange</code> 事件，相当于一直在当前页面，从来没有离开视口。而且浏览器会对打开的也没进行缓存，页面回退不会重新从 <code>componentwillcreate</code> 生命周期开始，只会从 <code>componentdidmount</code> 开始，也就是服务端生成的 <code>html</code> 不会重新请求，只会对客户端的操作重新开始执行。<br> 解决方法是<br> 静态 <code>html</code> 中添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"refreshed"</span> <span class="attr">value</span>=<span class="string">"no"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>componentDidMount</code> 中添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">disableHTMLCache = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> e = <span class="built_in">document</span>.getElementById(<span class="string">"refreshed"</span>);</span><br><span class="line">            <span class="keyword">if</span> (e.value == <span class="string">"no"</span>) &#123;</span><br><span class="line">                e.value = <span class="string">"yes"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                e.value = <span class="string">"no"</span>;</span><br><span class="line">                location.reload();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a href="https://developers.google.com/web/updates/2019/02/back-forward-cache" target="_blank" rel="noopener">浏览器特性支持</a></p>
<h4 id="第二种，通过setInterval实现"><a href="#第二种，通过setInterval实现" class="headerlink" title="第二种，通过setInterval实现"></a>第二种，通过setInterval实现</h4><ul>
<li><p><code>JS</code> 主线程执行时有一个栈存储运行时的函数相关变量, 遇到函数时会先入栈执行完后再出栈。当遇到 <code>setTimeout</code>  <code>setInterval</code>  <code>requestAnimationFrame</code> 以及 <code>I/O</code> 操作时，这些函数会立刻返回一个值（如 <code>setInterval</code> 返回一个 <code>intervalID</code> ）保证主线程继续执行，而异步操作则由浏览器的其它线程维护。当异步操作完成时，浏览器会将其回调函数插入主线程的任务队列中，当主线程执行完当前栈的逻辑后，才会依次执行任务队列中的任务。 </p>
</li>
<li><p>但是在每个任务之间，还有一个微任务队列的存在。在当前任务执行完后，将先执行微任务队列中的所有任务，例如 <code>Promise</code>  <code>process.nextTick</code> 等操作。也就是说当 <code>setInterval(fn, 1000)</code> 等待 <code>1</code> 秒钟后， <code>fn</code> 函数会被插入任务队列中，但并不一定会立刻执行，还需要等待当前任务以及微任务队列中的所有任务执行完。长此以往，使用 <code>setInterval</code> 的计时器超时将越来越严重。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'console.log()'</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeOut'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [milliSecs, setmilliSecs] = useState(remainingTime);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> startCountDown = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    milliSecs -= <span class="number">1000</span>;</span><br><span class="line">    setmilliSecs(milliSecs);</span><br><span class="line">    <span class="keyword">if</span> (milliSecs &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        <span class="keyword">await</span> updateInitialData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    timer = setInterval(startCountDown, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>项目经历</category>
      </categories>
      <tags>
        <tag>项目经历</tag>
      </tags>
  </entry>
  <entry>
    <title>从零实现一个滚动广告</title>
    <url>/2020/02/14/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%BB%9A%E5%8A%A8%E5%B9%BF%E5%91%8A/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>项目经历</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2020/02/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="JavaScript模式"><a href="#JavaScript模式" class="headerlink" title="JavaScript模式"></a>JavaScript模式</h2><a id="more"></a>
<h3 id="单例模式（Singleton）"><a href="#单例模式（Singleton）" class="headerlink" title="单例模式（Singleton）"></a>单例模式（Singleton）</h3><p>要求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uni = <span class="keyword">new</span> Universe()</span><br><span class="line"><span class="keyword">var</span> uni2 = <span class="keyword">new</span> Universe()</span><br><span class="line">uni === uni2</span><br></pre></td></tr></table></figure>

<p>实现<br><strong>静态属性中的实例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> Universe.instance === <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Universe.instance</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.start_time = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.bang = <span class="string">"Big"</span></span><br><span class="line">    Universe.instance = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 隐藏返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点：instance属性是公开的。</p>
<p><strong>闭包中的实例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    Universe = <span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">    &#125;</span><br><span class="line">    Universe.prototype = <span class="keyword">this</span></span><br><span class="line">    instance = <span class="keyword">new</span> Universe()</span><br><span class="line">    instance.constructor = Universe</span><br><span class="line">    instance.start_time = <span class="number">0</span></span><br><span class="line">    instance.bang = <span class="string">"Big"</span></span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>构造函数和实例包装在即时函数中</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Universe(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance</span><br><span class="line">    Universe = <span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance</span><br><span class="line">        &#125;</span><br><span class="line">        instance = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">this</span>.start_time = <span class="number">0</span></span><br><span class="line">        <span class="keyword">this</span>.bang = <span class="string">"Big"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CarMaker</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">CarMaker.prototype.drive = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Vroom, I have "</span> + <span class="keyword">this</span>.doors + <span class="string">" doors"</span></span><br><span class="line">&#125;</span><br><span class="line">CarMaker.factory = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> constr = type,</span><br><span class="line">        newcar;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> CarMaker[constr] !== <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> &#123;</span><br><span class="line">            name: <span class="string">"Error"</span>,</span><br><span class="line">            message: constr + <span class="string">" doesn't exist"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> CarMaker[constr].prototype.drive !== <span class="string">"function"</span>) &#123;</span><br><span class="line">        CarMaker[constr].prototype = <span class="keyword">new</span> CarMaker()</span><br><span class="line">    &#125;</span><br><span class="line">    newcar = <span class="keyword">new</span> CarMaker[constr]()</span><br><span class="line">    <span class="keyword">return</span> newcar</span><br><span class="line">&#125;</span><br><span class="line">CarMaker.Compact = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.doors = <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">CarMaker.Convertible = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.doors = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">CarMaker.SUV = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.doors = <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> corolla = CarMaker.factory(<span class="string">'Compact'</span>)</span><br><span class="line"><span class="keyword">var</span> solstice = CarMaker.factory(<span class="string">'Convertible'</span>)</span><br><span class="line"><span class="keyword">var</span> cherokee = CarMaker.factory(<span class="string">'SUV'</span>)</span><br><span class="line">corolla.drive()</span><br><span class="line">solstice.drive()</span><br><span class="line">cherokee.drive()</span><br></pre></td></tr></table></figure>

<h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> agg = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line">        data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">        length = data.length;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> element;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">            element = data[index]</span><br><span class="line">            index = index + <span class="number">2</span></span><br><span class="line">            <span class="keyword">return</span> element</span><br><span class="line">        &#125;,</span><br><span class="line">        hasNext: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> index &lt; length</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure>

<h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><blockquote>
<p>实现装饰者模式的其中一种方法是使得每个装饰则成为一个对象，并且该对象包含了应该被重载的方法。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sale = <span class="keyword">new</span> Sale(<span class="number">100</span>)</span><br><span class="line">sale = sale.decorate(<span class="string">'fedtax'</span>)</span><br><span class="line">sale = sale.decorate(<span class="string">'quebec'</span>)</span><br><span class="line">sale = sale.decorate(<span class="string">'money'</span>)</span><br><span class="line">sale.getPrice()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sale</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.price = price || <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">Sale.prototype.getPrice = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.price</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators = &#123;&#125;</span><br><span class="line"></span><br><span class="line">Sale.decorators.fedtax = &#123;</span><br><span class="line">  getPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price = <span class="keyword">this</span>.uber.getPrice()</span><br><span class="line">    price += price * <span class="number">5</span> / <span class="number">100</span></span><br><span class="line">    <span class="keyword">return</span> price</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators.quebec = &#123;</span><br><span class="line">  getPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price = <span class="keyword">this</span>.uber.getPrice()</span><br><span class="line">    price += price * <span class="number">7.5</span> / <span class="number">100</span></span><br><span class="line">    <span class="keyword">return</span> price</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sale.decorators.money = &#123;</span><br><span class="line">  getPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"$"</span> + <span class="keyword">this</span>.uber.getPrice().toFixed(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators.cdn = &#123;</span><br><span class="line">  getPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"CDN$ "</span> + <span class="keyword">this</span>.uber.getPrice().toFixed(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sale.prototype.decorate = <span class="function"><span class="keyword">function</span> (<span class="params">decorator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;,</span><br><span class="line">    overrides = <span class="keyword">this</span>.constructor.decorators[decorator],</span><br><span class="line">    i, newobj</span><br><span class="line">  F.prototype = <span class="keyword">this</span></span><br><span class="line">  newobj = <span class="keyword">new</span> F()</span><br><span class="line">  newobj.uber = F.prototype</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> overrides) &#123;</span><br><span class="line">    <span class="keyword">if</span> (overrides.hasOwnProperty(i)) &#123;</span><br><span class="line">      newobj[i] = overrides[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newobj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用列表实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sale = <span class="keyword">new</span> Sale(<span class="number">100</span>)</span><br><span class="line">sale.decorate(<span class="string">'fedtax'</span>)</span><br><span class="line">sale.decorate(<span class="string">'quebec'</span>)</span><br><span class="line">sale.decorate(<span class="string">'money'</span>)</span><br><span class="line">sale.getPrice()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sale</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.price = (price &gt; <span class="number">0</span>) || <span class="number">100</span></span><br><span class="line">  <span class="keyword">this</span>.decorators_list = []</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators = &#123;&#125;</span><br><span class="line"></span><br><span class="line">Sale.decorators.fedtax = &#123;</span><br><span class="line">  getPrice: <span class="function"><span class="keyword">function</span> (<span class="params">pirce</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> price + price * <span class="number">5</span> / <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators.quebec = &#123;</span><br><span class="line">  getPrice: <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> price + price * <span class="number">7.5</span> / <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sale.decorators.money = &#123;</span><br><span class="line">  getPrice: <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"$"</span> + price.toFixed(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators.cdn = &#123;</span><br><span class="line">  getPrice: <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"CDN$ "</span> + price.toFixed(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sale.prototype.decorate = <span class="function"><span class="keyword">function</span> (<span class="params">decorator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.decorators_list.push(decorator)</span><br><span class="line">&#125;</span><br><span class="line">Sale.prototype.getPrice = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> price = <span class="keyword">this</span>.price,</span><br><span class="line">    i, max = <span class="keyword">this</span>.decorators_list.length,</span><br><span class="line">    name;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max; i += <span class="number">1</span>) &#123;</span><br><span class="line">    name = <span class="keyword">this</span>.decorators_list[i]</span><br><span class="line">    price = Sale.decorators[name].getPrice(price)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> price</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">varlidator.config = &#123;</span><br><span class="line">  first_name: <span class="string">'isNonEmpty'</span>,</span><br><span class="line">  age: <span class="string">'isNumber'</span>,</span><br><span class="line">  username: <span class="string">'isAlphaNum'</span></span><br><span class="line">&#125;</span><br><span class="line">varlidator.validate(data)</span><br><span class="line"><span class="keyword">if</span> (varlidator.hasErrors()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(varlidator.messages.join(<span class="string">'\n'</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">varlidator.types.inNonEmpty = &#123;</span><br><span class="line">  validate: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value !== <span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line">  instructions: <span class="string">"the value cannot be empty"</span></span><br><span class="line">&#125;</span><br><span class="line">varlidator.types.isNumber = &#123;</span><br><span class="line">  validate: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">isNaN</span>(value)</span><br><span class="line">  &#125;,</span><br><span class="line">  instructions: <span class="string">"the value can only be a valid number"</span></span><br><span class="line">&#125;</span><br><span class="line">varlidator.types.isAlphaNum = &#123;</span><br><span class="line">  validate: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="regexp">/[^a-z0-9]/i</span>.test(value)</span><br><span class="line">  &#125;,</span><br><span class="line">  instructions: <span class="string">"the value can only contain characters and numbers,no special symbols"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> varlidator = &#123;</span><br><span class="line">  types: &#123;&#125;,</span><br><span class="line">  messages: [],</span><br><span class="line">  config: &#123;&#125;,</span><br><span class="line">  validate: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, msg, type, checker, result_ok</span><br><span class="line">    <span class="keyword">this</span>.messages = []</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.hasOwnProperty(i)) &#123;</span><br><span class="line">        type = <span class="keyword">this</span>.config[i]</span><br><span class="line">        checker = <span class="keyword">this</span>.types[type]</span><br><span class="line">        <span class="keyword">if</span> (!type) &#123;</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!checker) &#123;</span><br><span class="line">          <span class="keyword">throw</span> &#123;</span><br><span class="line">            name: <span class="string">"ValidationError"</span>,</span><br><span class="line">            message: <span class="string">"No handler to validate type "</span> + type</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result_ok = checker.validate(data[i])</span><br><span class="line">        <span class="keyword">if</span> (!result_ok) &#123;</span><br><span class="line">          msg = <span class="string">"Invalid value for "</span> + i + <span class="string">"*, "</span> + checker.instructions</span><br><span class="line">          <span class="keyword">this</span>.messages.push(msg)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.hasErrors()</span><br><span class="line">  &#125;,</span><br><span class="line">  hasErrors: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.messages.length !== <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title>关于 this</title>
    <url>/2020/02/25/%E5%85%B3%E4%BA%8E-this/</url>
    <content><![CDATA[<p>JavaScript中所有的函数都是对象？🤔这句话该怎么理解呢？<br>下面例子中的函数 foo 和对象 foo 指代的是同一个对象？ </p>
<a id="more"></a>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(&#123;num&#125;)</span><br><span class="line">    foo.count++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        foo(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo.count)</span><br></pre></td></tr></table></figure>

<p>forEach、map、filter 第二个参数，用来绑定回调函数的 this</p>
<p>如果把 null 或者 undefined 作为 this 的绑定对象传入 call、apply 或者 bind，这些值<br>在调用时会被忽略，实际应用的是默认绑定规则。<br>那什么情况下会传入 null 呢？<br>👇展开数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a: "</span> + a + <span class="string">"b: "</span>+ b)</span><br><span class="line">&#125;</span><br><span class="line">foo.apply(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a: "</span> + a + <span class="string">",b: "</span>+ b)</span><br><span class="line">&#125;</span><br><span class="line">foo(...[<span class="number">1</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>❤️ bind 可以对参数进行柯里化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a: "</span> + a + <span class="string">",b: "</span>+ b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bar = foo.bind(<span class="literal">null</span>,<span class="number">2</span>)</span><br><span class="line">bar(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>bind 简易实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TODO</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn,obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn.apply(obj,<span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Object.create(null) 和 空对象一样吗❓</p>
<p>Object.create(null) 创建了一个空对象，但是它比{}更空，他不会创建 Object.prototype 这个委托</p>
<p>箭头函数根据外层的作用域来决定 this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">    &#125;,<span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.apply(obj)</span><br></pre></td></tr></table></figure>


<p>同箭头函数一样的模式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(self.a)</span><br><span class="line">    &#125;,<span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.apply(obj)</span><br></pre></td></tr></table></figure>

<p>setTimeout中的function是个回调函数，本质上与包裹她的foo函数没有关系。</p>
<p>this 是在运行时，基于函数的执行环境绑定的</p>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/01/17/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="正则匹配语法汇总"><a href="#正则匹配语法汇总" class="headerlink" title="正则匹配语法汇总"></a>正则匹配语法汇总</h2><table>
<thead>
<tr>
<th>正则匹配</th>
<th>语法</th>
</tr>
</thead>
<tbody><tr>
<td>regex.test(str)</td>
<td>返回Boolean值</td>
</tr>
<tr>
<td>str.match(regex)</td>
<td>返回 由匹配内容组成的数组</td>
</tr>
<tr>
<td>regex.exec(str)</td>
<td>返回数组  [匹配内容，index, input, group]</td>
</tr>
<tr>
<td>str.search(regex)</td>
<td>返回第一次匹配regex的位置</td>
</tr>
<tr>
<td>str.split(regex)</td>
<td>返回按regex分割的数组</td>
</tr>
<tr>
<td>str.replace(regex, callback)</td>
<td>对匹配的内容进行callback替换</td>
</tr>
</tbody></table>
<a id="more"></a>
<p> 元字符          | 描述                                   |<br>|——————-|—————————————–|<br>| \w   | 匹配包括下划线的任何单词字符                          |<br>| \s  | 匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。               |</p>
<h3 id="将短划线转换驼峰"><a href="#将短划线转换驼峰" class="headerlink" title="将短划线转换驼峰"></a>将短划线转换驼峰</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="string">"get-element-by-id"</span></span><br><span class="line"><span class="keyword">const</span> s2 = s1.replace(<span class="regexp">/-\w/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.slice(<span class="number">1</span>).toUpperCase()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="字符串是否包含数字"><a href="#字符串是否包含数字" class="headerlink" title="字符串是否包含数字"></a>字符串是否包含数字</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">containNumber</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> regex = <span class="regexp">/\d/</span></span><br><span class="line">    <span class="keyword">return</span> regex.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="电话号码"><a href="#电话号码" class="headerlink" title="电话号码"></a>电话号码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/^1[34578]\d&#123;9&#125;$/</span>;</span><br></pre></td></tr></table></figure>

<h3 id="是否为格式-XXX-XXX-XXXX"><a href="#是否为格式-XXX-XXX-XXXX" class="headerlink" title="是否为格式 XXX-XXX-XXXX"></a>是否为格式 XXX-XXX-XXXX</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/^(\d&#123;3&#125;-)&#123;2&#125;\d&#123;4&#125;$/</span></span><br></pre></td></tr></table></figure>

<h3 id="是否符合USD格式"><a href="#是否符合USD格式" class="headerlink" title="是否符合USD格式"></a>是否符合USD格式</h3><ol>
<li>以 $ 开始</li>
<li>整数部分，从个位起，满 3 个数字用 , 分隔</li>
<li>如果为小数，则小数部分长度为 2</li>
<li>正确的格式如：$1,023,032.03 或者 $2.03，错误的格式如：$3,432,12.12 或者 $34,344.3**</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/^\$\d&#123;1,3&#125;(,\d&#123;3&#125;)*(\.\d&#123;2&#125;)?$/</span></span><br></pre></td></tr></table></figure>

<h3 id="实现千位分隔符"><a href="#实现千位分隔符" class="headerlink" title="实现千位分隔符"></a><strong>实现千位分隔符</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> regx = <span class="regexp">/\d&#123;1,3&#125;(?=(\d&#123;3&#125;)+$)/g</span>;</span><br><span class="line">    <span class="keyword">return</span> (number + <span class="string">''</span>).replace(regx, <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $mdFormatter$5$mdFormatter$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        , '</span>)  <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">        $mdFormatter$<span class="number">5</span>$mdFormatter$</span><br><span class="line"></span><br><span class="line">        表示与regx相匹配的字符串</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取url中参数"><a href="#获取url中参数" class="headerlink" title="获取url中参数"></a><strong>获取url中参数</strong></h3><ol>
<li>指定参数名称，返回该参数的值 或者 空字符串</li>
<li>不指定参数名称，返回全部的参数对象 或者 {}</li>
<li>如果存在多个同名参数，则返回数组</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlParam</span>(<span class="params">url, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = &#123;&#125;;</span><br><span class="line">    url.replace(<span class="regexp">/\??(\w+)=(\w+)&amp;?/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, matchKey, matchValue</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!arr[matchKey]) &#123;</span><br><span class="line">            arr[matchKey] = matchValue;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[matchKey];</span><br><span class="line">            arr[matchKey] = [].concat(temp, matchValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!key) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ele <span class="keyword">in</span> arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ele = key) &#123;</span><br><span class="line">                <span class="keyword">return</span> arr[ele];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="验证邮箱"><a href="#验证邮箱" class="headerlink" title="验证邮箱"></a>验证邮箱</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> email = <span class="regexp">/^[0-9A-Za-z_\-]+\@[0-9A-Za-z_\-]+\.[0-9A-Za-z_\-]+$/</span></span><br></pre></td></tr></table></figure>

<h3 id="身份证号码"><a href="#身份证号码" class="headerlink" title="身份证号码"></a>身份证号码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> idCard = <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span></span><br></pre></td></tr></table></figure>

<h3 id="汉字"><a href="#汉字" class="headerlink" title="汉字"></a>汉字</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> text = <span class="regexp">/^[\u4e00-\u9fa5]&#123;0,&#125;$/</span></span><br></pre></td></tr></table></figure>

<h3 id="去除首尾"><a href="#去除首尾" class="headerlink" title="去除首尾/"></a>去除首尾/</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'/asdf//'</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/^\/*|\/*$/g</span>, <span class="string">''</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2017-05-11-格式日期"><a href="#2017-05-11-格式日期" class="headerlink" title="2017-05-11 格式日期"></a>2017-05-11 格式日期</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="regexp">/^\d&#123;4&#125;\-\d&#123;2&#125;\-\d&#123;2&#125;$/</span></span><br></pre></td></tr></table></figure>

<h3 id="16进制颜色正则"><a href="#16进制颜色正则" class="headerlink" title="16进制颜色正则"></a>16进制颜色正则</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> color = <span class="regexp">/^#([a-zA-Z0-9]&#123;6&#125;|[a-zA-Z0-9]&#123;3&#125;)$/</span></span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### **HTML标签**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> js</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"&lt;p&gt;dasdsa&lt;/p&gt;nice &lt;br&gt; test&lt;/br&gt;"</span></span><br><span class="line"><span class="keyword">var</span> regx = <span class="regexp">/&lt;[^&lt;&gt;]+&gt;/g</span>;</span><br><span class="line">str = str.replace(regx, <span class="string">''</span>);</span><br></pre></td></tr></table></figure>

<h3 id="密码强度正则"><a href="#密码强度正则" class="headerlink" title="密码强度正则"></a>密码强度正则</h3><ol>
<li>最少6位</li>
<li>包括至少1个大写字母</li>
<li>1个小写字母</li>
<li>1个数字</li>
<li>1个特殊字符</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regx = <span class="regexp">/^.*(?=.&#123;6,&#125;)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/</span>;</span><br></pre></td></tr></table></figure>

<h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regx = <span class="regexp">/^((https?|ftp|file):\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)([\/\w \.-]*)*\/?$/</span>;</span><br></pre></td></tr></table></figure>

<h3 id="lt-OPTION-value-”待处理”-gt-待处理-lt-OPTION-gt"><a href="#lt-OPTION-value-”待处理”-gt-待处理-lt-OPTION-gt" class="headerlink" title="&lt;OPTION value=”待处理”&gt;待处理&lt;/OPTION&gt;"></a>&lt;OPTION value=”待处理”&gt;待处理&lt;/OPTION&gt;</h3><p>处理成 &lt;OPTION value=”待处理”&gt;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regx = <span class="regexp">/^&lt;.*?&gt;/</span>;</span><br><span class="line"><span class="keyword">var</span> resiult = regx.exec(str)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<h3 id="获取查询字符串"><a href="#获取查询字符串" class="headerlink" title="获取查询字符串"></a>获取查询字符串</h3><p>function getQuery(name){var reg=new RegExp(“(^|&amp;)”+name+”=([^&amp;]*(&amp;|$)”); var r=window.location.search.substr(1).match(reg); if(r!=null) return unescape(r[2]); return null; }</p>
]]></content>
  </entry>
  <entry>
    <title>ES6</title>
    <url>/2020/01/01/ES6/</url>
    <content><![CDATA[<p>本文对ES6知识点进行整理</p>
<a id="more"></a>

<h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><blockquote>
<p>let 所声明的变量只在 let 命令所在的代码块中有效。</p>
</blockquote>
<p>🤔如下代码块，最终输出10。如果 var 改成 let，输出6。<br>原因：var 声明的，在全局范围内都有效，所以，每循环一次，新的i值都会覆盖旧的i值，导致，最后输出的是旧的i值。<br>而 let 声明的，当前的 i 值只在本轮循环内有效，所以每一次循环的 i 其实都是一个新的变量。<br>🤔而且，当运行结束之后, var 声明的 i 会泄漏为全局变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>]()</span><br></pre></td></tr></table></figure>

<p>特性：</p>
<ul>
<li><strong>let 不存在变量提升</strong></li>
<li><strong>暂时性死区</strong></li>
<li><strong>不允许重复声明</strong></li>
</ul>
<h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><blockquote>
<p>const 变量只是保证变量名指向的地址不变，并不保证该地址的数据不变</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = []</span><br><span class="line">a.c = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>🧐如果真的想冻结对象，可以使用 Object.freeze</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> b = <span class="built_in">Object</span>.freeze(&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="第三章-解构赋值"><a href="#第三章-解构赋值" class="headerlink" title="第三章 解构赋值"></a>第三章 解构赋值</h3><p>对于 Set 结构，也可以使用数组的解构赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>])</span><br></pre></td></tr></table></figure>

<p>只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> a;</span><br><span class="line">        [a, b] = [b, a + b]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> [one, two, three, four, five, six] = fibs()</span><br></pre></td></tr></table></figure>

<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><blockquote>
<p>解构函数允许指定默认值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [a = <span class="number">3</span>] = []</span><br><span class="line"><span class="comment">// a = 3</span></span><br></pre></td></tr></table></figure>

<p>如果默认值是一个表达式，那么这个表达式是惰性求值的。只有当值是 undefined 的时候，才会去求值。</p>
<h4 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h4><blockquote>
<p>对象解构赋值的内部机制，是先找到同名属性，然后再赋值给对应变量</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">    foo: baz,</span><br><span class="line">    bar</span><br><span class="line">&#125; = &#123;</span><br><span class="line">    foo: <span class="string">"aaa"</span>,</span><br><span class="line">    bar: <span class="string">"bbb"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对象的解构赋值可以指定默认值。如果解构失败，变量的值等于 undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    x = <span class="number">3</span></span><br><span class="line">&#125; = &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span></span><br></pre></td></tr></table></figure>

<p>🧐类似数组的对象都有 length 属性，因此可以对这个属性解构赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    length: len</span><br><span class="line">&#125; = <span class="string">'hello'</span></span><br><span class="line">len <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h4 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h4><blockquote>
<p>解构赋值时，如果等号右边是数值或者布尔值，则会先转为对象。由于 undefined 和 null 都无法转为对象，所以对他们进行解构赋值会报错。</p>
</blockquote>
<p>👇数值和布尔值的包装对象都有toString属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">toString</span>: s &#125; = <span class="number">123</span></span><br><span class="line">s === <span class="built_in">Number</span>.prototype.toString</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">toString</span>: s &#125; = <span class="literal">true</span></span><br><span class="line">s === <span class="built_in">Boolean</span>.prototype.toString</span><br></pre></td></tr></table></figure>

<h4 id="遍历-map-结构"><a href="#遍历-map-结构" class="headerlink" title="遍历 map 结构"></a>遍历 map 结构</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">map.set(<span class="string">"first"</span>, <span class="string">"hello"</span>)</span><br><span class="line">map.set(<span class="string">"second"</span>, <span class="string">"world"</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" , "</span> + value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第四章-字符串的扩展"><a href="#第四章-字符串的扩展" class="headerlink" title="第四章 字符串的扩展"></a>第四章 字符串的扩展</h3><ul>
<li>includes  </li>
<li>startsWith</li>
<li>endsWith</li>
<li>repeat</li>
<li>padStart</li>
<li>padEnd</li>
</ul>
<h3 id="第六章-数值的扩展"><a href="#第六章-数值的扩展" class="headerlink" title="第六章 数值的扩展"></a>第六章 数值的扩展</h3><ul>
<li>Number.isFinite</li>
<li>Number.isNaN</li>
<li>Number.parseInt</li>
<li>Number.parseFloat</li>
<li>Number.isInteger</li>
<li>Number.EPSILON</li>
<li>Number.isSafeInteger JavaScript能准确表示的整数范围在 -2^53 ~ 2^53 之间</li>
<li>Number.MAX_SAFE_INTEGER</li>
<li>Number.MIN_SAFE_INTEGER</li>
<li>Math.trunc 返回整数部分</li>
<li>Math.sign  判断正负</li>
<li>** 指数运算符 a ** b = a^b</li>
</ul>
<h3 id="第七章-数组的扩展"><a href="#第七章-数组的扩展" class="headerlink" title="第七章 数组的扩展"></a>第七章 数组的扩展</h3><h4 id="Array-from-将两类对象转换成数组👇"><a href="#Array-from-将两类对象转换成数组👇" class="headerlink" title="Array.from 将两类对象转换成数组👇"></a>Array.from 将两类对象转换成数组👇</h4><ul>
<li>类似数组对象 (本质上：必须有 length 属性)</li>
<li>可遍历对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">"a"</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">"b"</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">"c"</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [].slice.call(arrayLike) <span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike)  <span class="comment">// ES6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1, arr2)</span><br></pre></td></tr></table></figure>

<p>👉扩展运算符也可将某些数据结构转为数组</p>
<blockquote>
<p>扩展运算符调用的是遍历器接口 Symbol.iterator</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = [...arguments]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[...document.querySelectorAll(<span class="string">'div'</span>)]</span><br></pre></td></tr></table></figure>

<p>Array.from 接收第二个参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(arr, (x) =&gt; x * x)</span><br></pre></td></tr></table></figure>
<h4 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h4><blockquote>
<p>将一组值转为数组</p>
</blockquote>
<p><strong>Array</strong> 只有当参数个数不少于2个，Array才返回由参数组成的新数组。参数只有一个时，代表的是数组的长度。 </p>
<h4 id="copyWithin-target必须-start可选-end可选"><a href="#copyWithin-target必须-start可选-end可选" class="headerlink" title="copyWithin(target必须,start可选,end可选)"></a>copyWithin(target必须,start可选,end可选)</h4><h4 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is"></a>Object.is</h4><p>判断俩数是否相等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="built_in">isNaN</span>, <span class="built_in">isNaN</span>) === <span class="literal">true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">-0</span>, +<span class="number">0</span>) === <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>indexOf 内部使用 ==== 进行判断</strong></p>
<h4 id="entries-keys-values"><a href="#entries-keys-values" class="headerlink" title="entries, keys, values"></a>entries, keys, values</h4><h4 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="has"><a href="#has" class="headerlink" title="has"></a>has</h4><p>Map 的 has 是用来查找键名的<br>Set 的 has 是用来查找键值的</p>
<h4 id="数组的空位"><a href="#数组的空位" class="headerlink" title="数组的空位"></a>数组的空位</h4><blockquote>
<p>空位表示不含任何值 Array(3) </p>
</blockquote>
<p>Array.from，扩展运算符，entries，keys，values 会将空位转为 undefined</p>
<h3 id="第八章-函数的扩展"><a href="#第八章-函数的扩展" class="headerlink" title="第八章 函数的扩展"></a>第八章 函数的扩展</h3><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>👇undefined，如果把匿名函数改成箭头函数，返回42 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id)</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo.call(&#123; <span class="attr">id</span>: <span class="number">42</span> &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h4><p>尾调用就是指某个函数的最后一步是调用另一个函数。尾调用不一定出现在函数尾部，只要是最后一步操作即可。<br>函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用记录上方，还会形成一个B的调用记录。等到B运行结束，将结果返回到A，B的调用记录才会消失。如果函数B内部还调用函数C，那就还有一个C的调用记录栈，以此类推。所有的调用记录，就形成一个“调用栈”（call stack）。<br>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用记录，取代外层函数的调用记录就可以了。<br>递归非常耗费内存，因为需要同时保存成千上百个调用记录，很容易发生”栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用记录，所以永远不会发生”栈溢出”错误。</p>
<h3 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h3><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h4><blockquote>
<p>将源对象的所有可枚举属性赋值到目标对象。</p>
</blockquote>
<h3 id="第14章-Iterator-和-for…-of-循环"><a href="#第14章-Iterator-和-for…-of-循环" class="headerlink" title="第14章 Iterator 和 for… of 循环"></a>第14章 Iterator 和 for… of 循环</h3><p>遍历器是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构，只要部署Iterator接口，就可以完成遍历操作</p>
<p><strong>Iterator遍历过程</strong></p>
<ul>
<li>创建一个指针对象，指向当前数据结构的起始位置</li>
<li>第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。</li>
<li>… </li>
</ul>
<p>每一次调用next方法，都会返回数据结构的当前成员的信息（返回一个包含value和done两个属性的对象）</p>
<p>一个数据结构，只要具有Symbol.iterator属性，就可以认为是可遍历的，调用Symbol.iterator方法，就会得到当前数据接口默认的遍历器生成函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line">iter.next()</span><br><span class="line">iter.next()</span><br><span class="line">iter.next()</span><br><span class="line">iter.next()</span><br></pre></td></tr></table></figure>

<p>首先在构造函数的原型链上部署Symbol.iterator方法，调用该方法会返回遍历器对象iterator，调用该方法的next方法，在返回一个值的时候自动把指针移到下一个实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">Obj.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> iterator = &#123;</span><br><span class="line">        next: next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> current = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current) &#123;</span><br><span class="line">            <span class="keyword">var</span> value = current.value</span><br><span class="line">            <span class="keyword">var</span> done = current === <span class="literal">null</span></span><br><span class="line">            current = current.next</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                done: <span class="literal">false</span>,</span><br><span class="line">                value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                done: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> iterator</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> one = <span class="keyword">new</span> Obj(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> two = <span class="keyword">new</span> Obj(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> three = <span class="keyword">new</span> Obj(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">var</span> four = <span class="keyword">new</span> Obj(<span class="number">4</span>)</span><br><span class="line">one.next = two</span><br><span class="line">two.next = three</span><br><span class="line">three.next = four</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> one) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为对象添加Iterator接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    data: [<span class="string">'hello'</span>, <span class="string">'world'</span>],</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            next() &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt; self.data.length) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        value: self.data[index++],</span><br><span class="line">                        done: <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        value: <span class="literal">undefined</span>,</span><br><span class="line">                        done: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类似数组对象调用数组的Symbol.iterator方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">'d'</span>,</span><br><span class="line">    length: <span class="number">4</span>,</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]: <span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> iterm <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="调用Iterator接口的场合"><a href="#调用Iterator接口的场合" class="headerlink" title="调用Iterator接口的场合"></a>调用Iterator接口的场合</h4><p><strong>解构赋值</strong></p>
<p><strong>扩展运算符</strong><br>只要某个数据结构部署了Iterator接口，就可以对他使用扩展运算符，转换为数组</p>
<h4 id="字符串的Iterator接口"><a href="#字符串的Iterator接口" class="headerlink" title="字符串的Iterator接口"></a>字符串的Iterator接口</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iterator = someString[<span class="built_in">Symbol</span>.iterator]()</span><br></pre></td></tr></table></figure>

<h4 id="iterator接口与generator函数"><a href="#iterator接口与generator函数" class="headerlink" title="iterator接口与generator函数"></a>iterator接口与generator函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myIterator = &#123;&#125;</span><br><span class="line">myIterator[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = [...myIterator]</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    *[<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'hello'</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'world'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>javascript 原有的for… in 循环，只能获得对象的键名，不能直接获取键值，for… of 可以获取键值</p>
<h3 id="第16章-Promise-对象"><a href="#第16章-Promise-对象" class="headerlink" title="第16章 Promise 对象"></a>第16章 Promise 对象</h3><blockquote>
<p>promise 是一个对象，用来传递异步操作的消息</p>
</blockquote>
<ul>
<li>promise 构造函数接受一个函数作为参数，该函数的两个参数分别是resolve，reject</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="comment">/* 异步操作成功*/</span> ) &#123;</span><br><span class="line">        resolve(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>promise实例生成之后，可以用then方法指定resolved和rejected状态的回调函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// failue</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h4><blockquote>
<p>.then(null, rejection) 的别名，用于指定发生错误时的回调</p>
</blockquote>
<h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h4><p>promise.all 用于将多个promise实例包装成一个新的promise实例。Promise.all 方法的参数不一定是数组，但是必须具有Iterator接口，且返回的每一个成员都是Promise实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3])</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promises = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getJSON(<span class="string">"/post/"</span> + id + <span class="string">".json"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="keyword">function</span>(<span class="params">posts</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>promise对象的错误就有冒泡性质，会一直向后传递，直到被捕获为止</p>
<blockquote>
<p>一般不要在then方法中定义rejected状态的回调函数，而应总是使用catch方法，理由是更接近同步写法。</p>
</blockquote>
<h3 id="第17章-异步操作和-async-函数"><a href="#第17章-异步操作和-async-函数" class="headerlink" title="第17章 异步操作和 async 函数"></a>第17章 异步操作和 async 函数</h3><p>ES6 前，异步编程方法：</p>
<ul>
<li>回调函数</li>
<li>事件监听</li>
<li>发布/订阅</li>
<li>promise 对象</li>
</ul>
<p>** promise最大的问题是代码冗余，原来的任务被promise包装了一下，不管什么操作，一眼看上去都是一堆then，原来的语义变得很不清楚**</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="keyword">yield</span> x + <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = gen(<span class="number">1</span>)</span><br><span class="line">g.next()</span><br><span class="line">g.next()</span><br></pre></td></tr></table></figure>

<p>调用 generator函数会返回一个内部指针（即遍历器）g，这是generator函数不同于普通函数的另一个地方，即执行他不会返回结果，返回的是指针对象<br>next方法的作用是分阶段执行generator函数，每次调用next方法，会返回一个对象，表示当前阶段的信息</p>
<h4 id="generator函数的数据交换和错误处理"><a href="#generator函数的数据交换和错误处理" class="headerlink" title="generator函数的数据交换和错误处理"></a>generator函数的数据交换和错误处理</h4><p>下面代码中，第一个next方法的value属性，返回表达式x+2的值，第二个next方法带有参数2，这个参数可以传入generator函数，作为上个阶段异步任务的返回结果被函数体内的y接收。因此，这一步value属性返回的就是2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="keyword">yield</span> x + <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = gen(<span class="number">1</span>)</span><br><span class="line">g.next()</span><br><span class="line">g.next(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>generator函数可以部署错误处理代码，捕获函数体外抛出的错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> y = <span class="keyword">yield</span> x + <span class="number">2</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = gen(<span class="number">1</span>)</span><br><span class="line">g.next()</span><br><span class="line">g.throw(<span class="string">'出错了'</span>)</span><br></pre></td></tr></table></figure>

<p><strong>generator函数将异步操作表示得很简洁，但是流程管理却不方便</strong></p>
<h3 id="第18章-Class"><a href="#第18章-Class" class="headerlink" title="第18章 Class"></a>第18章 Class</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y</span><br><span class="line">    &#125;</span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">','</span> + <span class="keyword">this</span>.y + <span class="string">')'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// typeof Point === "function" true</span></span><br><span class="line"><span class="comment">// Point === Point.prototype.constructor true</span></span><br></pre></td></tr></table></figure>

<p>类的所有方法都定义在类的prototype属性上。在类的实例上调用方法，实际是在调用类的原型上方法。<br>类的内部定义的所有方法都是不可枚举的</p>
<p><strong>constructor方法</strong><br>constructor方法是类的默认方法， 通过new命令生成对象实例时自动调用该方法，constructor方法默认返回实例对象（this），也可以指定返回另外一个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// new Foo() instanceof Foo false</span></span><br></pre></td></tr></table></figure>

<h4 id="class-表达式"><a href="#class-表达式" class="headerlink" title="class 表达式"></a>class 表达式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    sayName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(<span class="string">'zhang san'</span>)</span><br><span class="line">person.sayName()</span><br></pre></td></tr></table></figure>

<h4 id="class-继承"><a href="#class-继承" class="headerlink" title="class 继承"></a>class 继承</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(x, y, color) &#123;</span><br><span class="line">        <span class="keyword">super</span>(x, y)</span><br><span class="line">        <span class="keyword">this</span>.color = color</span><br><span class="line">    &#125;</span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.color + <span class="string">' '</span> + <span class="keyword">super</span>.toString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>super 指代父类的实例（即父类的this对象）<br>子类必须在constructor方法中调用super对象，否则新建实例会报错。这是因为子类没有自己的this对象，而是继承了父类的this对象，然后对其加工。如果不调用super方法，子类就得不到this对象</p>
<h4 id="类的prototype属性和-proto-属性"><a href="#类的prototype属性和-proto-属性" class="headerlink" title="类的prototype属性和 proto 属性"></a>类的prototype属性和 <strong>proto</strong> 属性</h4><ul>
<li>子类的<strong>proto</strong> 属性表示构造函数的继承，指向父类</li>
<li>子类的prototype属性的<strong>proto</strong>表示方法的继承，指向父类的prototype属性。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line">B.__proto__ === A</span><br><span class="line">B.prototype.__proto__ === A.prototype</span><br></pre></td></tr></table></figure>

<h4 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h4><p>Object.getPrototypeOf()方法可用于从子类上获取父类</p>
<h4 id="原生构造函数的继承"><a href="#原生构造函数的继承" class="headerlink" title="原生构造函数的继承"></a>原生构造函数的继承</h4><p>原生构造函数式语言内置的构造函数，通常用来生成数据结构</p>
<ul>
<li>Boolean()</li>
<li>Number()</li>
<li>String()</li>
<li>Array()</li>
<li>Date()</li>
<li>Function()</li>
<li>RegExp()</li>
<li>Error()</li>
<li>Object()</li>
</ul>
<h4 id="class-取值函数（getter）和存值函数（setter）"><a href="#class-取值函数（getter）和存值函数（setter）" class="headerlink" title="class 取值函数（getter）和存值函数（setter）"></a>class 取值函数（getter）和存值函数（setter）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">get</span> prop() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'getter'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> prop(value) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'setter：'</span> + value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> MyClass()</span><br><span class="line">inst.prop = <span class="number">123</span></span><br><span class="line">inst.prop</span><br></pre></td></tr></table></figure>

<h4 id="class-的-Generator-方法"><a href="#class-的-Generator-方法" class="headerlink" title="class 的 Generator 方法"></a>class 的 Generator 方法</h4><p>如果在某个方法钱加上星号（*），就表示该方法时一个generator函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">            <span class="keyword">this</span>.args = args</span><br><span class="line">        &#125;</span><br><span class="line">        *[<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> arg <span class="keyword">of</span> <span class="keyword">this</span>.args) &#123;</span><br><span class="line">                <span class="keyword">yield</span> arg</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> <span class="keyword">new</span> Foo(<span class="string">'hello'</span>, <span class="string">'world'</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="class-的静态方法"><a href="#class-的静态方法" class="headerlink" title="class 的静态方法"></a>class 的静态方法</h4><p>类相当于实例的原型，所有在类中定义的方法都会被实例继承。如果在一个方法前加上static关键字，就表示该方法不会被实例继承，而是直接通过类调用，称为“静态方法”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> classMethod() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> classMethod() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.classMethod() + <span class="string">', too'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="new-target-属性"><a href="#new-target-属性" class="headerlink" title="new.target 属性"></a>new.target 属性</h4><p>new.target 返回 new 命令作用的构造函数</p>
<h3 id="第20章-Module"><a href="#第20章-Module" class="headerlink" title="第20章 Module"></a>第20章 Module</h3><ul>
<li>CommonJS 用于服务器</li>
<li>AMD 用于浏览器</li>
</ul>
<p>ES6 模块的设计思想是尽量静态化，使得编译时就能确定模块的依赖关系，以及输入输出变量。CommonJS和AMD都只能在运行时确定这些东西</p>
<ul>
<li>CommonJS模块就是对象，输入时必须查找对象属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行时加载</span></span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    stat,</span><br><span class="line">    exists,</span><br><span class="line">    readFile</span><br><span class="line">&#125; = requre(<span class="string">'fs'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>ES6 模块不是对象，而是通过export命令显示指定输出的代码，输入时也采用静态命令的形式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译时加载</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    stat,</span><br><span class="line">    exists,</span><br><span class="line">    readFile</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>export 使用 as 重命名</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">    v2 <span class="keyword">as</span> streamV2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>import 使用 as 重命名</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    lastname <span class="keyword">as</span> surname</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./profile'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>import 命令具有提升效果，会提升到模块的头部首先执行。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    es6 <span class="keyword">as</span></span><br><span class="line">    <span class="keyword">default</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">from</span> <span class="string">'./someModule'</span> ===</span><br><span class="line">    =&gt; 等价</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    es6</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./someMudule'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6</span><br></pre></td></tr></table></figure>

<ul>
<li>整体加载</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">'./circle'</span></span><br></pre></td></tr></table></figure>

<h4 id="ES6-模块加载的实质"><a href="#ES6-模块加载的实质" class="headerlink" title="ES6 模块加载的实质"></a>ES6 模块加载的实质</h4><p>CommonJS模块输出的是一个值的拷贝，ES6模块输出的是值的引用。</p>
<h4 id="循环加载"><a href="#循环加载" class="headerlink" title="循环加载"></a>循环加载</h4><ul>
<li>require 命令第一次加载脚本就会执行整个脚本，然后内存中生成一个对象。CommonJS对待循环加载，只会输出已经执行的部分，还未执行的部分不会输出</li>
</ul>
]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>最长公共子序列</title>
    <url>/2020/02/19/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<p>dp[i][j] 表示 str1[0…i] 与 str2[0…j] 的最长公共子序列的长度</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">"1A2C3D4B56"</span></span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">"B1D23CA45B6A"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create2DArray</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>(m)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        arr[i] = <span class="built_in">Array</span>(n)</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commonStr</span>(<span class="params">str1, str2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len1 = str1.length</span><br><span class="line">    <span class="keyword">const</span> len2 = str2.length</span><br><span class="line">    <span class="keyword">let</span> dp = create2DArray(len1, len2)</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = str1[<span class="number">0</span>] === str2[<span class="number">0</span>] ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len1; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="built_in">Math</span>.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], str1[i] === str2[<span class="number">0</span>] ? <span class="number">1</span> : <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; len2; j++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j] = <span class="built_in">Math</span>.max(dp[<span class="number">0</span>][j - <span class="number">1</span>], str1[<span class="number">0</span>] === str2[j] ? <span class="number">1</span> : <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; len2; j++) &#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">Math</span>.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> (str1[i] === str2[j]) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">Math</span>.max(dp[i][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/large/92babc53ly1gc401r3pbtj20t605o74u.jpg" alt="image.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCommon</span>(<span class="params">str1, str2, dp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> m = str1.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> n = str2.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> index = dp[m - <span class="number">1</span>][n - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> res = <span class="built_in">Array</span>(index)</span><br><span class="line">    <span class="keyword">while</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">0</span> &amp;&amp; dp[m][n] === dp[m][n - <span class="number">1</span>]) &#123;</span><br><span class="line">            n--</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m &gt; <span class="number">0</span> &amp;&amp; dp[m][n] === dp[m - <span class="number">1</span>][n]) &#123;</span><br><span class="line">            m--</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res)</span><br><span class="line">            res[index--] = str1[m]</span><br><span class="line">            m--</span><br><span class="line">            n--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>字符串</title>
    <url>/2020/02/23/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h3 id="判断两个字符串是否为变形词"><a href="#判断两个字符串是否为变形词" class="headerlink" title="判断两个字符串是否为变形词"></a>判断两个字符串是否为变形词</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDeformation</span>(<span class="params">str1, str2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!str1 || !str2 || str1.length !== str2.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="built_in">Array</span>(<span class="number">256</span>).fill(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str1.length; i++) &#123;</span><br><span class="line">    map[str1[i]]++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str2.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (map[str2[i]]-- === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>Typescript</title>
    <url>/2019/12/28/Typescript/</url>
    <content><![CDATA[<h2 id="Typescript-学习教程"><a href="#Typescript-学习教程" class="headerlink" title="Typescript 学习教程"></a>Typescript 学习教程</h2><a id="more"></a>

<h3 id="typescript-通过类型注解提供编译时的静态类型检查"><a href="#typescript-通过类型注解提供编译时的静态类型检查" class="headerlink" title="typescript 通过类型注解提供编译时的静态类型检查"></a>typescript 通过类型注解提供编译时的静态类型检查</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明数组</span></span><br><span class="line"><span class="keyword">let</span> arr: number[] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">// 数组泛型</span></span><br><span class="line"><span class="keyword">let</span> arr: <span class="built_in">Array</span> &lt; number &gt; = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元祖：表示已知元素数量和类型的数组</span></span><br><span class="line"><span class="keyword">let</span> x: [string, number]</span><br><span class="line">x = [<span class="string">"Runoob"</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举，用于定义数值集合</span></span><br><span class="line">enum Color &#123;</span><br><span class="line">    Red,</span><br><span class="line">    Green,</span><br><span class="line">    Blue</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Blue</span><br></pre></td></tr></table></figure>

<h3 id="typescript-变量声明"><a href="#typescript-变量声明" class="headerlink" title="typescript 变量声明"></a>typescript 变量声明</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [变量名]: [类型] = 值</span><br></pre></td></tr></table></figure>

<h3 id="类型断言-（Type-Assertion）"><a href="#类型断言-（Type-Assertion）" class="headerlink" title="类型断言 （Type Assertion）"></a>类型断言 （Type Assertion）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt; 类型 &gt; 值</span><br><span class="line"></span><br><span class="line">值 <span class="keyword">as</span> 类型</span><br></pre></td></tr></table></figure>

<h3 id="带参数函数"><a href="#带参数函数" class="headerlink" title="带参数函数"></a>带参数函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func_name</span>(<span class="params">param1[: datatype], param2[: datatype]</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选参数 若我们定义了参数，则必须要传入这些参数，除非讲参数设为可选，可选参数使用问号标识</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: string, lastName ? : string</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">function_name</span>(<span class="params">param1[: type], param2[: type] = default_value</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate_discount</span>(<span class="params">price: number, rate: number = <span class="number">0.5</span></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: string, ...restOfName: string[]</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNumbers</span>(<span class="params">...nums: number[]</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数重载 方法名字相同，而参数不同，返回类型可以相同也可以不相同</span></span><br></pre></td></tr></table></figure>

<h3 id="联合类型-通过管道将变量设置成多种类型，赋值时可以根据设置的类型来赋值"><a href="#联合类型-通过管道将变量设置成多种类型，赋值时可以根据设置的类型来赋值" class="headerlink" title="联合类型(通过管道将变量设置成多种类型，赋值时可以根据设置的类型来赋值)"></a>联合类型(通过管道将变量设置成多种类型，赋值时可以根据设置的类型来赋值)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Type1 | Type2 | Type3</span><br></pre></td></tr></table></figure>

<h3 id="接口-一系列抽象方法的声明，一些方法特征的集合"><a href="#接口-一系列抽象方法的声明，一些方法特征的集合" class="headerlink" title="接口(一系列抽象方法的声明，一些方法特征的集合)"></a>接口(一系列抽象方法的声明，一些方法特征的集合)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">    firstName: string,</span><br><span class="line">        lastName: string,</span><br><span class="line">        sayHi: <span class="function"><span class="params">()</span> =&gt;</span> string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> customer: IPerson = &#123;</span><br><span class="line">    firstName: <span class="string">"Tom"</span>,</span><br><span class="line">    lastName: <span class="string">"Hanks"</span>,</span><br><span class="line">    sayHi: (): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hi there"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(customer.firstName)</span><br><span class="line"><span class="built_in">console</span>.log(customer.sayHi())</span><br></pre></td></tr></table></figure>

<h3 id="联合类型和接口"><a href="#联合类型和接口" class="headerlink" title="联合类型和接口"></a>联合类型和接口</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface RunOptions &#123;</span><br><span class="line">    program: string</span><br><span class="line">    commandline: string[] | string | <span class="function">(<span class="params">(</span>) =&gt;</span> string)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> options: RunOptions = &#123;</span><br><span class="line">    program: <span class="string">"text1"</span>,</span><br><span class="line">    commandline: <span class="string">"Hello"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> options: RunOptions = &#123;</span><br><span class="line">    program: <span class="string">"text1"</span>,</span><br><span class="line">    commandline: [<span class="string">"Hello"</span>, <span class="string">"world"</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> options: RunOptions = &#123;</span><br><span class="line">    program: <span class="string">"text1"</span>,</span><br><span class="line">    commandline: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"**Hello world**"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口和数组"><a href="#接口和数组" class="headerlink" title="接口和数组"></a>接口和数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface namelist &#123;</span><br><span class="line">    [index: number]: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> list2: namelist = [<span class="string">"John"</span>, <span class="string">"s"</span>, <span class="string">"Bran"</span>]</span><br><span class="line">interface ages &#123;</span><br><span class="line">    [index: string]: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> agelist: ages</span><br></pre></td></tr></table></figure>

<h3 id="接口继承（接口可以通过其他接口来扩展自己）"><a href="#接口继承（接口可以通过其他接口来扩展自己）" class="headerlink" title="接口继承（接口可以通过其他接口来扩展自己）"></a>接口继承（接口可以通过其他接口来扩展自己）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单接口继承</span></span><br><span class="line">child_interface_name extends super_interface_name</span><br><span class="line"><span class="comment">// 多接口继承</span></span><br><span class="line">child_interface_name extends super_interface1_name, super_interface2_name, ..., super_interfaceN_name</span><br><span class="line"><span class="comment">// 单继承</span></span><br><span class="line">interface Person &#123;</span><br><span class="line">    age: number</span><br><span class="line">&#125;</span><br><span class="line">interface Musician extends Person &#123;</span><br><span class="line">    instrument: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> drummer = <span class="xml"><span class="tag">&lt; <span class="attr">Musician</span> &gt;</span> &#123;&#125;;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多继承</span></span><br><span class="line">interface IParent1 &#123;</span><br><span class="line">    v1: number</span><br><span class="line">&#125;</span><br><span class="line">interface IParent2 &#123;</span><br><span class="line">    v2: number</span><br><span class="line">&#125;</span><br><span class="line">interface Child extends IParent1, IParent2 &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> Iobj: Child = &#123;</span><br><span class="line">    v1: <span class="number">12</span>,</span><br><span class="line">    v2: <span class="number">23</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    engine: string</span><br><span class="line">    <span class="keyword">constructor</span>(engine: string) &#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = engine</span><br><span class="line">    &#125;</span><br><span class="line">    disp(): <span class="keyword">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承类的方法重写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrinterClass</span> </span>&#123;</span><br><span class="line">    doPrint(): <span class="keyword">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringPrinter</span> <span class="keyword">extends</span> <span class="title">PrinterClass</span> </span>&#123;</span><br><span class="line">    doPrint(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.doPrint()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// static 关键字用于定义类的数据成员为静态的，静态成员可以通过类名调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticMem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> num: number</span><br><span class="line">    <span class="keyword">static</span> disp(): <span class="keyword">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h3><ul>
<li>public 公有，可以在任何地方被访问</li>
<li>protected 受保护的，可以被其自身以及其子类和父类访问</li>
<li>private 私有，只能被其定义所在的类访问</li>
</ul>
<h3 id="typescript-模块"><a href="#typescript-模块" class="headerlink" title="typescript 模块"></a>typescript 模块</h3><p>我们使用 <code>|=</code> 来添加一个标志<br>组合使用 <code>&amp;=</code> 和 <code>~</code> 来清理一个标志<br>使用 <code>|</code> 来合并标志 </p>
<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><a href="https://www.tslang.cn/docs/handbook/basic-types.html" target="_blank" rel="noopener">官方文档</a></h2><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><ul>
<li>数组</li>
</ul>
<p>定义方式有如下两种：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span> &lt; number &gt;= [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>元组 Tuple</li>
</ul>
<blockquote>
<p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list: [string, number]</span><br></pre></td></tr></table></figure>

<p>当访问一个越界的元素，会使用联合类型替代</p>
<ul>
<li>类型断言</li>
</ul>
<p>👇尖括号语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: any = <span class="string">"this is a string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: number = ( <span class="xml"><span class="tag">&lt; <span class="attr">string</span> &gt;</span> someValue).length;</span></span><br></pre></td></tr></table></figure>

<p>👇as 语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: any = <span class="string">"this is a string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: number = (someValue <span class="keyword">as</span> string).length;</span><br></pre></td></tr></table></figure>

<p>👇给对象元素指定类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    a,</span><br><span class="line">    b</span><br><span class="line">&#125;: &#123;</span><br><span class="line">    a: string,</span><br><span class="line">    b: number</span><br><span class="line">&#125; = o;</span><br></pre></td></tr></table></figure>


<h3 id="Symbol-用法"><a href="#Symbol-用法" class="headerlink" title="Symbol 用法"></a>Symbol 用法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [sym]: <span class="string">"value"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj[sym]); <span class="comment">// "value"</span></span><br></pre></td></tr></table></figure>

<h3 id="for…in-for…of"><a href="#for…in-for…of" class="headerlink" title="for…in for…of"></a>for…in for…of</h3><p>for..of和for..in均可迭代一个列表；但是用于迭代的值却不同，for..in迭代的是对象的 键 的列表，而for..of则迭代对象的键对应的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> list) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// "0", "1", "2",</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> list) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// "4", "5", "6"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一个区别是for..in可以操作任何对象；它提供了查看对象属性的一种方法。 但是 for..of关注于迭代对象的值。内置对象Map和Set已经实现了Symbol.iterator方法，让我们可以访问它们保存的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pets = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"Cat"</span>, <span class="string">"Dog"</span>, <span class="string">"Hamster"</span>]);</span><br><span class="line">pets[<span class="string">"species"</span>] = <span class="string">"mammals"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pet <span class="keyword">in</span> pets) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(pet); <span class="comment">// "species"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pet <span class="keyword">of</span> pets) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(pet); <span class="comment">// "Cat", "Dog", "Hamster"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>Refs</title>
    <url>/2020/02/13/Refs/</url>
    <content><![CDATA[<h3 id="本篇介绍-Refs-基础知识"><a href="#本篇介绍-Refs-基础知识" class="headerlink" title="本篇介绍 Refs 基础知识"></a>本篇介绍 Refs 基础知识</h3><a id="more"></a>

<h3 id="this-inputText-current-指代-input-DOM"><a href="#this-inputText-current-指代-input-DOM" class="headerlink" title="this.inputText.current 指代 input DOM"></a>this.inputText.current 指代 input DOM</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Next</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.input = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.input.current);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.input&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="ref-可以直接添加到-组件上，ref-current-可以直接调用组件的方法"><a href="#ref-可以直接添加到-组件上，ref-current-可以直接调用组件的方法" class="headerlink" title="ref 可以直接添加到 组件上，ref.current 可以直接调用组件的方法"></a>ref 可以直接添加到 组件上，ref.current 可以直接调用组件的方法</h3><p><strong>仅在 Child 是 class 组件时有用</strong></p>
<p><strong>函数式组件没有实例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.inputText = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.inputText.current.click());</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&#123;this.inputText&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">class Child extends React.Component &#123;</span></span><br><span class="line"><span class="xml">  click() &#123;</span></span><br><span class="line"><span class="xml">    console.log("clicked");</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  render() &#123;</span></span><br><span class="line"><span class="xml">    return <span class="tag">&lt;<span class="name">input</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-forwardRef-使函数式组件可以实现-将-ref-传递给它的一个子组件"><a href="#使用-forwardRef-使函数式组件可以实现-将-ref-传递给它的一个子组件" class="headerlink" title="使用 forwardRef 使函数式组件可以实现 将 ref 传递给它的一个子组件"></a>使用 forwardRef 使函数式组件可以实现 将 ref 传递给它的一个子组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ref = React.createRef();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">FancyButton</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">content</span>=<span class="string">&#123;</span>"<span class="attr">hello</span>"&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">const FancyButton = React.forwardRef((props, ref) =&gt; &#123;</span></span><br><span class="line"><span class="xml">  return <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>&#123;props.content&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure>


<h3 id="函数式组件使用ref"><a href="#函数式组件使用ref" class="headerlink" title="函数式组件使用ref"></a>函数式组件使用ref</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = React.createRef()</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(inputRef.current)</span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="回调-ref"><a href="#回调-ref" class="headerlink" title="回调 ref"></a>回调 ref</h3><blockquote>
<p>它能助你更精细地控制何时 refs 被设置和解除。你会传递一个函数。这个函数中接受 React 组件实例或 HTML DOM 元素作为参数，以使它们能在其他地方被存储和访问<br>回调 ref 可直接通过 this.inputText 访问，而不是在 this.inputText.current 上访问 </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.inputText = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.inputText.value = <span class="string">"hello"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">InputRef</span>=<span class="string">&#123;el</span> =&gt;</span> (this.inputText = el)&#125; /&gt;;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>



<p>React 会在组件挂载时给 current 属性传入 DOM 元素，并在组件卸载时传入 null 值。ref 会在 componentDidMount 或componentDidUpdate 生命周期钩子触发前更新</p>
<h3 id="组件间传递回调形式ref"><a href="#组件间传递回调形式ref" class="headerlink" title="组件间传递回调形式ref"></a>组件间传递回调形式ref</h3><p><strong>this.inputText 指代了 input DOM</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Child = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;props.InputRef&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 在父组件中，inputText 就是 子组件的引用</span></span><br><span class="line"><span class="xml">class Parent extends React.Component &#123;</span></span><br><span class="line"><span class="xml">  constructor(props) &#123;</span></span><br><span class="line"><span class="xml">    super(props);</span></span><br><span class="line"><span class="xml">    this.inputText = null;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  componentDidMount() &#123;</span></span><br><span class="line"><span class="xml">    this.inputText.value = "hello";</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  render() &#123;</span></span><br><span class="line">    return &lt;Child InputRef=&#123;el =&gt; (this.inputText = el)&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p><a href="https://swizec.com/blog/ref-callbacks-measure-react-component-size/swizec/8444" target="_blank" rel="noopener">ref callback 实例</a></p>
<h4 id="使用-ref-callback-测量-component-size"><a href="#使用-ref-callback-测量-component-size" class="headerlink" title="使用 ref callback 测量 component size"></a>使用 ref callback 测量 component size</h4><p>工作过程</p>
<ul>
<li>React 渲染组件 </li>
<li>浏览器布局</li>
<li>触发 ref callback</li>
<li>使用 getBoundingClientRect 获得元素尺寸</li>
<li>使用获得的尺寸</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// class 组件中的方法，constructor 中的定义需要写 this，其余地方不需要</span></span><br><span class="line">  refCallback = <span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (el) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(el.getBoundingClientRect());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.refCallback&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<p>当 react 放置此元素后，调用 refCallback , el 是对已放置在页面上 DOM 元素的引用</p>
<p>目前看上去好像与 componentDidMount 差不多，但是当你的组件，在没有 remount 的情况下，改变了尺寸， 就不得不通过 componentDidUpdate 重新计算，但是这会 陷入 无限递归陷阱 🧐<strong>componetdidupdate中执行setState</strong></p>
<p>使用 ref callback 👇</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReportSize</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    text: faker.lorem.paragraphs(<span class="built_in">Math</span>.random() * <span class="number">10</span>)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  shuffle = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.doReportSize = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      text: faker.lorem.paragraphs(<span class="built_in">Math</span>.random() * <span class="number">10</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  refCallback = <span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (element) &#123;</span><br><span class="line">      <span class="keyword">this</span>.elementRef = element;</span><br><span class="line">      <span class="keyword">this</span>.props.getSize(element.getBoundingClientRect());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.doReportSize) &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.getSize(<span class="keyword">this</span>.elementRef.getBoundingClientRect());</span><br><span class="line">      <span class="keyword">this</span>.doReportSize = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; text &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div ref=&#123;<span class="keyword">this</span>.refCallback&#125; style=&#123;&#123; <span class="attr">border</span>: <span class="string">"1px solid red"</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.shuffle&#125;&gt;Shuffle&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;&#123;text&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title>换钱的最少货币数</title>
    <url>/2020/02/19/%E6%8D%A2%E9%92%B1%E7%9A%84%E6%9C%80%E5%B0%91%E8%B4%A7%E5%B8%81%E6%95%B0/</url>
    <content><![CDATA[<p>dp[i][j] 的含义，在可以任意使用 arr[0…i]货币的情况下，组成 j 所需要的最少张数<br>dp[i][j] = min{ dp[i-1][j], dp[i][j-arr[i]+1]}</p>
<a id="more"></a>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>斐波那契数列</title>
    <url>/2020/02/18/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
    <content><![CDATA[<p>斐波那契数列规则 ： <code>F(N) = F(N-1) + F(N-2)</code><br>斐波那契数列为 1、1、2、3……</p>
<a id="more"></a>
<p>👇普通解法，复杂度O(2^n)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Fibonacci(n - <span class="number">1</span>) + Fibonacci(n - <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>👇尾递归优化，复杂度O(2^n)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n, sum1 = <span class="number">1</span>, sum2 = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>) <span class="keyword">return</span> sum2</span><br><span class="line">    <span class="keyword">return</span> Fibonacci(n - <span class="number">1</span>, sum2, sum1 + sum2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>👇从左到右依次求出每一项的值，通过顺序计算求第N项即可，算法复杂度O(N)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> tmp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        tmp = res</span><br><span class="line">        res = res + pre</span><br><span class="line">        pre = tmp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>矩阵的最小路径和</title>
    <url>/2020/02/19/%E7%9F%A9%E9%98%B5%E7%9A%84%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/</url>
    <content><![CDATA[<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>思路：dp[i][j]的值表示从左上角的位置走到(i, j)位置的最小路径和</p>
<a id="more"></a>
<p>👇js 定义二维数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create2DArray</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>(m)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        arr[i] = <span class="built_in">Array</span>(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Array(m)中每一个元素都是 empty ,必须要加上fill,才能正常 map</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create2DArray</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> twoDArray = <span class="built_in">Array</span>(m).fill([]).map(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">Array</span>(n))</span><br><span class="line">    <span class="keyword">return</span> twoDArray</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>👇动态规划解法：以空间换时间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>],</span><br><span class="line">    [<span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">8</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">0</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minPathSum</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m || m.length === <span class="number">0</span> || !m[<span class="number">0</span>] || m[<span class="number">0</span>].length === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> row = m.length</span><br><span class="line">    <span class="keyword">const</span> col = m[<span class="number">0</span>].length</span><br><span class="line">    <span class="comment">// js 定义二维数组</span></span><br><span class="line">    <span class="keyword">let</span> dp = create2DArray(row, col)</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = m[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; row; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + m[i][<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; col; j++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>] + m[<span class="number">0</span>][j]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; col; j++) &#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">Math</span>.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]) + m[i][j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[row - <span class="number">1</span>][col - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>矩阵中一共有 M<em>N 个位置，每个位置都计算一次从(0,0)位置到达自己的最小路径和，时间复杂度为O(M</em>N)，空间复杂度为O(M*N)</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>压缩空间 O(M*N) -&gt; O(min{M,N})</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minPathSum</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m || m.length === <span class="number">0</span> || !m[<span class="number">0</span>] || m[<span class="number">0</span>].length === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> row = m.length</span><br><span class="line">    <span class="keyword">const</span> col = m[<span class="number">0</span>].length</span><br><span class="line">    <span class="keyword">const</span> more = <span class="built_in">Math</span>.max(row, col)</span><br><span class="line">    <span class="keyword">const</span> less = <span class="built_in">Math</span>.min(row, col)</span><br><span class="line">    <span class="keyword">const</span> rowMore = more === row</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>(less)</span><br><span class="line">    arr[<span class="number">0</span>] = m[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; less; i++) &#123;</span><br><span class="line">      arr[i] = arr[i - <span class="number">1</span>] + (rowMore ? m[<span class="number">0</span>][i] : m[i][<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; more; i++) &#123;</span><br><span class="line">      arr[<span class="number">0</span>] = arr[<span class="number">0</span>] + rowMore ? m[i][<span class="number">0</span>] : m[<span class="number">0</span>][i]</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; less; j++) &#123;</span><br><span class="line">        arr[j] = <span class="built_in">Math</span>.min(arr[j - <span class="number">1</span>], arr[j]) + (rowMore ? m[i][j] : m[j][i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[less - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>最长递增子序列</title>
    <url>/2020/02/19/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<p>生成长度为 N 的数组dp，dp[i]表示在arr[i] 这个数结尾的情况下，arr[0…i] 中的最长递归子序列</p>
<p>如果最长递归子序列以arr[i]结尾，那么在arr[0…i]中所有比arr[i]小的数，都可以作为倒数第二个数。在这么多倒数第二个数的选择中，以哪个数结尾的最大递增子序列更大，就选哪个数作为倒数第二个数。</p>
<a id="more"></a>

<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increNum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len = arr.length</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="built_in">Array</span>(len)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">Math</span>.max(dp[i], dp[j] + <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来根据dp，求出dp的最长递增子序列</p>
<ol>
<li>找到 dp 中的最大值的位置 index</li>
<li>从 index 向左遍历，如果既有 arr[index] &gt; arr[i], 又有 dp[i] + 1 = dp[index], i 即为所求</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateLIS</span>(<span class="params">arr, dp</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 最长递增子序列长度</span></span><br><span class="line">    <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 最大值所在位置</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; len) &#123;</span><br><span class="line">            index = i</span><br><span class="line">            len = dp[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> lis = <span class="built_in">Array</span>(len)</span><br><span class="line">    lis[--len] = arr[index]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[index] &amp;&amp; dp[i] + <span class="number">1</span> === dp[index]) &#123;</span><br><span class="line">            lis[--len] = arr[i]</span><br><span class="line">            index = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lis</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!arr || arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> dp = increNum(arr)</span><br><span class="line">    <span class="keyword">return</span> generateLIS(arr, dp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>计算dp数组的时间复杂度为O(N^2)，generateLIS时间复杂度为O(N)，所以整个过程的时间复杂度为O(N^2)</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>😓 <strong>未完成</strong><br>通过二分查找来进行优化。时间复杂度O(NlogN)</p>
<ol>
<li>先生成长度为 N 的数组 ends，初始时 ends[0] = arr[0]，其他位置上的值为 0</li>
<li>生成整型变量right，初始时right = 0</li>
<li>ends[0…right] 为有效区，ends[right+1…N-1] 为无效区</li>
<li>对有效区上的位置b，如果有 ends[b] == c，表示到目前为止，在所有长度为b+1的递增序列中，最小的结尾数为c</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increNum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = arr.length</span><br><span class="line">  <span class="keyword">let</span> dp = <span class="built_in">Array</span>(len)</span><br><span class="line">  <span class="keyword">let</span> ends = <span class="built_in">Array</span>(len)</span><br><span class="line">  ends[<span class="number">0</span>] = arr[<span class="number">0</span>]</span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> right = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> r = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> m = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    l = <span class="number">0</span>;</span><br><span class="line">    r = right</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">      m = <span class="built_in">Math</span>.floor((l + r) / <span class="number">2</span>)</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; ends[m]) &#123;</span><br><span class="line">        l = m + l</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l = m - l</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    right = <span class="built_in">Math</span>.max(right, l)</span><br><span class="line">    ends[l] = arr[i]</span><br><span class="line">    dp[i] = l + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>汉诺塔问题</title>
    <url>/2020/02/19/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h3><p>问题：假设有 from 柱子，mid 柱子，to柱子，都在from的圆盘1~i完全移动到to，最优解为： </p>
<ol>
<li>圆盘1~i-1从from移动到mid</li>
<li>圆盘i从from 移动到to</li>
<li>1~i-1从mid 移动到to</li>
</ol>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hanoi</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">        func(n, <span class="string">"left"</span>, <span class="string">"mid"</span>, <span class="string">"right"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">n, from, mid, to</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"move from "</span> + <span class="keyword">from</span> + <span class="string">" to "</span> + to)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        func(n - <span class="number">1</span>, <span class="keyword">from</span>, to, mid)</span><br><span class="line">        func(<span class="number">1</span>, <span class="keyword">from</span>, mid, to)</span><br><span class="line">        func(n - <span class="number">1</span>, mid, <span class="keyword">from</span>, to)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="进阶问题"><a href="#进阶问题" class="headerlink" title="进阶问题"></a>进阶问题</h3><p>求当前一共走了多少步<br>😓 <strong>未完成</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> process(arr, arr.length - <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">arr, i, from, mid, to</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] !== <span class="keyword">from</span> &amp;&amp; arr[i] !== to) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">  <span class="keyword">if</span> (arr[i] === <span class="keyword">from</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> process(arr, i - <span class="number">1</span>, <span class="keyword">from</span>, to, mid)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> rest = process(arr, i - <span class="number">1</span>, mid, <span class="keyword">from</span>, to)</span><br><span class="line">    <span class="keyword">if</span> (rest === <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; i + rest</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>前端进阶</title>
    <url>/2020/01/12/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h3 id="数组API（改变原数组）"><a href="#数组API（改变原数组）" class="headerlink" title="数组API（改变原数组）"></a>数组API（改变原数组）</h3><p>splice/reverse/fill/copyWithin/sort/push/pop/unshift/shift</p>
<h3 id="数组API（不改变原数组）"><a href="#数组API（不改变原数组）" class="headerlink" title="数组API（不改变原数组）"></a>数组API（不改变原数组）</h3><p>slice/map/forEach/every/filter/reduce/entries/find</p>
<a id="more"></a>
<h3 id="react为何合并多个setState"><a href="#react为何合并多个setState" class="headerlink" title="react为何合并多个setState"></a>react为何合并多个setState</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;react为了提高整体的渲染性能，会将一次渲染周期中的state进行合并，在这个渲染周期中你对所有setState的所有调用都会被合并起来之后，再一次性的渲染，这样可以避免频繁的调用setState导致频繁的操作dom，提高渲染性能。具体的实现方面，可以简单的理解为react中存在一个状态变量isBatchingUpdates，当处于渲染周期开始时，这个变量会被设置成true，渲染周期结束时，会被设置成false，react会根据这个状态变量，当出在渲染周期中时，仅仅只是将当前的改变缓存起来，等到渲染周期结束时，再一次性的全部render。</p>
<h3 id="react-diff-原理"><a href="#react-diff-原理" class="headerlink" title="react diff 原理"></a>react diff 原理</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;把树形结构按照层级分解，只比较同级元素。</p>
<p>给列表结构的每个单元添加唯一的 key 属性，方便比较。</p>
<p>React 只会匹配相同 class 的 component（这里面的 class 指的是组件的名字） 合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty.到每一个事件循环结束, React 检查所有标记 dirty 的 component 重新绘制.</p>
<p>选择性子树渲染。开发人员可以重写 shouldComponentUpdate 提高 diff 的性能。</p>
<h3 id="为什么虚拟-dom-会提高性能"><a href="#为什么虚拟-dom-会提高性能" class="headerlink" title="为什么虚拟 dom 会提高性能?"></a>为什么虚拟 dom 会提高性能?</h3><p>虚拟 dom 相当于在 js 和真实 dom 中间加了一个缓存，利用 dom diff 算法避免了没有必要的 dom 操作，从而提高性能。</p>
<p>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异把 2 所记录的差异应用到步骤 1 所构建的真正的 DOM 树上，视图就更新了。<br>易错点：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;)(i)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取li标签中内容"><a href="#获取li标签中内容" class="headerlink" title="获取li标签中内容"></a>获取li标签中内容</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"getTestLi()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一行<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二行<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第三行<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">getTestLi</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> objULi = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>).getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; objULi.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                objULi[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    alert(<span class="keyword">this</span>.innerHTML);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>location.reload([bForceGet])</code><br>参数：bForceGet 可选参数，默认为 false，从客户端缓存里取当前页。true, 则以 GET 方式，从服务端取最新的页面, 相当于客户端点击 F5(“刷新”)。<br>实际应用中，当刷新页面时，通常使用location.reload()或者history.go(0).</p>
<h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>闭包就是能够读取其他函数内部变量的函数。</p>
<ul>
<li>闭包的特性：</li>
</ul>
<ol>
<li>作为函数变量的一个引用，当函数返回时，其处于激活状态</li>
<li>闭包就是当一个函数返回时，并没有释放资源的栈区</li>
</ol>
<ul>
<li>闭包的原理：</li>
</ul>
<p>因为闭包只有在被调用时才执行操作，所以它可以被用来定义控制结构，多个函数可以使用同一个相同的环境，这使得他们可通过改变那个环境相互交流</p>
<ul>
<li>闭包使用场景：</li>
</ul>
<ol>
<li>采用函数引用方式的setTimeout调用</li>
<li>将函数关联到对象的实例方法</li>
<li>封装相关的功能</li>
</ol>
<ul>
<li>闭包的好处：</li>
</ul>
<ol>
<li>逻辑连续，当闭包作为另一个函数调用参数时，避免脱离当前逻辑二单独编写额外逻辑</li>
<li>方便调用上下文的局部变量。</li>
<li>加强封装，可以达到对变量的保护作用</li>
</ol>
<p>闭包的坏处：浪费内存，闭包中的变量常驻内存，对闭包的使用不当会造成无效内存的产生。</p>
<h3 id="函数式组件和类组件有何不同？"><a href="#函数式组件和类组件有何不同？" class="headerlink" title="函数式组件和类组件有何不同？"></a>函数式组件和类组件有何不同？</h3><blockquote>
<p>根本上的区别：函数式组件捕获了渲染所用的值。（Function components capture the rendered values.）</p>
</blockquote>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myList"</span>).insertBefore(newItem, existingItem);</span><br></pre></td></tr></table></figure>

<p>以下是LeetCode部分算法题解</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5. 最长回文串 （动态规划）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dp = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        dp[i] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; s.length; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i + k &lt; s.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> j = i + k</span><br><span class="line">            <span class="keyword">if</span> (k === <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i][j] = <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (k &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] === s[j]) &#123;</span><br><span class="line">                    dp[i][j] === <span class="literal">true</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] === <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = (dp[i + <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; s[i] === s[j]) ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j - i &gt; max &amp;&amp; dp[i][j]) &#123;</span><br><span class="line">                max = j - i</span><br><span class="line">                str = s.substring(i, j + <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> fourSumCount = <span class="function"><span class="keyword">function</span>(<span class="params">A, B, C, D</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; C.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; D.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> sum = C[i] + D[j];</span><br><span class="line">            mp[sum] = mp[sum] + <span class="number">1</span> || <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; B.length; j++) &#123;</span><br><span class="line">            res += mp[<span class="number">-1</span> * (A[i] + B[j])] || <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//17. Letter Combinations of a Phone Number</span></span><br><span class="line"><span class="keyword">const</span> digitToLetters = &#123;</span><br><span class="line">    <span class="string">'2'</span>: <span class="string">'abc'</span>,</span><br><span class="line">    <span class="string">'3'</span>: <span class="string">'def'</span>,</span><br><span class="line">    <span class="string">'4'</span>: <span class="string">'ghi'</span>,</span><br><span class="line">    <span class="string">'5'</span>: <span class="string">'jkl'</span>,</span><br><span class="line">    <span class="string">'6'</span>: <span class="string">'mno'</span>,</span><br><span class="line">    <span class="string">'7'</span>: <span class="string">'pqrs'</span>,</span><br><span class="line">    <span class="string">'8'</span>: <span class="string">'tuv'</span>,</span><br><span class="line">    <span class="string">'9'</span>: <span class="string">'wxyz'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> letterCombinations = <span class="function"><span class="keyword">function</span>(<span class="params">digits</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (digits.length === <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> queue = [<span class="string">''</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; digits.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> newQueue = [];</span><br><span class="line">        <span class="keyword">const</span> letters = digitToLetters[digits.charAt(i)];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; letters.length; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; queue.length; k++)</span><br><span class="line">                newQueue.push(queue[k] + letters.charAt(j));</span><br><span class="line"></span><br><span class="line">        queue = newQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> queue;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//18 4Sum</span></span><br><span class="line"><span class="keyword">var</span> fourSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">    nums.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> target2 = target - nums[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> target3 = target2 - nums[j];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> front = j + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> back = nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (front &lt; back) &#123;</span><br><span class="line">                <span class="keyword">var</span> sum = nums[front] + nums[back];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (sum &lt; target3)</span><br><span class="line">                    front++;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target3)</span><br><span class="line">                    back--;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>);</span><br><span class="line">                    temp[<span class="number">0</span>] = nums[i];</span><br><span class="line">                    temp[<span class="number">1</span>] = nums[j];</span><br><span class="line">                    temp[<span class="number">2</span>] = nums[front];</span><br><span class="line">                    temp[<span class="number">3</span>] = nums[back];</span><br><span class="line">                    ret.push(temp);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> (front &lt; back &amp;&amp; nums[front] === temp[<span class="number">2</span>])</span><br><span class="line">                        front++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> (front &lt; back &amp;&amp; nums[back] === temp[<span class="number">3</span>])</span><br><span class="line">                        back--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (j + <span class="number">1</span> &lt; nums.length &amp;&amp; nums[j + <span class="number">1</span>] === nums[j]) ++j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i + <span class="number">1</span> &lt; nums.length &amp;&amp; nums[i + <span class="number">1</span>] === nums[i]) ++i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//19. Remove Nth Node From End of List</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeNthFromEnd</span>(<span class="params">head, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    removeNthFromEnd(head.next, n);</span><br><span class="line"></span><br><span class="line">    head.end = head.next &amp;&amp;</span><br><span class="line">        head.next.hasOwnProperty(<span class="string">'end'</span>) ? head.next.end + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head.end === n) &#123;</span><br><span class="line">        <span class="keyword">var</span> del = head.next;</span><br><span class="line">        head.next = head.next.next;</span><br><span class="line">        del.next = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head.end + <span class="number">1</span> === n) &#123;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//20. Valid Parentheses</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validBraces</span>(<span class="params">braces</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> matches = &#123;</span><br><span class="line">        <span class="string">'('</span>: <span class="string">')'</span>,</span><br><span class="line">        <span class="string">'&#123;'</span>: <span class="string">'&#125;'</span>,</span><br><span class="line">        <span class="string">'['</span>: <span class="string">']'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> stack = [];</span><br><span class="line">    <span class="keyword">var</span> currentChar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; braces.length; i++) &#123;</span><br><span class="line">        currentChar = braces[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (matches[currentChar]) &#123; <span class="comment">// opening braces</span></span><br><span class="line">            stack.push(currentChar);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// closing braces</span></span><br><span class="line">            <span class="keyword">if</span> (currentChar !== matches[stack.pop()]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stack.length === <span class="number">0</span>; <span class="comment">// any unclosed braces left?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//21. Merge Two Sorted Lists</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="function"><span class="keyword">function</span>(<span class="params">h1, h2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!h1 || !h2) <span class="comment">// return the non-empty one</span></span><br><span class="line">        <span class="keyword">return</span> h1 || h2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h1.val &gt; h2.val) <span class="comment">// swap to make sure h1 is always smaller than h2</span></span><br><span class="line">        [h1, h2] = [h2, h1]</span><br><span class="line"></span><br><span class="line">    h1.next = mergeTwoLists(h1.next, h2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h1;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 22. Generate Parentheses</span></span><br><span class="line"><span class="keyword">var</span> generateParenthesis = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> leftArr = [],</span><br><span class="line">        rightArr = [],</span><br><span class="line">        count, result = [];</span><br><span class="line">    <span class="keyword">for</span> (count = <span class="number">0</span>; count &lt; n; count++) &#123;</span><br><span class="line">        leftArr.push(<span class="string">"("</span>);</span><br><span class="line">        rightArr.push(<span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">left, right, arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (right &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> i;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; right; i++) &#123;</span><br><span class="line">                    arr += <span class="string">")"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.push(arr);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        myFunction(left - <span class="number">1</span>, right + <span class="number">1</span>, arr + <span class="string">"("</span>);</span><br><span class="line">        <span class="keyword">if</span> (right &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            myFunction(left, right - <span class="number">1</span>, arr + <span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    myFunction(n - <span class="number">1</span>, <span class="number">1</span>, <span class="string">"("</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//24. Swap Nodes in Pairs</span></span><br><span class="line"><span class="keyword">var</span> swapPairs = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head || !head.next) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">let</span> one = head;</span><br><span class="line">    head = one.next;</span><br><span class="line">    <span class="keyword">while</span> (one &amp;&amp; one.next) &#123;</span><br><span class="line">        <span class="keyword">let</span> three = one.next.next;</span><br><span class="line">        one.next.next = one;</span><br><span class="line">        one.next = three &amp;&amp; three.next ? three.next : three;</span><br><span class="line">        one = three;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//25. Reverse Nodes in k-Group</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseKGroup</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> tail = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">        tail = tail.next;</span><br><span class="line">        <span class="keyword">if</span> (!tail) <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> next = tail.next;</span><br><span class="line">    tail.next = <span class="literal">null</span>;</span><br><span class="line">    reverse(head);</span><br><span class="line">    head.next = reverseKGroup(next, k);</span><br><span class="line">    <span class="keyword">return</span> tail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">curr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prev = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">        <span class="keyword">var</span> next = curr.next;</span><br><span class="line">        curr.next = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//27. Remove Element</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length = nums.length;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] === val) &#123;</span><br><span class="line">            nums.splice(i, <span class="number">1</span>);</span><br><span class="line">            length--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums.length;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//31. Next Permutation</span></span><br><span class="line"><span class="keyword">var</span> nextPermutation = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x &gt;= i; x--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[x] &gt; nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums, i - <span class="number">1</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(nums, i, nums.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">a, m, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = a[m];</span><br><span class="line">        a[m] = a[n];</span><br><span class="line">        a[n] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">a, m, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; m &lt; n; m++, n--) &#123;</span><br><span class="line">            swap(a, m, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//39. Combination Sum</span></span><br><span class="line"><span class="keyword">var</span> combinationSum = <span class="function"><span class="keyword">function</span>(<span class="params">candidates, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="built_in">Array</span>(target + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> t = <span class="number">0</span>; t &lt;= target; t++) &#123;</span><br><span class="line">        res[t] = <span class="keyword">new</span> <span class="built_in">Array</span>(candidates.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            res[t][i] = [];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// res[t][i] = solutions of subproblem of target t and pick from candidates[0..i];</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// initialize</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; candidates.length; i++) &#123;</span><br><span class="line">        res[<span class="number">0</span>][i] = [</span><br><span class="line">            []</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> t = <span class="number">1</span>; t &lt;= target; t++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            <span class="comment">// solutions not start with candidates[i]</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                res[t][i - <span class="number">1</span>].forEach(<span class="function"><span class="params">way</span> =&gt;</span> &#123;</span><br><span class="line">                    res[t][i].push(way);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// solutions start with candidates[i]</span></span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &lt;= t) &#123;</span><br><span class="line">                <span class="comment">// console.log(t + ", " + i);</span></span><br><span class="line">                res[t - candidates[i]][i].forEach(<span class="function"><span class="params">way</span> =&gt;</span> &#123;</span><br><span class="line">                    res[t][i].push(way.concat(candidates[i]));</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res[target][candidates.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//40. Combination Sum II</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combinationSum2</span>(<span class="params">candidates, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = []; <span class="comment">// [][]</span></span><br><span class="line">    <span class="keyword">var</span> prefix = [];</span><br><span class="line">    candidates.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    search(<span class="number">0</span>, target);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    <span class="comment">// rest为目标值</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">idx, rest</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rest === <span class="number">0</span> &amp;&amp; idx === candidates.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.push(prefix.slice());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rest &lt; <span class="number">0</span> || idx === candidates.length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        prefix.push(candidates[idx]);</span><br><span class="line">        search(idx + <span class="number">1</span>, rest - candidates[idx]);</span><br><span class="line">        prefix.pop();</span><br><span class="line">        <span class="keyword">if</span> (prefix[prefix.length - <span class="number">1</span>] !== candidates[idx]) &#123;</span><br><span class="line">            search(idx + <span class="number">1</span>, rest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//40. Combination Sum II</span></span><br><span class="line"><span class="keyword">var</span> combinationSum = <span class="function"><span class="keyword">function</span>(<span class="params">candidates, target</span>) </span>&#123;</span><br><span class="line">    candidates = candidates.sort(<span class="function"><span class="keyword">function</span>(<span class="params">val1, val2</span>) </span>&#123; <span class="comment">// step 1</span></span><br><span class="line">        <span class="keyword">return</span> val1 &gt; val2 ? <span class="number">1</span> : val1 &lt; val2 ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> solution = [];</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">var</span> pushVal = <span class="function"><span class="keyword">function</span>(<span class="params">solution, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; solution.length; ++i) &#123;</span><br><span class="line">            sum += solution[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (sum &gt; target) ? <span class="literal">true</span> : (sum == target &amp;&amp; solution.length == n) ? result.push(solution.slice(<span class="number">0</span>)) : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> backTracking = <span class="function"><span class="keyword">function</span>(<span class="params">k, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k != n) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; candidates.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; solution[k - <span class="number">1</span>] &gt; candidates[i]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                solution[k] = candidates[i];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (pushVal(solution, n)) &#123;</span><br><span class="line">                    solution.splice(solution.length - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">arguments</span>.callee(k + <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">                solution.splice(solution.length - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">Math</span>.floor(target / candidates[<span class="number">0</span>]); ++i) &#123;</span><br><span class="line">        backTracking(<span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//46. Permutations</span></span><br><span class="line"><span class="keyword">var</span> permute = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    backtrack(nums, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params">nums, res, n = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">        res.push(nums.slice(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = n; i &lt; nums.length; i++) &#123;</span><br><span class="line">        swap(nums, i, n);</span><br><span class="line">        backtrack(nums, res, n + <span class="number">1</span>);</span><br><span class="line">        swap(nums, i, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">nums, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//46. Permutations</span></span><br><span class="line"><span class="keyword">var</span> permute = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> results = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> permutations = <span class="function">(<span class="params">current, remaining</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (remaining.length &lt;= <span class="number">0</span>) results.push(current.slice());</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; remaining.length; i++) &#123; <span class="comment">// Loop through remaining elements</span></span><br><span class="line">                current.push(remaining[i]); <span class="comment">// Insert the iTH element onto the end of current</span></span><br><span class="line">                permutations(current.slice(), remaining.slice(<span class="number">0</span>, i).concat(remaining.slice(i + <span class="number">1</span>))); <span class="comment">// Recurse with inserted element removed</span></span><br><span class="line">                current.pop(); <span class="comment">// Remove last inserted element for next iteration</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    permutations([], nums);</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//48. Rotate Image</span></span><br><span class="line"><span class="keyword">var</span> rotate = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt; matrix[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = <span class="number">0</span>;</span><br><span class="line">            temp = matrix[i][j];</span><br><span class="line">            matrix[i][j] = matrix[j][i];</span><br><span class="line">            matrix[j][i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; matrix.length / <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = <span class="number">0</span>;</span><br><span class="line">            temp = matrix[i][j];</span><br><span class="line">            matrix[i][j] = matrix[i][matrix.length - <span class="number">1</span> - j];</span><br><span class="line">            matrix[i][matrix.length - <span class="number">1</span> - j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 50. Pow(x,n)</span></span><br><span class="line"><span class="keyword">var</span> myPow = <span class="function"><span class="keyword">function</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = n &gt; <span class="number">0</span> ? x : <span class="number">1</span> / x</span><br><span class="line">    n = <span class="built_in">Math</span>.abs(n)</span><br><span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">var</span> pow = <span class="function">(<span class="params">x, n</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> result</span><br><span class="line">        <span class="keyword">if</span> (map.has(n)) &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(n)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">var</span> m = <span class="built_in">Math</span>.floor(n / <span class="number">2</span>)</span><br><span class="line">        result = pow(x, m) * pow(x, n - m)</span><br><span class="line">        map.set(n, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pow(x, n)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> myPow = <span class="function"><span class="keyword">function</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> / myPow(x, -n)</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">0</span>) <span class="keyword">return</span> myPow(x * x, n / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> myPow(x * x, <span class="built_in">Math</span>.floor(n / <span class="number">2</span>)) * x</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//53. Maximum Subarray</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> max_so_far = -<span class="literal">Infinity</span>;</span><br><span class="line">    <span class="keyword">let</span> max_here = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> val = nums[i];</span><br><span class="line">        max_here = <span class="built_in">Math</span>.max(val, max_here + val);</span><br><span class="line">        max_so_far = <span class="built_in">Math</span>.max(max_here, max_so_far);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max_so_far;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += num</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum = num</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">Math</span>.max(ans, sum)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//56. Merge Intervals</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">intervals</span>) </span>&#123;</span><br><span class="line">    intervals.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.start - b.start);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> intervals.reduce(<span class="function">(<span class="params">acc, interval</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (acc.length === <span class="number">0</span>) &#123;</span><br><span class="line">            acc.push(interval);</span><br><span class="line">            <span class="keyword">return</span> acc;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            start: curStart,</span><br><span class="line">            end: curEnd</span><br><span class="line">        &#125; = interval;</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            start: lastStart,</span><br><span class="line">            end: lastEnd</span><br><span class="line">        &#125; = acc[acc.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (curStart &lt;= lastEnd) &#123;</span><br><span class="line">            <span class="keyword">const</span> newEnd = lastEnd &gt; curEnd ? lastEnd : curEnd;</span><br><span class="line">            acc[acc.length - <span class="number">1</span>] = <span class="keyword">new</span> Interval(lastStart, newEnd);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            acc.push(interval);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//61. Rotate List</span></span><br><span class="line"><span class="keyword">var</span> rotateRight = <span class="function"><span class="keyword">function</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> size = <span class="number">1</span>,</span><br><span class="line">        curr = head,</span><br><span class="line">        positions,</span><br><span class="line">        counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head === <span class="literal">null</span> || k &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (curr.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curr.next = head;</span><br><span class="line"></span><br><span class="line">    positions = <span class="built_in">Math</span>.abs(size - k % size) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    curr = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (counter &lt; positions) &#123;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    head = curr.next;</span><br><span class="line">    curr.next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//61. Rotate List</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotateRight</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> before = &#123;</span><br><span class="line">        next: head</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> prev = before;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. get total length of list</span></span><br><span class="line">    <span class="keyword">for</span> (; prev.next; prev = prev.next, len++);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. connect original tail to head</span></span><br><span class="line">    <span class="comment">// eg. 1 -&gt; 2 -&gt; 3 -&gt; null</span></span><br><span class="line">    <span class="comment">// =&gt;  [1] -&gt; 2 -&gt; 3 -&gt; [1]</span></span><br><span class="line">    prev.next = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find new head</span></span><br><span class="line">    <span class="keyword">for</span> (prev = before, k = len - k % len; k--; prev = prev.next);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cut the loop</span></span><br><span class="line">    <span class="keyword">let</span> newHead = prev.next;</span><br><span class="line">    prev.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 61. Rotate List</span></span><br><span class="line"><span class="keyword">var</span> rotateRight = <span class="function"><span class="keyword">function</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> size = <span class="number">1</span>,</span><br><span class="line">        curr = head,</span><br><span class="line">        positions,</span><br><span class="line">        counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (head === <span class="literal">null</span> || k &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">while</span> (curr.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    curr.next = head;</span><br><span class="line">    positions = <span class="built_in">Math</span>.abs(size - k % size) - <span class="number">1</span>;</span><br><span class="line">    curr = head;</span><br><span class="line">    <span class="keyword">while</span> (counter &lt; positions) &#123;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    head = curr.next;</span><br><span class="line">    curr.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//62. Unique Paths</span></span><br><span class="line"><span class="keyword">const</span> createTwoDimenssionsArray = <span class="function"><span class="keyword">function</span> <span class="title">createTwoDimenssionsArray</span>(<span class="params">row, col, default_val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.apply(<span class="literal">null</span>, <span class="built_in">Array</span>(row)).map(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.apply(<span class="literal">null</span>, <span class="built_in">Array</span>(col)).map(<span class="function"><span class="params">()</span> =&gt;</span> default_val);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> uniquePaths = <span class="function"><span class="keyword">function</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="built_in">Array</span>(m)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        dp[i] = <span class="built_in">Array</span>(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][i] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// with 2D array</span></span><br><span class="line"><span class="keyword">var</span> uniquePaths = <span class="function"><span class="keyword">function</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = createTwoDimenssionsArray(m, n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            res[i][j] = res[i - <span class="number">1</span>][j] + res[i][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// with 1D array</span></span><br><span class="line"><span class="keyword">var</span> uniquePaths = <span class="function"><span class="keyword">function</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, <span class="built_in">Array</span>(n)).map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            res[j] = res[j - <span class="number">1</span>] + res[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res[n - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//62. Unique Paths</span></span><br><span class="line"><span class="keyword">var</span> permutation = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b &gt; a / <span class="number">2</span>) &#123;</span><br><span class="line">        b = a - b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> mula = <span class="number">1</span>,</span><br><span class="line">        mulb = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; b; i++) &#123;</span><br><span class="line">        mula = mula * (a - i);</span><br><span class="line">        mulb = mulb * (b - i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mula / mulb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> uniquePaths = <span class="function"><span class="keyword">function</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> permutation(m - <span class="number">1</span> + n - <span class="number">1</span>, m - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//66. Plus One</span></span><br><span class="line"><span class="keyword">var</span> plusOne = <span class="function"><span class="keyword">function</span>(<span class="params">digits</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> length = digits.length;</span><br><span class="line">    <span class="keyword">let</span> i = length - <span class="number">1</span>;</span><br><span class="line">    digits[i]++;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; digits[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        digits[i] = <span class="number">0</span>;</span><br><span class="line">        digits[i - <span class="number">1</span>]++;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">0</span> &amp;&amp; digits[<span class="number">0</span>] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        digits[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        digits.unshift(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> digits;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> plusOne = <span class="function"><span class="keyword">function</span>(<span class="params">digits</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="number">0</span>;</span><br><span class="line">    digits[digits.length - <span class="number">1</span>]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = digits.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        digits[i] += s;</span><br><span class="line">        <span class="keyword">if</span> (digits[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            s = <span class="number">1</span>;</span><br><span class="line">            digits[i] = digits[i] - <span class="number">10</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s === <span class="number">1</span>) digits.unshift(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> digits;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> plusOne = <span class="function"><span class="keyword">function</span>(<span class="params">digits</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = digits.reverse()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] + <span class="number">1</span> === <span class="number">10</span>) &#123;</span><br><span class="line">            arr[i] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> (i === arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                arr[i + <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[i] = arr[i] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.reverse()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 反转数组竟然还快一点，有问题吧？？？</span></span><br><span class="line"><span class="keyword">var</span> plusOne = <span class="function"><span class="keyword">function</span>(<span class="params">digits</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = digits.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (digits[i] + <span class="number">1</span> === <span class="number">10</span>) &#123;</span><br><span class="line">            digits[i] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">                digits.unshift(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            digits[i] = digits[i] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> digits</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//67. Add Binary</span></span><br><span class="line"><span class="keyword">var</span> addBinary = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> i = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> j = b.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        carry += i &gt;= <span class="number">0</span> ? <span class="built_in">parseInt</span>(a[i--]) : <span class="number">0</span>;</span><br><span class="line">        carry += j &gt;= <span class="number">0</span> ? <span class="built_in">parseInt</span>(b[j--]) : <span class="number">0</span>;</span><br><span class="line">        result = carry % <span class="number">2</span> + result;</span><br><span class="line">        carry = <span class="built_in">parseInt</span>(carry / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> addBinary = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a1 = a.split(<span class="string">''</span>).reverse()</span><br><span class="line">    <span class="keyword">var</span> b1 = b.split(<span class="string">''</span>).reverse()</span><br><span class="line">    <span class="keyword">var</span> prefix = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (a1.length &lt; b1.length)[a1, b1] = [b1, a1]</span><br><span class="line">    <span class="keyword">var</span> res = a1.map(<span class="function">(<span class="params">n, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> num = (b1[i] ? <span class="built_in">parseInt</span>(b1[i]) : <span class="number">0</span>) + prefix + <span class="built_in">parseInt</span>(n)</span><br><span class="line">        prefix = num &gt;= <span class="number">2</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> num % <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (prefix === <span class="number">1</span>) res.push(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> res.reverse().join(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//73. Set Matrix Zeroes</span></span><br><span class="line"><span class="keyword">var</span> setZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = matrix.length;</span><br><span class="line">    <span class="keyword">var</span> l = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; r; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; l; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] === <span class="number">0</span> &amp;&amp; <span class="number">1</span> / matrix[i][j] === <span class="literal">Infinity</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; r; x++) &#123;</span><br><span class="line">                    matrix[x][j] = matrix[x][j] &amp;&amp; <span class="number">-0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> y = <span class="number">0</span>; y &lt; l; y++) &#123;</span><br><span class="line">                    matrix[i][y] = matrix[i][y] &amp;&amp; <span class="number">-0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//74. 搜索二维矩阵</span></span><br><span class="line"><span class="keyword">var</span> searchMatrix = <span class="function"><span class="keyword">function</span>(<span class="params">matrix, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[i].length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (target === <span class="built_in">Number</span>(matrix[i][<span class="number">0</span>]) || (<span class="built_in">Number</span>(matrix[i + <span class="number">1</span>]) &amp;&amp; target === <span class="built_in">Number</span>(matrix[i + <span class="number">1</span>][<span class="number">0</span>]))) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">if</span> (target &gt; <span class="built_in">Number</span>(matrix[i][<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Number</span>(matrix[i + <span class="number">1</span>][<span class="number">0</span>]) &gt; <span class="built_in">Number</span>(target)) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; matrix[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">Number</span>(matrix[i][j]) === target) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; matrix[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">Number</span>(matrix[i][j]) === target) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//75. Sort Colors</span></span><br><span class="line"><span class="keyword">var</span> sortColors = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    nums.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//78. 子集</span></span><br><span class="line"><span class="keyword">var</span> subsets = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            []</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> [num, ...restNums] = nums;</span><br><span class="line">    <span class="keyword">let</span> restSubSets = subsets(restNums);</span><br><span class="line">    <span class="keyword">return</span> restSubSets.map(<span class="function"><span class="params">set</span> =&gt;</span> [...set, num]).concat(restSubSets);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> subsets = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ws = [</span><br><span class="line">        []</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, len = ws.length; j &lt; len; ++j) &#123;</span><br><span class="line">            ws.push(ws[j].concat([nums[i]]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ws;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//82. Remove Duplicates from Sorted List II</span></span><br><span class="line"><span class="keyword">var</span> deleteDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> fast = head;</span><br><span class="line">    <span class="keyword">var</span> slow = dummy;</span><br><span class="line">    slow.next = fast;</span><br><span class="line">    <span class="keyword">while</span> (fast !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (fast.next !== <span class="literal">null</span> &amp;&amp; fast.val == fast.next.val) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (slow.next != fast) &#123;</span><br><span class="line">            slow.next = fast.next;</span><br><span class="line">            fast = slow.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//83. Remove Duplicates from Sorted List</span></span><br><span class="line"><span class="keyword">var</span> deleteDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (head.next &amp;&amp; head.next.val === head.val) &#123;</span><br><span class="line">        head.next = head.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    deleteDuplicates(head.next);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//86. Partition List</span></span><br><span class="line"><span class="keyword">var</span> partition = <span class="function"><span class="keyword">function</span>(<span class="params">head, x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> beforeHead = &#123;</span><br><span class="line">        next: head</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> insertPosition = beforeHead,</span><br><span class="line">        prev = beforeHead,</span><br><span class="line">        node = head;</span><br><span class="line">    <span class="keyword">while</span> (node) &#123;</span><br><span class="line">        <span class="keyword">var</span> next = node.next;</span><br><span class="line">        <span class="keyword">if</span> (node.val &lt; x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (insertPosition.next !== node) &#123;</span><br><span class="line">                prev.next = next;</span><br><span class="line">                node.next = insertPosition.next;</span><br><span class="line">                insertPosition.next = node;</span><br><span class="line">            &#125;</span><br><span class="line">            insertPosition = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev = node;</span><br><span class="line">        &#125;</span><br><span class="line">        node = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beforeHead.next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//88. Merge Sorted Array</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> nums1_index = m - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> nums2_index = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> new_tail = m + n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (nums2_index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1_index &gt;= <span class="number">0</span> &amp;&amp; nums1[nums1_index] &gt; nums2[nums2_index]) &#123;</span><br><span class="line">            nums1[new_tail] = nums1[nums1_index];</span><br><span class="line">            nums1_index--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums1[new_tail] = nums2[nums2_index];</span><br><span class="line">            nums2_index--;</span><br><span class="line">        &#125;</span><br><span class="line">        new_tail--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 90. Subsets II</span></span><br><span class="line"><span class="keyword">var</span> subsetsWithDup = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums === <span class="literal">null</span> || nums.length === <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res = [</span><br><span class="line">        []</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">var</span> map = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sort array to void duplicate</span></span><br><span class="line">    nums.sort();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (value <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> res) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = res[i].slice();</span><br><span class="line">            temp.push(value);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// transform into unique string using regx</span></span><br><span class="line">            <span class="keyword">var</span> str = temp.toString().replace(<span class="regexp">/\,/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// using object key to check duplicate</span></span><br><span class="line">            <span class="keyword">if</span> (!map[str]) &#123;</span><br><span class="line">                map[str] = <span class="literal">true</span>;</span><br><span class="line">                res.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> subsetsWithDup = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    nums.sort();</span><br><span class="line">    <span class="keyword">var</span> res = [</span><br><span class="line">            []</span><br><span class="line">        ],</span><br><span class="line">        count,</span><br><span class="line">        subRes,</span><br><span class="line">        preLength;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (nums[i + <span class="number">1</span>] &amp;&amp; nums[i + <span class="number">1</span>] == nums[i]) &#123;</span><br><span class="line">            count += <span class="number">1</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        preLength = res.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; preLength; j++) &#123;</span><br><span class="line">            subRes = res[j].slice();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">1</span>; x &lt;= count; x++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x &gt; <span class="number">0</span>) subRes.push(nums[i]);</span><br><span class="line">                res.push(subRes.slice());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//93. Restore IP Addresses</span></span><br><span class="line">restoreIP = <span class="function">(<span class="params">str, res = []</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.length == <span class="number">0</span> &amp;&amp; res.length == <span class="number">4</span>) <span class="keyword">return</span> <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">Math</span>.min(<span class="number">3</span>, str.length); i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">parseInt</span>(str.slice(<span class="number">0</span>, i)) &lt; <span class="number">256</span>)</span><br><span class="line">            restoreIP(str.slice(i), res.concat(str.slice(<span class="number">0</span>, i)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//95. Unique Binary Search Trees II</span></span><br><span class="line"><span class="keyword">var</span> copy = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span> node;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">new</span> TreeNode(node.val);</span><br><span class="line">    result.left = copy(node.left);</span><br><span class="line">    result.right = copy(node.right);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> generateTrees = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> levels = [<span class="literal">null</span>, [<span class="keyword">new</span> TreeNode(<span class="number">1</span>)]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> curLevel = levels[i] = [];</span><br><span class="line">        levels[i - <span class="number">1</span>].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> tmp = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">            tmp.left = copy(item);</span><br><span class="line">            curLevel.push(tmp);</span><br><span class="line">            <span class="keyword">let</span> source = copy(item);</span><br><span class="line">            <span class="keyword">let</span> node = source;</span><br><span class="line">            <span class="keyword">while</span> (node) &#123;</span><br><span class="line">                <span class="keyword">let</span> oldRight = node.right;</span><br><span class="line">                node.right = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                node.right.left = oldRight;</span><br><span class="line">                curLevel.push(copy(source));</span><br><span class="line">                node.right = oldRight;</span><br><span class="line">                node = node.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> levels[n];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//104. Maximum Depth of Binary Tree</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> left = maxDepth(root.left);</span><br><span class="line">    <span class="keyword">var</span> right = maxDepth(root.right);</span><br><span class="line">    <span class="keyword">return</span> (left == <span class="number">0</span> &amp;&amp; right == <span class="number">0</span>) ? <span class="number">1</span> + left + right : <span class="built_in">Math</span>.max(left, right) + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//110. Balanced Binary Tree</span></span><br><span class="line"><span class="keyword">var</span> isBalanced = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> helper(root) !== <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> left = helper(root.left);</span><br><span class="line">    <span class="keyword">var</span> right = helper(root.right);</span><br><span class="line">    <span class="keyword">if</span> (left === <span class="number">-1</span> || right === <span class="number">-1</span> || <span class="built_in">Math</span>.abs(left - right) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">Math</span>.max(left, right);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//111. Minimum Depth of Binary Tree</span></span><br><span class="line"><span class="keyword">var</span> minDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> left = minDepth(root.left);</span><br><span class="line">    <span class="keyword">var</span> right = minDepth(root.right);</span><br><span class="line">    <span class="keyword">return</span> (left == <span class="number">0</span> || right == <span class="number">0</span>) ? left + right + <span class="number">1</span> : <span class="built_in">Math</span>.min(left, right) + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//112. Path Sum</span></span><br><span class="line"><span class="keyword">var</span> hasPathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span> &amp;&amp; sum - root.val == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//113. Path Sum II</span></span><br><span class="line"><span class="keyword">var</span> pathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    helper(root, res, [], <span class="number">0</span>, sum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params">root, res, path, curSum, sum</span>) </span>&#123;</span><br><span class="line">    path.push(root.val);</span><br><span class="line">    curSum += root.val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (curSum === sum) &#123;</span><br><span class="line">            res.push(path.slice());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.left) &#123;</span><br><span class="line">        helper(root.left, res, path, curSum, sum);</span><br><span class="line">        path.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.right) &#123;</span><br><span class="line">        helper(root.right, res, path, curSum, sum);</span><br><span class="line">        path.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//119. Pascal's Triangle II</span></span><br><span class="line"><span class="keyword">var</span> getRow = <span class="function"><span class="keyword">function</span>(<span class="params">rowIndex</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tmp = [<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> output = [<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rowIndex == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rowIndex == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= rowIndex; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; tmp.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> addCount = tmp[j - <span class="number">1</span>] + tmp[j];</span><br><span class="line">            output.splice(j, <span class="number">1</span>, addCount);</span><br><span class="line">        &#125;</span><br><span class="line">        output.push(<span class="number">1</span>);</span><br><span class="line">        tmp = output.slice(<span class="number">0</span>, output.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//129. Sum Root to Leaf Numbers</span></span><br><span class="line"><span class="keyword">var</span> sumNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum(root, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n, s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n == <span class="literal">null</span>) ? <span class="number">0</span> :</span><br><span class="line">            ((n.right == <span class="literal">null</span> &amp;&amp; n.left == <span class="literal">null</span>) ? s * <span class="number">10</span> + n.val :</span><br><span class="line">                sum(n.left, s * <span class="number">10</span> + n.val) + sum(n.right, s * <span class="number">10</span> + n.val));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 136. Single Number</span></span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nums.reduce(<span class="function">(<span class="params">r, n</span>) =&gt;</span> r ^ n);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    nums.sort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hash = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hash[nums[i]]) &#123;</span><br><span class="line">            hash[nums[i]] += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hash[nums[i]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> h <span class="keyword">in</span> hash) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hash[h] === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> +h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//141. Linked List Cycle</span></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head || !head.next) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> visited = <span class="built_in">Symbol</span>();</span><br><span class="line">    <span class="keyword">while</span> (head) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head[visited]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head[visited] = <span class="literal">true</span>;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//141. Linked List Cycle</span></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> slow = head; <span class="comment">//slow pointer moves one step forward</span></span><br><span class="line">    <span class="keyword">var</span> fast = head; <span class="comment">//fast pointer moves two steps forward</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//check if we reached the end of the list, --&gt; not cyclic</span></span><br><span class="line">        <span class="keyword">if</span> (fast.next == <span class="literal">null</span> || fast.next.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="comment">//because fast moves as twice as fast, if it is cyclic,</span></span><br><span class="line">        <span class="comment">//it must reach slow at some point</span></span><br><span class="line">        <span class="keyword">if</span> (fast === slow) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//142. Linked List Cycle II</span></span><br><span class="line"><span class="keyword">var</span> detectCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> __special__ = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (head === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">helper</span>(<span class="params">head, headnext</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(head)</span></span><br><span class="line">        <span class="keyword">if</span> (head === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (headnext === __special__) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (headnext === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head.next = __special__</span><br><span class="line">        <span class="keyword">var</span> result = helper(headnext, headnext.next);</span><br><span class="line">        head.next = headnext;</span><br><span class="line">        <span class="keyword">if</span> (head === result) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> helper(head, head.next)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//147. Insertion Sort List</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSortList</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> node = head.next</span><br><span class="line">    <span class="keyword">while</span> (node) &#123;</span><br><span class="line">        <span class="keyword">let</span> prev = head</span><br><span class="line">        <span class="keyword">while</span> (prev !== node &amp;&amp; prev.val &lt;= node.val) &#123;</span><br><span class="line">            prev = prev.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (prev === node) &#123;</span><br><span class="line">            <span class="comment">// everyting remains sorted in this pass</span></span><br><span class="line">            node = node.next</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> temp1 = node.val</span><br><span class="line">        <span class="keyword">let</span> temp2 = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">while</span> (prev) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp1 === <span class="literal">null</span>) &#123;</span><br><span class="line">                temp1 = prev.val</span><br><span class="line">                prev.val = temp2</span><br><span class="line">                temp2 = <span class="literal">null</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp2 === <span class="literal">null</span>) &#123;</span><br><span class="line">                temp2 = prev.val</span><br><span class="line">                prev.val = temp1</span><br><span class="line">                temp1 = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (prev === node) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            prev = prev.next</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//148. Sort List</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeTwo</span>(<span class="params">one, two</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">var</span> head = dummy;</span><br><span class="line">    <span class="keyword">while</span> (one &amp;&amp; two) &#123;</span><br><span class="line">        <span class="keyword">if</span> (one.val &lt; two.val) &#123;</span><br><span class="line">            head.next = one;</span><br><span class="line">            one = one.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head.next = two;</span><br><span class="line">            two = two.next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (one) head.next = one;</span><br><span class="line">    <span class="keyword">if</span> (two) head.next = two;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortList</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head || !head.next) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">var</span> fast = head,</span><br><span class="line">        slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast.next &amp;&amp; fast.next.next) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> second = slow.next;</span><br><span class="line">    slow.next = <span class="literal">null</span>;</span><br><span class="line">    head = sortList(head);</span><br><span class="line">    second = sortList(second);</span><br><span class="line">    <span class="keyword">return</span> mergeTwo(head, second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//152. Maximum Product Subarray</span></span><br><span class="line"><span class="keyword">var</span> maxProduct = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> max = -<span class="literal">Infinity</span>,</span><br><span class="line">        min = <span class="number">0</span>,</span><br><span class="line">        cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> n <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            min = (min === <span class="number">0</span> ? <span class="number">0</span> : min * n);</span><br><span class="line">            cur = (cur &lt;= <span class="number">1</span> ? n : cur * n);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> tempMin = min;</span><br><span class="line">            min = (cur &lt;= <span class="number">1</span> ? n : cur * n);</span><br><span class="line">            cur = (tempMin === <span class="number">0</span> ? n : tempMin * n);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            min = <span class="number">0</span>;</span><br><span class="line">            cur = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        max = <span class="built_in">Math</span>.max(max, cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 160. Intersection of Two Linked Lists</span></span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="function"><span class="keyword">function</span>(<span class="params">headA, headB</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">set</span> = new Set();</span><br><span class="line">    while (headA || headB) &#123;</span><br><span class="line">        <span class="keyword">if</span> (headA) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">set</span>.has(headA.val)) &#123;</span><br><span class="line">                <span class="keyword">return</span> headA;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span>.add(headA.val);</span><br><span class="line">            headA = headA.next;</span><br><span class="line">        &#125;</span><br><span class="line">        if (headB) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">set</span>.has(headB.val)) &#123;</span><br><span class="line">                <span class="keyword">return</span> headB;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span>.add(headB.val);</span><br><span class="line">            headB = headB.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;;</span><br><span class="line">// 167. Two Sum II - Input array is sorted</span><br><span class="line">const twoSum = (numbers, target) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> table = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (table.has(numbers[i])) &#123;</span><br><span class="line">            <span class="keyword">return</span> [table.get(numbers[i]) + <span class="number">1</span>, i + <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        table.set((target - numbers[i]), i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Not Found'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(twoSum(numbers, <span class="number">6</span>));</span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">numbers, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> l = numbers.length,</span><br><span class="line">        i = <span class="number">0</span>,</span><br><span class="line">        j = l - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (numbers[i] + numbers[j] !== target) &#123;</span><br><span class="line">        numbers[i] + numbers[j] &lt; target ? i++ : j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [i + <span class="number">1</span>, j + <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">numbers, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> l = numbers.length,</span><br><span class="line">        i = <span class="number">0</span>,</span><br><span class="line">        j = l - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> sum = numbers[i] + numbers[j];</span><br><span class="line">    <span class="keyword">while</span> (sum !== target) &#123;</span><br><span class="line">        sum &lt; target ? i++ : j--;</span><br><span class="line">        sum = numbers[i] + numbers[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [i + <span class="number">1</span>, j + <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//172. Factorial Trailing Zeroes</span></span><br><span class="line"><span class="keyword">var</span> trailingZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cur = <span class="number">5</span>,</span><br><span class="line">        total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur &lt;= n) &#123;</span><br><span class="line">        total += <span class="built_in">Math</span>.floor(n / cur);</span><br><span class="line">        cur *= <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//189. Rotate Array</span></span><br><span class="line"><span class="keyword">var</span> rotate = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        nums.unshift(nums.pop());</span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> rotate = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = k; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        nums.unshift(nums.splice(n, <span class="number">1</span>)[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> rotate = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    k %= nums.length;</span><br><span class="line">    [].unshift.apply(nums, nums.splice(nums.length - k, k));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> rotate = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; k--) nums.unshift(nums.pop());</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//190. Reverse Bits</span></span><br><span class="line"><span class="keyword">var</span> reverseBits = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> b = (n.toString(<span class="number">2</span>)).split(<span class="string">''</span>).reverse();</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">parseInt</span>((b.join(<span class="string">''</span>) + <span class="string">'00000000000000000000000000000000000000000000000000000'</span>).substr(<span class="number">0</span>, <span class="number">32</span>), <span class="string">'2'</span>));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> reverseBits = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> binput = (n.toString(<span class="string">'2'</span>, n)).split(<span class="string">''</span>).reverse();</span><br><span class="line">    <span class="keyword">while</span> (binput.length &lt; <span class="number">32</span>) &#123;</span><br><span class="line">        binput.push(<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">parseInt</span>(binput.join(<span class="string">''</span>), <span class="string">'2'</span>));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//202. Happy Number</span></span><br><span class="line"><span class="keyword">var</span> isHappy = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> seen = &#123;&#125;;</span><br><span class="line">    <span class="keyword">while</span> (n !== <span class="number">1</span> &amp;&amp; !seen[n]) &#123;</span><br><span class="line">        seen[n] = <span class="literal">true</span>;</span><br><span class="line">        n = sumOfSquares(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n === <span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumOfSquares</span>(<span class="params">numString</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> numString.toString().split(<span class="string">''</span>).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">sum, num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum + <span class="built_in">Math</span>.pow(num, <span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//203. Remove Linked List Elements</span></span><br><span class="line"><span class="keyword">var</span> removeElements = <span class="function"><span class="keyword">function</span>(<span class="params">head, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> point = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">var</span> res = point;</span><br><span class="line">    <span class="keyword">while</span> (head !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head.val !== val) &#123;</span><br><span class="line">            point.next = head;</span><br><span class="line">            point = point.next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    point.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> res.next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//204. Count Primes</span></span><br><span class="line"><span class="keyword">var</span> countPrimes = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> notPrime = <span class="keyword">new</span> <span class="built_in">Array</span>(n);</span><br><span class="line">    notPrime.fill(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (notPrime[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">2</span>; i * j &lt; n; j++) &#123;</span><br><span class="line">            notPrime[i * j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//206. Reverse Linked List</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> head ? reverse(head, <span class="literal">null</span>) : head;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">node, previous</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newHead = node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// recursive call to tail</span></span><br><span class="line">    <span class="keyword">if</span> (node.next) newHead = reverse(node.next, node);</span><br><span class="line">    <span class="comment">// reverse from tail all the way up to head</span></span><br><span class="line">    node.next = previous;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//209. Minimum Size Subarray Sum</span></span><br><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="function"><span class="keyword">function</span>(<span class="params">s, nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> numsLen = nums.length,</span><br><span class="line">        sum = <span class="number">0</span>,</span><br><span class="line">        right = <span class="number">0</span>,</span><br><span class="line">        left = <span class="number">0</span>,</span><br><span class="line">        minLen = <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (right &lt; numsLen) &#123;</span><br><span class="line">        sum += nums[right];</span><br><span class="line">        <span class="keyword">if</span> (sum &gt;= s) &#123;</span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= s) &#123;</span><br><span class="line">                sum -= nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            minLen = <span class="built_in">Math</span>.min(right - left + <span class="number">2</span>, minLen);</span><br><span class="line">        &#125;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> minLen === <span class="built_in">Number</span>.MAX_SAFE_INTEGER ? <span class="number">0</span> : minLen;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> combinationSum = <span class="function"><span class="keyword">function</span>(<span class="params">candidates, target</span>) </span>&#123;</span><br><span class="line">    candidates = candidates.sort(<span class="function"><span class="keyword">function</span>(<span class="params">val1, val2</span>) </span>&#123; <span class="comment">// step 1</span></span><br><span class="line">        <span class="keyword">return</span> val1 &gt; val2 ? <span class="number">1</span> : val1 &lt; val2 ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// console.log("candidates=["+candidates+"];");</span></span><br><span class="line">    <span class="keyword">var</span> solution = [];</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">var</span> pushVal = <span class="function"><span class="keyword">function</span>(<span class="params">solution, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; solution.length; ++i) &#123;</span><br><span class="line">            sum += solution[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// console.log("solution=["+solution+"]; sum="+sum);</span></span><br><span class="line">        <span class="keyword">return</span> (sum &gt; target) ? <span class="literal">true</span> : (sum == target &amp;&amp; solution.length == n) ? result.push(solution.slice(<span class="number">0</span>)) : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> backTracking = <span class="function"><span class="keyword">function</span>(<span class="params">k, n</span>) </span>&#123; <span class="comment">// step 4</span></span><br><span class="line">        <span class="keyword">if</span> (k != n) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; candidates.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; solution[k - <span class="number">1</span>] &gt; candidates[i]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="comment">// Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).</span></span><br><span class="line">                solution[k] = candidates[i];</span><br><span class="line">                <span class="comment">// console.log("candidates["+i+"]="+candidates[i]+";");</span></span><br><span class="line">                <span class="keyword">if</span> (pushVal(solution, n)) &#123;</span><br><span class="line">                    solution.splice(solution.length - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">arguments</span>.callee(k + <span class="number">1</span>, n);</span><br><span class="line">                <span class="comment">// console.log("candidates["+i+"]="+candidates[i]+";");</span></span><br><span class="line">                solution.splice(solution.length - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">Math</span>.floor(target / candidates[<span class="number">0</span>]); ++i) &#123; <span class="comment">// step 3</span></span><br><span class="line">        backTracking(<span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//216. Combination Sum III</span></span><br><span class="line"><span class="keyword">var</span> combinationSum3 = <span class="function"><span class="keyword">function</span>(<span class="params">k, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> solution = []; <span class="comment">// length=k all possible Combination</span></span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">var</span> used = []; <span class="comment">// [1,2,...,9] each element can only be used once</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> backTracking = <span class="function"><span class="keyword">function</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m == k) &#123;</span><br><span class="line">            <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; solution.length; ++i) &#123;</span><br><span class="line">                sum += solution[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum == n) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(solution); <span class="comment">// print out all possible</span></span><br><span class="line">                result.push(solution.slice(<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (used[i]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="comment">// when true, express the element(used[i]) has been used</span></span><br><span class="line">                <span class="keyword">if</span> (m &gt; <span class="number">0</span> &amp;&amp; solution[m - <span class="number">1</span>] &gt; i) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="comment">// elements can only small to large order</span></span><br><span class="line">                used[i] = <span class="literal">true</span>;</span><br><span class="line">                solution[m] = i;</span><br><span class="line">                <span class="built_in">arguments</span>.callee(m + <span class="number">1</span>, n);</span><br><span class="line">                used[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    backTracking(<span class="number">0</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 217. Contains Duplicate</span></span><br><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    nums.sort();</span><br><span class="line">    <span class="comment">// duplicate numbers locate side by side in sorted array</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [i, n] <span class="keyword">of</span> nums.entries())</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; n === nums[i - <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hash = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hash[nums[i]]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hash[nums[i]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 219. Contains Duplicate II</span></span><br><span class="line"><span class="keyword">var</span> containsNearbyDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mapObj = &#123;&#125;,</span><br><span class="line">        cur,</span><br><span class="line">        numsLen = nums.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (cur = <span class="number">0</span>; cur &lt; numsLen; cur++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mapObj.hasOwnProperty(nums[cur])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur - mapObj[nums[cur]] &lt;= k) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mapObj[nums[cur]] = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mapObj[nums[cur]] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> containsNearbyDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dict = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> char = nums[i];</span><br><span class="line">        <span class="keyword">if</span> (!dict.hasOwnProperty(char)) &#123;</span><br><span class="line">            dict[char] = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> previousIndex = dict[char];</span><br><span class="line">            <span class="keyword">var</span> diff = i - previousIndex;</span><br><span class="line">            <span class="keyword">if</span> (diff &lt;= k) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            dict[char] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//220. Contains Duplicate III</span></span><br><span class="line"><span class="keyword">var</span> containsNearbyAlmostDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!nums || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> indices = [nums.length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// initialize indices array to [0,1,2,3,...].</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">        indices[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sort indices base on their values.</span></span><br><span class="line">    indices = indices.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[a] - nums[b];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// loop through the indices array.</span></span><br><span class="line">    <span class="keyword">var</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = indices[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; nums.length; ++j) &#123;</span><br><span class="line">            <span class="keyword">var</span> y = indices[j];</span><br><span class="line">            <span class="keyword">var</span> diff = nums[y] - nums[x];</span><br><span class="line">            <span class="keyword">var</span> di = y &gt; x ? y - x : x - y;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// stop if the difference exceeds t.</span></span><br><span class="line">            <span class="keyword">if</span> (diff &gt; t) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (di &lt;= k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//226. Invert Binary Tree</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    [root.left, root.right] = [invertTree(root.right), invertTree(root.left)]</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 228. Summary Ranges</span></span><br><span class="line"><span class="keyword">var</span> summaryRanges = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> start = <span class="number">0</span>, i = <span class="number">1</span>; i &lt;= nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] - nums[i - <span class="number">1</span>] &gt; <span class="number">1</span> || i === nums.length) &#123;</span><br><span class="line">            res.push(nums[start] + (start &lt; i - <span class="number">1</span> ? <span class="string">'-&gt;'</span> + nums[i - <span class="number">1</span>] : <span class="string">''</span>));</span><br><span class="line">            start = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> summaryRanges = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        a = nums[i];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; nums.length - <span class="number">1</span> &amp;&amp; nums[i + <span class="number">1</span>] - nums[i] == <span class="number">1</span>) i++;</span><br><span class="line">        <span class="keyword">if</span> (a != nums[i])</span><br><span class="line">            res[j++] = a + <span class="string">"-&gt;"</span> + nums[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res[j++] = a + <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> summaryRanges = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">if</span> (!nums.length)</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">1</span>) &#123;</span><br><span class="line">        result.push(<span class="string">''</span> + nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] + <span class="number">1</span> !== nums[<span class="number">1</span>])</span><br><span class="line">        result.push(nums[<span class="number">0</span>].toString());</span><br><span class="line">    <span class="keyword">while</span> (i &lt; nums.length) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = i;</span><br><span class="line">        <span class="keyword">while</span> (nums[i] === nums[i - <span class="number">1</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp !== i) &#123;</span><br><span class="line">            result.push(nums[tmp - <span class="number">1</span>] + <span class="string">"-&gt;"</span> + nums[i - <span class="number">1</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (i === nums.length - <span class="number">1</span>)</span><br><span class="line">                result.push(nums[i].toString());</span><br><span class="line">            <span class="keyword">if</span> (i &lt; nums.length - <span class="number">1</span> &amp;&amp; nums[i + <span class="number">1</span>] !== nums[i] + <span class="number">1</span>)</span><br><span class="line">                result.push(nums[i].toString());</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 229. Majority Element II</span></span><br><span class="line"><span class="keyword">var</span> majorityElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> numsLength = nums.length;</span><br><span class="line">    <span class="keyword">if</span> (numsLength === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> hasOb = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numsLength; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result.indexOf(nums[i]) !== <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!hasOb[nums[i]]) &#123;</span><br><span class="line">            hasOb[nums[i]] = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hasOb[nums[i]] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasOb[nums[i]] &gt; <span class="built_in">Math</span>.floor(numsLength / <span class="number">3</span>)) &#123;</span><br><span class="line">            result.push(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//231. Power of Two</span></span><br><span class="line"><span class="keyword">var</span> isPowerOfTwo = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt;= <span class="number">0</span> ? <span class="literal">false</span> : !(n &amp; (n - <span class="number">1</span>));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//233. Number of Digit One</span></span><br><span class="line"><span class="keyword">var</span> countDigitOne = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">10</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> base = <span class="built_in">Math</span>.pow(<span class="number">10</span>, n.toString().length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> answer = <span class="built_in">parseInt</span>(n / base);</span><br><span class="line">    <span class="keyword">return</span> countDigitOne(base - <span class="number">1</span>) * answer + (answer === <span class="number">1</span> ? (n - base + <span class="number">1</span>) : base) + countDigitOne(n % base);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> countDigitOne = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> len = n.toString().length;</span><br><span class="line">    <span class="keyword">var</span> base = <span class="built_in">Math</span>.pow(<span class="number">10</span>, len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> answer = <span class="built_in">parseInt</span>(n / base);</span><br><span class="line">    <span class="keyword">var</span> remainder = n % base;</span><br><span class="line">    <span class="keyword">var</span> oneInBase = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (answer === <span class="number">1</span>) &#123;</span><br><span class="line">        oneInBase = n - base + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        oneInBase = base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> countDigitOne(base - <span class="number">1</span>) * answer + oneInBase + countDigitOne(remainder);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//235. Lowest Common Ancestor of a Binary Search Tree</span></span><br><span class="line"><span class="keyword">var</span> lowestCommonAncestor = <span class="function"><span class="keyword">function</span>(<span class="params">root, p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; p.val &amp;&amp; root.val &gt; q.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; p.val &amp;&amp; root.val &lt; q.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//236. Lowest Common Ancestor of a Binary Tree</span></span><br><span class="line"><span class="keyword">var</span> lowestCommonAncestor = <span class="function"><span class="keyword">function</span>(<span class="params">root, p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (root === p || root === q) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">var</span> left = lowestCommonAncestor(root.left, p, q);</span><br><span class="line">    <span class="keyword">var</span> right = lowestCommonAncestor(root.right, p, q);</span><br><span class="line">    <span class="keyword">return</span> left !== <span class="literal">null</span> &amp;&amp; right !== <span class="literal">null</span> ? root : left == <span class="literal">null</span> ? right : left;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 237. Delete Node in a Linked List</span></span><br><span class="line"><span class="keyword">var</span> deleteNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node.val !== <span class="literal">undefined</span> &amp;&amp; node.next !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"></span><br><span class="line">        node.val = node.next.val;</span><br><span class="line">        node.next = node.next.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 238. Product of Array Except Self</span></span><br><span class="line"><span class="keyword">var</span> productExceptSelf = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = nums.length</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(n);</span><br><span class="line">    result.fill(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> left_fac = <span class="number">1</span>,</span><br><span class="line">        right_fac = <span class="number">1</span>,</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        result[i] *= left_fac</span><br><span class="line">        left_fac *= nums[i]</span><br><span class="line">        i++</span><br><span class="line">        result[n - i] *= right_fac</span><br><span class="line">        right_fac *= nums[n - i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> productExceptSelf = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">var</span> res_before = [];</span><br><span class="line">    <span class="keyword">var</span> res_after = [];</span><br><span class="line">    <span class="comment">//var res = [];</span></span><br><span class="line">    res_before[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    res_after[nums.length - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        res_before[i] = res_before[i - <span class="number">1</span>] * nums[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = nums.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        res_after[i] = res_after[i + <span class="number">1</span>] * nums[i + <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        res_after[i] = res_before[i] * res_after[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res_after;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//257. Binary Tree Paths</span></span><br><span class="line"><span class="keyword">var</span> binaryTreePaths = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!root.left &amp;&amp; !root.right) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">String</span>(root.val)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> subpaths = binaryTreePaths(root.left).concat(binaryTreePaths(root.right));</span><br><span class="line">    <span class="keyword">return</span> subpaths.map(<span class="function"><span class="params">path</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;root.val&#125;</span>-&gt;<span class="subst">$&#123;path&#125;</span>`</span> );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//258. Add Digits</span></span><br><span class="line"><span class="keyword">var</span> addDigits = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num == <span class="number">0</span> ? <span class="number">0</span> : (num % <span class="number">9</span> == <span class="number">0</span> ? <span class="number">9</span> : (num % <span class="number">9</span>));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//260. Single Number III</span></span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = nums.reduce(<span class="function">(<span class="params">t, n</span>) =&gt;</span> t ^ n, <span class="number">0</span>);</span><br><span class="line">    t = -t &amp; t;</span><br><span class="line">    <span class="keyword">return</span> nums.reduce(<span class="function">(<span class="params">r, n</span>) =&gt;</span> (n &amp; t) ? [r[<span class="number">0</span>] ^ n, r[<span class="number">1</span>]] : [r[<span class="number">0</span>], r[<span class="number">1</span>] ^ n], [<span class="number">0</span>, <span class="number">0</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> map = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = nums.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> key = nums[i];</span><br><span class="line">        <span class="keyword">if</span> (!map[key]) &#123;</span><br><span class="line">            map[key] = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">delete</span> map[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> ret = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j <span class="keyword">in</span> map) &#123;</span><br><span class="line">        ret.push(+j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//264. Ugly Number II</span></span><br><span class="line"><span class="keyword">var</span> nthUglyNumber = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = [<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> p2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> p3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> p5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> m, r2, r3, r5;</span><br><span class="line">    <span class="keyword">var</span> i = cache.length;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; n; i++) &#123;</span><br><span class="line">        r2 = cache[p2] * <span class="number">2</span>;</span><br><span class="line">        r3 = cache[p3] * <span class="number">3</span>;</span><br><span class="line">        r5 = cache[p5] * <span class="number">5</span>;</span><br><span class="line">        m = <span class="built_in">Math</span>.min(r2, r3, r5);</span><br><span class="line">        <span class="keyword">if</span> (m === r2) p2++;</span><br><span class="line">        <span class="keyword">if</span> (m === r3) p3++;</span><br><span class="line">        <span class="keyword">if</span> (m === r5) p5++;</span><br><span class="line">        cache[i] = m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache[n - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//279. Perfect Squares</span></span><br><span class="line"><span class="keyword">var</span> numSquares = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>);</span><br><span class="line">    dp.fill(<span class="built_in">Number</span>.MAX_VALUE);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">var</span> min = <span class="built_in">Number</span>.MAX_VALUE;</span><br><span class="line">        <span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i - j * j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            min = <span class="built_in">Math</span>.min(min, dp[i - j * j] + <span class="number">1</span>);</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i] = min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 283. Move Zeroes</span></span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] === <span class="number">0</span>) &#123;</span><br><span class="line">            nums.splice(j, <span class="number">1</span>);</span><br><span class="line">            nums.push(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> pZero = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pNum &lt; nums.length &amp;&amp; pZero &lt; nums.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[pZero] !== <span class="number">0</span>) &#123;</span><br><span class="line">            pZero++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[pNum] === <span class="number">0</span> || pNum &lt; pZero) &#123;</span><br><span class="line">            pNum++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pZero &lt; pNum) &#123;</span><br><span class="line">            <span class="keyword">var</span> aux = nums[pNum];</span><br><span class="line">            nums[pNum] = nums[pZero];</span><br><span class="line">            nums[pZero] = aux;</span><br><span class="line">            pZero++;</span><br><span class="line">            pNum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//328. Odd Even Linked List</span></span><br><span class="line"><span class="keyword">var</span> oddEvenList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!head || !head.next || !head.next.next) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!head.next.next.next) &#123;</span><br><span class="line">        head.next.next.next = head.next; <span class="comment">// 3 -&gt; 2 -&gt; 3</span></span><br><span class="line">        head.next = head.next.next; <span class="comment">// 1 -&gt; 3 -&gt; 2 -&gt; 3</span></span><br><span class="line">        head.next.next.next = <span class="literal">null</span>; <span class="comment">// 1 -&gt; 3 -&gt; 2</span></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> odd = head,</span><br><span class="line">        even = head.next,</span><br><span class="line">        first = even;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (even &amp;&amp; even.next) &#123;</span><br><span class="line"></span><br><span class="line">        odd.next = even.next;</span><br><span class="line">        even.next = even.next.next;</span><br><span class="line">        even = even.next;</span><br><span class="line">        odd = odd.next</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    odd.next = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//349. Intersection of Two Arrays</span></span><br><span class="line"><span class="keyword">var</span> intersection = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> intersection = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// collect unique intersections</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> n <span class="keyword">of</span> nums1)</span><br><span class="line">        <span class="keyword">if</span> (nums2.indexOf(n) !== <span class="number">-1</span>) intersection[n] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// extract intersections and convert to numbers</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(intersection).map(<span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">parseInt</span>(val));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> intersection = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">set</span> = new Set();</span><br><span class="line">    var len1 = nums1.length;</span><br><span class="line">    // var len2=nums2.length;</span><br><span class="line">    for (var i = 0; i &lt; len1; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums2.indexOf(nums1[i]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">set</span>.add(nums1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var result = Array.from(<span class="keyword">set</span>);</span><br><span class="line">    return result;</span><br><span class="line">&#125;;</span><br><span class="line">//345. Reverse Vowels of a String</span><br><span class="line">var reverseVowels = function(s) &#123;</span><br><span class="line">    <span class="keyword">var</span> inArray = <span class="function"><span class="keyword">function</span>(<span class="params">s, arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.toLowerCase() == arr[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> v = [<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inArray(s[i], v)) &#123;</span><br><span class="line">            arr.push(s[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inArray(s[i], v)) &#123;</span><br><span class="line">            res += arr[arr.length - x];</span><br><span class="line">            x++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res += s[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//350</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findSame</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len1 = arr1.length,</span><br><span class="line">        len2 = arr2.length;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">        j = <span class="number">0</span>,</span><br><span class="line">        result = [];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len1 &amp;&amp; j &lt; len2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr1[i] == arr2[j]) &#123;</span><br><span class="line">            result.push(arr1[i]);</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr1[i] &lt; arr2[j]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 389. Find the Difference</span></span><br><span class="line"><span class="keyword">var</span> findTheDifference = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    s = s.split(<span class="string">''</span>).sort().join(<span class="string">''</span>);</span><br><span class="line">    t = t.split(<span class="string">''</span>).sort().join(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; t.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(s[i] === t[i])) &#123;</span><br><span class="line">            str += t[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//397. Integer Replacement</span></span><br><span class="line"><span class="keyword">var</span> integerReplacement = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> integerReplacement(n / <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.min(integerReplacement(n - <span class="number">1</span>), integerReplacement(n + <span class="number">1</span>)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> integerReplacement = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    result.push(<span class="number">0</span>);</span><br><span class="line">    result.push(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            result[i] = result[i / <span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[i] = <span class="built_in">Math</span>.min(result[(i - <span class="number">1</span>) / <span class="number">2</span>], result[(i + <span class="number">1</span>) / <span class="number">2</span>]) + <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result[n];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//401. Binary Watch</span></span><br><span class="line"><span class="keyword">var</span> readBinaryWatch = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= <span class="number">59</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((countSetBit(i) + countSetBit(j)) === num) &#123;</span><br><span class="line">                result.push(i + (j &lt; <span class="number">10</span> ? <span class="string">':0'</span> : <span class="string">':'</span>) + j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countSetBit</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> binary = num.toString(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; binary.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (binary[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//415. Add Strings</span></span><br><span class="line"><span class="keyword">var</span> addStrings = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    num1 = num1.split(<span class="string">''</span>);</span><br><span class="line">    num2 = num2.split(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">var</span> i = num1.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> j = num2.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> up = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || up &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> sum = up;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            sum += <span class="built_in">parseInt</span>(num1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            sum += <span class="built_in">parseInt</span>(num2[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            sum -= <span class="number">10</span>;</span><br><span class="line">            up = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            up = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res = sum + res;</span><br><span class="line">        i--;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> addStrings = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num1 = num1.split(<span class="string">''</span>).reverse();</span><br><span class="line">    <span class="keyword">var</span> num2 = num2.split(<span class="string">''</span>).reverse();</span><br><span class="line">    <span class="keyword">var</span> len1 = num1.length;</span><br><span class="line">    <span class="keyword">var</span> len2 = num2.length;</span><br><span class="line">    <span class="keyword">var</span> jinwei = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">var</span> newRes;</span><br><span class="line">    <span class="keyword">if</span> (len1 &gt; len2) &#123;</span><br><span class="line">        num1.push(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = len2; j &lt;= len1; j++) &#123;</span><br><span class="line">            num2.push(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len1; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(num1[i]) + <span class="built_in">parseInt</span>(num2[i]) + jinwei;</span><br><span class="line">            <span class="keyword">if</span> (num &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                result.push(num);</span><br><span class="line">                jinwei = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.push(num - <span class="number">10</span>);</span><br><span class="line">                jinwei = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result[result.length - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            result.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        newRes = result.reverse().join(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        num2.push(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = len1; j &lt;= len2; j++) &#123;</span><br><span class="line">            num1.push(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len2; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(num1[i]) + <span class="built_in">parseInt</span>(num2[i]) + jinwei;</span><br><span class="line">            <span class="keyword">if</span> (num &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                result.push(num);</span><br><span class="line">                jinwei = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.push(num - <span class="number">10</span>);</span><br><span class="line">                jinwei = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result[result.length - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            result.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        newRes = result.reverse().join(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (newRes + <span class="string">""</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//437. Path Sum III</span></span><br><span class="line"><span class="keyword">var</span> pathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> findPath(root, sum) + pathSum(root.left, sum) + pathSum(root.right, sum);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findPath</span>(<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">if</span> (sum == root.val) res++;</span><br><span class="line">        res += findPath(root.left, sum - root.val);</span><br><span class="line">        res += findPath(root.right, sum - root.val);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 441. Arranging Coins</span></span><br><span class="line"><span class="keyword">var</span> arrangeCoins = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.sqrt(<span class="number">2</span> * n) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ((t + <span class="number">2</span>) * (t + <span class="number">1</span>) / <span class="number">2</span> &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span> t + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((t + <span class="number">2</span>) * (t + <span class="number">1</span>) / <span class="number">2</span> &gt; n) &#123;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 445. Add Two Numbers II</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> createf = <span class="function">(<span class="params">v, nxt</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> n = <span class="keyword">new</span> ListNode(v);</span><br><span class="line">            n.next = nxt;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;,</span><br><span class="line">        f = <span class="function">(<span class="params">l1, h1, l2, h2</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!l1.next &amp;&amp; !l2.next) &#123;</span><br><span class="line">                <span class="keyword">let</span> s = l1.val + l2.val;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    n: createf(s % <span class="number">10</span>),</span><br><span class="line">                    carry: <span class="built_in">Math</span>.floor(s / <span class="number">10</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> r = f(l1.next || h1,</span><br><span class="line">                    l1.next ? h1 : h2,</span><br><span class="line">                    l2.next || h2,</span><br><span class="line">                    l2.next ? h2 : h1),</span><br><span class="line">                ignore1 = r.ignore1 || !l1.next,</span><br><span class="line">                ignore2 = r.ignore2 || !l2.next,</span><br><span class="line">                sum = (ignore1 ? <span class="number">0</span> : l1.val) +</span><br><span class="line">                (ignore2 ? <span class="number">0</span> : l2.val) +</span><br><span class="line">                r.carry;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                n: (ignore1 &amp;&amp; ignore2 &amp;&amp; sum == <span class="number">0</span>) ? r.n : createf(sum % <span class="number">10</span>, r.n),</span><br><span class="line">                carry: <span class="built_in">Math</span>.floor(sum / <span class="number">10</span>),</span><br><span class="line">                ignore1: ignore1,</span><br><span class="line">                ignore2: ignore2</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        r = f(l1, l2, l2, l1);</span><br><span class="line">    <span class="keyword">return</span> r.carry == <span class="number">0</span> ? r.n : createf(r.carry, r.n);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 445. Add Two Numbers II</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s1 = [];</span><br><span class="line">    <span class="keyword">var</span> s2 = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l1 !== <span class="literal">null</span>) &#123;</span><br><span class="line">        s1.push(l1.val);</span><br><span class="line">        l1 = l1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (l2 !== <span class="literal">null</span>) &#123;</span><br><span class="line">        s2.push(l2.val);</span><br><span class="line">        l2 = l2.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (s1.length &gt; <span class="number">0</span> || s2.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.length &gt; <span class="number">0</span>) sum += s1.pop();</span><br><span class="line">        <span class="keyword">if</span> (s2.length &gt; <span class="number">0</span>) sum += s2.pop();</span><br><span class="line">        list.val = sum % <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//&gt;&gt;表示要向右移动</span></span><br><span class="line">        <span class="keyword">var</span> head = <span class="keyword">new</span> ListNode((sum / <span class="number">10</span>) &gt;&gt; <span class="number">0</span>);</span><br><span class="line">        head.next = list;</span><br><span class="line">        list = head;</span><br><span class="line">        sum = (sum / <span class="number">10</span>) &gt;&gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.val === <span class="number">0</span> ? list.next : list;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//447. Number of Boomerangs</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numberOfBoomerangs</span>(<span class="params">points</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    points.forEach(<span class="function"><span class="params">p1</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> map = &#123;&#125;;</span><br><span class="line">        points.forEach(<span class="function"><span class="params">p2</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> dist = <span class="built_in">Math</span>.pow(p1[<span class="number">0</span>] - p2[<span class="number">0</span>], <span class="number">2</span>) + <span class="built_in">Math</span>.pow(p1[<span class="number">1</span>] - p2[<span class="number">1</span>], <span class="number">2</span>);</span><br><span class="line">            res += (map[dist] || <span class="number">0</span>) * <span class="number">2</span>;</span><br><span class="line">            map[dist] = (map[dist] || <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//447. Number of Boomerangs</span></span><br><span class="line"><span class="keyword">var</span> numberOfBoomerangs = <span class="function"><span class="keyword">function</span>(<span class="params">points</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = points.length;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> jk = <span class="number">0</span>; jk &lt; len; jk++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i === jk) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> d = getDistance(points[i], points[jk]);</span><br><span class="line">            <span class="keyword">if</span> (map.get(d)) &#123;</span><br><span class="line">                map.set(d, map.get(d) + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.set(d, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">            count += m * (m - <span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDistance</span>(<span class="params">i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (i[<span class="number">0</span>] - j[<span class="number">0</span>]) * (i[<span class="number">0</span>] - j[<span class="number">0</span>]) + (i[<span class="number">1</span>] - j[<span class="number">1</span>]) * (i[<span class="number">1</span>] - j[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 448. Find All Numbers Disappeared in an Array</span></span><br><span class="line"><span class="keyword">var</span> findDisappearedNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rtn = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>),</span><br><span class="line">        <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!s.has(i)) rtn.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rtn;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 451. Sort Characters By Frequency</span></span><br><span class="line"><span class="keyword">var</span> frequencySort = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> tally = str</span><br><span class="line">        .split(<span class="string">''</span>)</span><br><span class="line">        .reduce(<span class="function">(<span class="params">obj, key</span>) =&gt;</span> &#123;</span><br><span class="line">            obj[key] ? obj[key]++ : obj[key] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span></span><br><span class="line">        .keys(tally)</span><br><span class="line">        .map(<span class="function"><span class="params">key</span> =&gt;</span> key.repeat(tally[key]))</span><br><span class="line">        .sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b.length - a.length)</span><br><span class="line">        .join(<span class="string">''</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> frequencySort = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> map = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> stringArray = s.split(<span class="string">''</span>);</span><br><span class="line">    <span class="comment">//put the character count into a map</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; stringArray.length; i++) &#123;</span><br><span class="line">        map[stringArray[i]] = map[stringArray[i]] + <span class="number">1</span> || <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sort the map first, then push into the result</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(map).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> map[b] - map[a]).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; map[v]; j++) &#123;</span><br><span class="line">            result += v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> frequencySort = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chars = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="keyword">let</span> freqMap = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> ch = s.charAt(i);</span><br><span class="line">        chars.add(ch);</span><br><span class="line">        <span class="keyword">if</span> (!freqMap.hasOwnProperty(ch)) freqMap[ch] = <span class="number">0</span>;</span><br><span class="line">        freqMap[ch]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> bucket = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> chars) &#123;</span><br><span class="line">        <span class="keyword">let</span> freq = freqMap[ch];</span><br><span class="line">        <span class="keyword">if</span> (!bucket.hasOwnProperty(freq)) bucket[freq] = [];</span><br><span class="line">        bucket[freq].push(<span class="keyword">new</span> <span class="built_in">Array</span>(freq + <span class="number">1</span>).join(ch));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = s.length; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bucket.hasOwnProperty(i)) &#123;</span><br><span class="line">            result.push(...bucket[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//453. Minimum Moves to Equal Array Elements</span></span><br><span class="line"><span class="keyword">var</span> minMoves = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nums.reduce(<span class="function">(<span class="params">s, n</span>) =&gt;</span> s + n, -nums.length * <span class="built_in">Math</span>.min(...nums))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//454. 4Sum II</span></span><br><span class="line"><span class="keyword">var</span> fourSumCount = <span class="function"><span class="keyword">function</span>(<span class="params">A, B, C, D</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; C.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; D.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> sum = C[i] + D[j];</span><br><span class="line">            mp[sum] = mp[sum] + <span class="number">1</span> || <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; B.length; j++) &#123;</span><br><span class="line">            res += mp[<span class="number">-1</span> * (A[i] + B[j])] || <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 454. 4Sum II</span></span><br><span class="line"><span class="keyword">var</span> fourSumCount = <span class="function"><span class="keyword">function</span>(<span class="params">A, B, C, D</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; C.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; D.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> sum = C[i] + D[j];</span><br><span class="line">            mp[sum] = mp[sum] + <span class="number">1</span> || <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; B.length; j++) &#123;</span><br><span class="line">            res += mp[<span class="number">-1</span> * (A[i] + B[j])] || <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//461. Hamming Distance</span></span><br><span class="line"><span class="keyword">var</span> hammingDistance = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x ^ y).toString(<span class="number">2</span>).replace(<span class="regexp">/0/g</span>, <span class="string">''</span>).length;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//462. Minimum Moves to Equal Array Elements II</span></span><br><span class="line"><span class="keyword">var</span> minMoves2 = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    nums.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor(nums.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        res += <span class="built_in">Math</span>.abs(nums[i] - nums[mid]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 463 Island Perimeter</span></span><br><span class="line"><span class="keyword">var</span> islandPerimeter = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> rows = grid.length;</span><br><span class="line">    <span class="keyword">const</span> cols = grid[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> perimeter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> col = <span class="number">0</span>; col &lt; cols; col++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!grid[row][col]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            perimeter += <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// abstract the number of adjacent island</span></span><br><span class="line">            <span class="keyword">if</span> (row &gt; <span class="number">0</span> &amp;&amp; grid[row - <span class="number">1</span>][col]) perimeter--;</span><br><span class="line">            <span class="keyword">if</span> (col &gt; <span class="number">0</span> &amp;&amp; grid[row][col - <span class="number">1</span>]) perimeter--;</span><br><span class="line">            <span class="keyword">if</span> (row &lt; rows - <span class="number">1</span> &amp;&amp; grid[row + <span class="number">1</span>][col]) perimeter--;</span><br><span class="line">            <span class="keyword">if</span> (col &lt; cols - <span class="number">1</span> &amp;&amp; grid[row][col + <span class="number">1</span>]) perimeter--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> perimeter;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//475. Heaters</span></span><br><span class="line"><span class="keyword">var</span> findRadius = <span class="function"><span class="keyword">function</span>(<span class="params">houses, heaters</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// We need to find the max of min distance</span></span><br><span class="line">    heaters.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; houses.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> curr = closestHeaterDistance(houses[i], heaters, <span class="number">0</span>, heaters.length - <span class="number">1</span>);</span><br><span class="line">        max = <span class="built_in">Math</span>.max(max, curr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closestHeaterDistance</span>(<span class="params">house, heaters, low, high</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low === high) <span class="keyword">return</span> <span class="built_in">Math</span>.abs(house - heaters[low]);</span><br><span class="line">    <span class="keyword">let</span> middle = <span class="built_in">Math</span>.floor((low + high) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (house &lt; heaters[middle]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (middle === <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">Math</span>.abs(house - heaters[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (house &gt; heaters[middle - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.min(<span class="built_in">Math</span>.abs(house - heaters[middle]), <span class="built_in">Math</span>.abs(house - heaters[middle - <span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> closestHeaterDistance(house, heaters, low, middle - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (house &gt; heaters[middle]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (middle === heaters.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">Math</span>.abs(house - heaters[heaters.length - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (house &lt; heaters[middle + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.min(<span class="built_in">Math</span>.abs(house - heaters[middle]), <span class="built_in">Math</span>.abs(house - heaters[middle + <span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> closestHeaterDistance(house, heaters, middle + <span class="number">1</span>, high)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//475. Heaters</span></span><br><span class="line"><span class="keyword">var</span> findRadius = <span class="function"><span class="keyword">function</span>(<span class="params">houses, heaters</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> radius = houses.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [x, <span class="number">0</span>, <span class="built_in">Number</span>.MAX_VALUE];</span><br><span class="line">    &#125;).concat(heaters.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [x, <span class="number">1</span>, <span class="built_in">Number</span>.MAX_VALUE]</span><br><span class="line">    &#125;));</span><br><span class="line">    radius.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] &gt; b[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[<span class="number">0</span>] &lt; b[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">updateRadius</span>(<span class="params">fromLeftToRight</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> indices = [];</span><br><span class="line">        <span class="keyword">var</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; radius.length; i++)</span><br><span class="line">            indices.push(i);</span><br><span class="line">        <span class="keyword">if</span> (!fromLeftToRight) &#123;</span><br><span class="line">            indices.reverse();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> curHeater = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; indices.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> idx = indices[i];</span><br><span class="line">            <span class="keyword">if</span> (radius[idx][<span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">                curHeater = radius[idx][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (curHeater)</span><br><span class="line">                radius[idx][<span class="number">2</span>] = <span class="built_in">Math</span>.min(radius[idx][<span class="number">2</span>], <span class="built_in">Math</span>.abs(radius[idx][<span class="number">0</span>] - curHeater));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updateRadius(<span class="literal">true</span>);</span><br><span class="line">    updateRadius(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; radius.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (radius[i][<span class="number">1</span>] === <span class="number">0</span>) &#123;</span><br><span class="line">            ret = <span class="built_in">Math</span>.max(ret, radius[i][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//476. Number Complement</span></span><br><span class="line"><span class="keyword">var</span> findComplement = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newN;</span><br><span class="line">    <span class="keyword">var</span> n;</span><br><span class="line">    newN = (num.toString(<span class="number">2</span>)).split(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; newN.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newN[i] == <span class="string">'1'</span>) &#123;</span><br><span class="line">            result[i] = <span class="string">'0'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[i] = <span class="string">'1'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    n = <span class="built_in">parseInt</span>(result.join(<span class="string">''</span>), <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//495. Teemo Attacking</span></span><br><span class="line"><span class="keyword">var</span> findPoisonedDuration = <span class="function"><span class="keyword">function</span>(<span class="params">timeSeries, duration</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timeSeries === <span class="literal">null</span> || timeSeries.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; timeSeries.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timeSeries[i + <span class="number">1</span>] - timeSeries[i] &gt;= duration) &#123;</span><br><span class="line">            count += duration;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count += timeSeries[i + <span class="number">1</span>] - timeSeries[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count + duration;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 500. Keyboard Row</span></span><br><span class="line"><span class="keyword">var</span> findWords = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> resultWords = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isSameRow(words[i]))</span><br><span class="line">            resultWords.push(words[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultWords;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> isSameRow = <span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rowNumber = getKeyboardRow(word.charAt(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; word.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (getKeyboardRow(word.charAt(i)) !== rowNumber)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getKeyboardRow = <span class="function"><span class="keyword">function</span>(<span class="params">char</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentChar = char.toLowerCase();</span><br><span class="line">    <span class="keyword">var</span> charRowMap = &#123;</span><br><span class="line">        <span class="string">"q"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"w"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"e"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"r"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"t"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"y"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"u"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"i"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"o"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"p"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"a"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"s"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"d"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"f"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"g"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"h"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"j"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"k"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"l"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"z"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">"x"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">"c"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">"v"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">"b"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">"n"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">"m"</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> charRowMap[currentChar];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 500. Keyboard Row</span></span><br><span class="line"><span class="keyword">var</span> findWords = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wordsNew = [],</span><br><span class="line">        result = [],</span><br><span class="line">        keyboard = [<span class="string">"qwertyuiop"</span>, <span class="string">"asdfghjkl"</span>, <span class="string">"zxcvbnm"</span>];</span><br><span class="line">    words.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ele, index</span>) </span>&#123;</span><br><span class="line">        wordsNew[index] = ele.toLowerCase()</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    wordsNew.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ele, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> flag1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ele.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (keyboard[j].indexOf(ele[i]) == <span class="number">-1</span>) &#123;</span><br><span class="line">                    flag1++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag1 === <span class="number">0</span>) &#123;</span><br><span class="line">                result.push(words[index])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 500. Keyboard Row</span></span><br><span class="line"><span class="keyword">var</span> findWords = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        top: <span class="string">'qwertyuiop'</span>,</span><br><span class="line">        center: <span class="string">'asdfghjkl'</span>,</span><br><span class="line">        bottom: <span class="string">'zxcvbnm'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> words) &#123;</span><br><span class="line">        <span class="keyword">let</span> vals = val.toLowerCase();</span><br><span class="line">        <span class="keyword">let</span> target;</span><br><span class="line">        <span class="keyword">let</span> record = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="built_in">Object</span>.values(obj)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (~v.indexOf(vals[<span class="number">0</span>])) target = v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> alpha <span class="keyword">of</span> vals) &#123;</span><br><span class="line">            <span class="keyword">if</span> (~target.indexOf(alpha)) record += <span class="string">'1'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (record.length === vals.length) arr.push(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 500. Keyboard Row</span></span><br><span class="line"><span class="keyword">var</span> findWords = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        top: <span class="string">'qwertyuiop'</span>,</span><br><span class="line">        center: <span class="string">'asdfghjkl'</span>,</span><br><span class="line">        bottom: <span class="string">'zxcvbnm'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> words) &#123;</span><br><span class="line">        <span class="keyword">let</span> vals = val.toLowerCase();</span><br><span class="line">        <span class="keyword">let</span> target;</span><br><span class="line">        <span class="keyword">let</span> alpha = vals.split(<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="built_in">Object</span>.values(obj)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (~v.indexOf(vals[<span class="number">0</span>])) target = v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (alpha.every(<span class="function"><span class="params">value</span> =&gt;</span> ~target.indexOf(value))) arr.push(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 500. Keyboard Row</span></span><br><span class="line"><span class="keyword">var</span> findWords = <span class="function">(<span class="params">words</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">Map</span> = &#123;</span><br><span class="line">        q: <span class="number">1</span>,</span><br><span class="line">        w: <span class="number">1</span>,</span><br><span class="line">        e: <span class="number">1</span>,</span><br><span class="line">        r: <span class="number">1</span>,</span><br><span class="line">        t: <span class="number">1</span>,</span><br><span class="line">        y: <span class="number">1</span>,</span><br><span class="line">        u: <span class="number">1</span>,</span><br><span class="line">        i: <span class="number">1</span>,</span><br><span class="line">        o: <span class="number">1</span>,</span><br><span class="line">        p: <span class="number">1</span>,</span><br><span class="line">        a: <span class="number">2</span>,</span><br><span class="line">        s: <span class="number">2</span>,</span><br><span class="line">        d: <span class="number">2</span>,</span><br><span class="line">        f: <span class="number">2</span>,</span><br><span class="line">        g: <span class="number">2</span>,</span><br><span class="line">        h: <span class="number">2</span>,</span><br><span class="line">        j: <span class="number">2</span>,</span><br><span class="line">        k: <span class="number">2</span>,</span><br><span class="line">        l: <span class="number">2</span>,</span><br><span class="line">        z: <span class="number">3</span>,</span><br><span class="line">        x: <span class="number">3</span>,</span><br><span class="line">        c: <span class="number">3</span>,</span><br><span class="line">        v: <span class="number">3</span>,</span><br><span class="line">        b: <span class="number">3</span>,</span><br><span class="line">        n: <span class="number">3</span>,</span><br><span class="line">        m: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> RightWords = []</span><br><span class="line">    words.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.length == <span class="number">1</span>) RightWords.push(item)</span><br><span class="line">        temp = <span class="built_in">Map</span>[item[<span class="number">0</span>].toLowerCase()]</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>, length = item.length; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="built_in">Map</span>[item[i].toLowerCase()]) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == item.length - <span class="number">1</span>) &#123;</span><br><span class="line">                RightWords.push(item)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> RightWords;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">String</span>.prototype.reverse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 501. Find Mode in Binary Search Tree</span></span><br><span class="line"><span class="keyword">var</span> findMode = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> tem;</span><br><span class="line">    <span class="keyword">var</span> temCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> maxCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> pNode = root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> pLeft = pNode.left;</span><br><span class="line">        <span class="keyword">if</span> (pLeft) &#123;</span><br><span class="line">            <span class="keyword">while</span> (pLeft.right !== <span class="literal">null</span> &amp;&amp; pLeft.right !== pNode) &#123;</span><br><span class="line">                pLeft = pLeft.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pLeft.right === <span class="literal">null</span>) &#123;</span><br><span class="line">                pLeft.right = pNode;</span><br><span class="line">                pNode = pNode.left;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pLeft.right = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pNode.val === tem) &#123;</span><br><span class="line">            temCount++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (tem !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (temCount &gt; maxCount) &#123;</span><br><span class="line">                    res.length = <span class="number">0</span>;</span><br><span class="line">                    maxCount = temCount;</span><br><span class="line">                    res.push(tem);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temCount === maxCount) &#123;</span><br><span class="line">                    res.push(tem);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            tem = pNode.val;</span><br><span class="line">            temCount = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pNode = pNode.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (temCount &gt; maxCount) &#123;</span><br><span class="line">        res.length = <span class="number">0</span>;</span><br><span class="line">        maxCount = temCount;</span><br><span class="line">        res.push(tem);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temCount === maxCount) &#123;</span><br><span class="line">        res.push(tem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//521. Longest Uncommon Subsequence I</span></span><br><span class="line"><span class="keyword">var</span> findLUSlength = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a == b ? <span class="number">-1</span> : <span class="built_in">Math</span>.max(a.length, b.length);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//525. Contiguous Array</span></span><br><span class="line"><span class="keyword">var</span> findMaxLength = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Could save some space by modifying nums but we still use O(n)</span></span><br><span class="line">    <span class="keyword">let</span> sums = [<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> maxIndexes = &#123;</span><br><span class="line">        <span class="string">'0'</span>: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        sums.push(sums[i] + (nums[i] || <span class="number">-1</span>));</span><br><span class="line">        maxIndexes[sums[i + <span class="number">1</span>]] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sums.length; i++) &#123;</span><br><span class="line">        max = <span class="built_in">Math</span>.max(max, maxIndexes[sums[i]] - i);</span><br><span class="line">        <span class="keyword">if</span> (max &gt;= sums.length - i - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//530. Minimum Absolute Difference in BST</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMinimumDifference</span>(<span class="params">root, vals = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    prev: undefined,</span></span></span><br><span class="line"><span class="function"><span class="params">    min: Number.MAX_VALUE</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getMinimumDifference(root.left, vals);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vals.prev &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        vals.min = <span class="built_in">Math</span>.min(<span class="built_in">Math</span>.abs(vals.prev - root.val), vals.min);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vals.prev = root.val;</span><br><span class="line"></span><br><span class="line">    getMinimumDifference(root.right, vals);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> vals.min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 532. K-diff Pairs in an Array</span></span><br><span class="line"><span class="keyword">var</span> findPairs = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> seen = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> pairs = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> nums.reduce(<span class="function">(<span class="params">count, a</span>) =&gt;</span> &#123;</span><br><span class="line">        count += isNewPair(seen, pairs, a, a - k) + isNewPair(seen, pairs, a, a + k);</span><br><span class="line">        seen[a] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNewPair</span>(<span class="params">seen, pairs, a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!seen[b]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> key = a &lt; b ? a + <span class="string">','</span> + b : b + <span class="string">','</span> + a;</span><br><span class="line">    <span class="keyword">if</span> (!pairs[key]) &#123;</span><br><span class="line">        pairs[key] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//541. Reverse String II</span></span><br><span class="line"><span class="keyword">var</span> reverseStr = <span class="function"><span class="keyword">function</span>(<span class="params">s, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = s.length;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span> * k) &#123; <span class="comment">// Check if length is less than 2*k</span></span><br><span class="line">        <span class="keyword">if</span> (len &gt;= k)</span><br><span class="line">            <span class="comment">// reverse the first k chars and leave the rest as orig</span></span><br><span class="line">            <span class="keyword">return</span> s.slice(<span class="number">0</span>, k).reverse() + s.slice(k)</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> s.reverse(); <span class="comment">// if less than k, return orig</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.slice(<span class="number">0</span>, k).reverse() + <span class="comment">// reverse first k chars</span></span><br><span class="line">        s.slice(k, <span class="number">2</span> * k) + <span class="comment">// leave chars from k to 2k as orig</span></span><br><span class="line">        reverseStr(s.slice(<span class="number">2</span> * k), k); <span class="comment">// recurs</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//557. Reverse Words in a String III</span></span><br><span class="line"><span class="keyword">var</span> reverseWords = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newS = s.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; newS.length; i++) &#123;</span><br><span class="line">        result.push(newS[i].split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.join(<span class="string">' '</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>浏览器缓存机制</title>
    <url>/2020/01/03/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>工作中遇到一个问题，请求的接口貌似被缓存住了，显示provisional headers are shown<br>如何让我们的浏览器显示from cache 字样呢？但是接口显示的是cache：no-cache</p>
<a id="more"></a>

<p>1、 复现情况<br>2、 解决被隐藏的情况</p>
<p>HTTP 提供了用来对已缓存对象进行再验证的工具，最常用的是If-Modified-Since 首部，</p>
<h3 id="过期日期和使用期"><a href="#过期日期和使用期" class="headerlink" title="过期日期和使用期"></a>过期日期和使用期</h3><p>Cache-Control 首部和 Expires 首部，HTTP让每个原始服务器向每个文档附加一个”过期时间”</p>
<h3 id="服务器再验证"><a href="#服务器再验证" class="headerlink" title="服务器再验证"></a>服务器再验证</h3><blockquote>
<p>说明缓存需要询问原始服务器文档是否发生了变化</p>
</blockquote>
<ul>
<li>如果再验证显示内容发生了变化，缓存会获取一份新的文档副本，并将其存在旧文档的位置上，然后将文档发送给客户端</li>
<li>如果再验证显示内容没有发生变化，缓存只需要获取新的首部，包括一个新的过期时间，并对缓存首部进行更新</li>
</ul>
<h3 id="条件方法再验证"><a href="#条件方法再验证" class="headerlink" title="条件方法再验证"></a>条件方法再验证</h3><blockquote>
<p>HTTP 允许缓存向原始服务器发送一个条件”GET”，请求服务器只在文档与缓存中现有的副本不同时，才回送对象主体</p>
</blockquote>
<h4 id="HTTP定义的5个条件首部"><a href="#HTTP定义的5个条件首部" class="headerlink" title="HTTP定义的5个条件首部"></a>HTTP定义的5个条件首部</h4><ul>
<li><p>If-Modified-Since:<date> Date再验证</p>
<ul>
<li>自指定日期后，文档被修改，If-Modified-Since 为真。GET 会成功执行，携带新首部的新文档返回给缓存，新首部会包含一个新的过期时间</li>
<li>自指定日期后，文档未修改，会想客户端返回304 not modified响应报文。</li>
<li>原始服务器会将最后的修改日期附加到所提供的文档上去</li>
</ul>
</li>
<li><p>If-None-Match:<tags> 实体标签再验证</p>
<ul>
<li>有些文档看你会被周期性重写，但实际包含的数据通常一样。尽管内容没有变化，但是修改日期会发生变化</li>
<li>有些文档修改，但修改的内容并不重要</li>
<li>… .</li>
</ul>
</li>
</ul>
<p>实体标签是附加到文档上的任意标签，它们可能包含了文档的序列号或版本名 ETag</p>
]]></content>
  </entry>
  <entry>
    <title>测试题</title>
    <url>/2019/12/28/%E6%B5%8B%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="工作中遇到的JS训练"><a href="#工作中遇到的JS训练" class="headerlink" title="工作中遇到的JS训练"></a>工作中遇到的JS训练</h2><a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    resolve(<span class="number">3</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>); <span class="comment">//1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    resolve(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">4</span>));</span><br><span class="line">&#125;).then(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>); <span class="comment">//1 2 4 3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 红灯三秒亮一次，绿灯一秒亮一次，黄灯2秒亮一次，意思就是3秒，执行一次 red 函数，2秒执行一次 green 函数，</span></span><br><span class="line"><span class="comment">// 1秒执行一次 yellow 函数，不断交替重复亮灯，意思就是按照这个顺序一直执行这3个函数，这步可以就利用递归来实现。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">Promise</span> = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">"success1"</span>);</span><br><span class="line">    reject(<span class="string">"error"</span>);</span><br><span class="line">    resolve(<span class="string">"success2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"then:"</span>, res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"catch:"</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">red</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"red"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">green</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"green"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yellow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"yellow"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> step = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Promise</span>.resolve()</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> light(<span class="number">3000</span>, red);</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> light(<span class="number">2000</span>, green);</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> light(<span class="number">1000</span>, yellow);</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            step();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> light = <span class="function"><span class="keyword">function</span>(<span class="params">timer, color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            color();</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;, timer);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">step();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有 8 个图片资源的 url，已经存储在数组 urls 中（即urls = ['http://example.com/1.jpg', ...., 'http://example.com/8.jpg']），而且已经有一个函数 function loadImg，输入一个 url 链接，返回一个 Promise，该 Promise 在图片下载完成的时候 resolve，下载失败则 reject。</span></span><br><span class="line"><span class="comment">// 但是我们要求，任意时刻，同时下载的链接数量不可以超过 3 个。</span></span><br><span class="line"><span class="comment">// 请写一段代码实现这个需求，要求尽可能快速地将所有图片下载完成。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> urls = [</span><br><span class="line">    <span class="string">"https://www.kkkk1000.com/images/getImgData/getImgDatadata.jpg"</span>,</span><br><span class="line">    <span class="string">"https://www.kkkk1000.com/images/getImgData/gray.gif"</span>,</span><br><span class="line">    <span class="string">"https://www.kkkk1000.com/images/getImgData/Particle.gif"</span>,</span><br><span class="line">    <span class="string">"https://www.kkkk1000.com/images/getImgData/arithmetic.png"</span>,</span><br><span class="line">    <span class="string">"https://www.kkkk1000.com/images/getImgData/arithmetic2.gif"</span>,</span><br><span class="line">    <span class="string">"https://www.kkkk1000.com/images/getImgData/getImgDataError.jpg"</span>,</span><br><span class="line">    <span class="string">"https://www.kkkk1000.com/images/getImgData/arithmetic.gif"</span>,</span><br><span class="line">    <span class="string">"https://user-gold-cdn.xitu.io/2018/10/29/166be40ccc434be0?w=600&amp;h=342&amp;f=png&amp;s=122185"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"一张图片加载完成"</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;;</span><br><span class="line">        img.onerror = reject;</span><br><span class="line">        img.src = url;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">limitLoad</span>(<span class="params">urls, handler, limit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> sequence = [].concat(urls);</span><br><span class="line">    <span class="keyword">let</span> promises = [];</span><br><span class="line">    promises = sequence.splice(<span class="number">0</span>, limit).map(<span class="function">(<span class="params">url, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> handler(url).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> sequence</span><br><span class="line">        .reduce(<span class="function">(<span class="params">last, url, currentIndex</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> last</span><br><span class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">Promise</span>.race(promises);</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(err);</span><br><span class="line">                &#125;)</span><br><span class="line">                .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    promises[res] = handler(sequence[currentIndex]).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> res;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;, <span class="built_in">Promise</span>.resolve())</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.all(promises);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line">limitLoad(urls, loadImg, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Find</span>(<span class="params">target, array</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target === array[i][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (target &gt; array[i][<span class="number">0</span>] &amp;&amp; array[i + <span class="number">1</span>][<span class="number">0</span>] &amp;&amp; target &lt; array[i + <span class="number">1</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; array[i][<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (target === array[i][j]) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    target &gt; array[i][j] &amp;&amp;</span><br><span class="line">                    array[i][j + <span class="number">1</span>] &amp;&amp;</span><br><span class="line">                    target &lt; array[i][j + <span class="number">1</span>]</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Find(<span class="number">5</span>, [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">12</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">13</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Defer(<span class="function"><span class="keyword">function</span>(<span class="params">res, rej</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            res(<span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"resolve then 1"</span>, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"resolve then 2"</span>, value);</span><br><span class="line">        <span class="keyword">throw</span> <span class="number">2</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"error"</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//结果:</span></span><br><span class="line"><span class="comment">//resolve then 1 1</span></span><br><span class="line"><span class="comment">//resolve then 2 1</span></span><br><span class="line"><span class="comment">//error 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Defer(<span class="function"><span class="keyword">function</span>(<span class="params">res, rej</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            rej(<span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test2()</span><br><span class="line">    .then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"reject then 1"</span>, value);</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"error 1"</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"reject then 2"</span>, value);</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"error 2"</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"error"</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//结果:</span></span><br><span class="line"><span class="comment">//reject then 1 1</span></span><br><span class="line"><span class="comment">//reject then 2 error 2</span></span><br><span class="line"><span class="comment">//error erro 2</span></span><br><span class="line"></span><br><span class="line">test2()</span><br><span class="line">    .then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"reject then 1"</span>, value);</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"throw error from then 1"</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"resolve then 2"</span>, value);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"error"</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//结果:</span></span><br><span class="line"><span class="comment">//reject then 1 1</span></span><br><span class="line"><span class="comment">//error throw error from then 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//请求某个图片资源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestImg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            resolve(img);</span><br><span class="line">        &#125;;</span><br><span class="line">        img.src = <span class="string">"xxxxxx"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时函数，用于给请求计时</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            reject(<span class="string">"图片请求超时"</span>);</span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([requestImg(), timeout()])</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(results);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(reason);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise实现并行</span></span><br><span class="line"><span class="keyword">const</span> datum = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    datum.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(</span><br><span class="line">    datum.map(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(i * <span class="number">200</span> + <span class="string">" ms后执行结束"</span>);</span><br><span class="line">                resolve(<span class="string">"第 "</span> + (i + <span class="number">1</span>) + <span class="string">" 个promise执行结束"</span>);</span><br><span class="line">            &#125;, i * <span class="number">200</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncFun = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> datum = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        datum.push(</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(i * <span class="number">200</span> + <span class="string">"ms 后执行结束"</span>);</span><br><span class="line">                    resolve(<span class="string">"第 "</span> + (i + <span class="number">1</span>) + <span class="string">" 个 Promise 执行结束"</span>);</span><br><span class="line">                &#125;, i * <span class="number">200</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> promise <span class="keyword">in</span> datum) &#123;</span><br><span class="line">        result.push(<span class="keyword">await</span> promise);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;;</span><br><span class="line">asyncFun();</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise实现串行</span></span><br><span class="line"><span class="keyword">const</span> datum = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    datum.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> serial = <span class="built_in">Promise</span>.resolve();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> datum) &#123;</span><br><span class="line">    serial = serial.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(i * <span class="number">200</span> + <span class="string">" ms 后执行结束"</span>);</span><br><span class="line">                resolve(<span class="string">"第 "</span> + (i + <span class="number">1</span>) + <span class="string">" 个 Promise 执行结束"</span>);</span><br><span class="line">            &#125;, i * <span class="number">200</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> datum = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    datum.push(i);</span><br><span class="line">&#125;</span><br><span class="line">datum.reduce(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> prev.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(cur * <span class="number">200</span> + <span class="string">" ms 后执行结束"</span>);</span><br><span class="line">                resolve(<span class="string">"第 "</span> + (cur + <span class="number">1</span>) + <span class="string">" 个 Promise 执行结束"</span>);</span><br><span class="line">            &#125;, cur * <span class="number">200</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="built_in">Promise</span>.resolve(<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值穿透</span></span><br><span class="line"><span class="comment">// 当你给 then() 传递一个非函数（比如一个 promise ）值的时候，</span></span><br><span class="line"><span class="comment">// 它实际上会解释为 then(null) ，这会导致之前的 promise 的结果丢失</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    promise</span><br><span class="line">        .then()</span><br><span class="line">        .then(<span class="literal">null</span>)</span><br><span class="line">        .then(<span class="string">"some code"</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">        &#125;);</span><br><span class="line">    promise</span><br><span class="line">        .catch()</span><br><span class="line">        .catch(<span class="literal">null</span>)</span><br><span class="line">        .then(<span class="string">"some code"</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 永远不要在回调队列中抛出异常，因为回调队列脱离了运行上下文环境，异常无法被当前作用域捕获。</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"This is an error"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"handle error: "</span>, error); <span class="comment">// Error: This is an error</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * https://mp.weixin.qq.com/s/hdvPdTUR7lfnoWl2aO2Cig </span></span><br><span class="line"><span class="comment"> * JS引擎是浏览器渲染进程中的一个线程（单线程）,所谓的JS异步并不是交由JS引擎去完成的，而是交给浏览器的其他线程去完成。</span></span><br><span class="line"><span class="comment"> * JS异步操作还会涉及到JS事件循环机制。</span></span><br><span class="line"><span class="comment"> * JS 事件循环 : </span></span><br><span class="line"><span class="comment"> * 如果是setTimeout/setInterval定时异步任务，浏览器的渲染进程就会开一个定时器触发线程去执行，当定时时间一到，</span></span><br><span class="line"><span class="comment"> * 就会通知事件触发线程将定时器的回调方法推送至事件任务队列的一个宏任务队列的列尾，</span></span><br><span class="line"><span class="comment"> * 等待JS引擎执行完同步任务后，再从事件任务队列中从头取出要执行的回调方法。其他异步任务也是这么一个流程。</span></span><br><span class="line"><span class="comment"> * 这就是所谓的JS事件循环。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * promise是一个容器，它里面装的是一个异步操作（某个未来才会结束的事件）的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPromise</span>(<span class="params">p, arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (arg === <span class="number">0</span>) &#123;</span><br><span class="line">                reject(p + <span class="string">' fail'</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resolve(p + <span class="string">' ok'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">200</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createPromise(<span class="string">"p1"</span>, <span class="number">1</span>).then(<span class="function">(<span class="params">success1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(success1)</span><br><span class="line">    <span class="keyword">return</span> createPromise(<span class="string">"p2"</span>, <span class="number">0</span>)</span><br><span class="line">&#125;, (reject) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reject)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果没有return的话是不会被catch住的 *** </span></span><br><span class="line">createPromise(<span class="string">"p1"</span>, <span class="number">1</span>).then(<span class="function">(<span class="params">success1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(success1)</span><br><span class="line">    <span class="keyword">return</span> createPromise(<span class="string">"p2"</span>, <span class="number">0</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">createPromise(<span class="string">"p1"</span>, <span class="number">0</span>).then(<span class="function">(<span class="params">success1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(success1)</span><br><span class="line">    <span class="keyword">return</span> createPromise(<span class="string">"p2"</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">createPromise(<span class="string">"p1"</span>, <span class="number">1</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">success1</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"正在执行 "</span> + success1)</span><br><span class="line">    <span class="keyword">return</span> createPromise(<span class="string">"p2"</span>, <span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编程面试题之最大并行任务池：</span></span><br><span class="line"><span class="comment"> * 1）给定一个 taskList 和 poolSize；</span></span><br><span class="line"><span class="comment"> * 2）task 是异步的，返回 promise；</span></span><br><span class="line"><span class="comment"> * 3）task 不会失败。</span></span><br><span class="line"><span class="comment"> * 要求：</span></span><br><span class="line"><span class="comment"> * 1）同时不能有超过 poolSize 的 task 在执行；</span></span><br><span class="line"><span class="comment"> * 2）所有 taskList 里的 task 最终都执行完毕</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> sequence = <span class="keyword">async</span> getNextTask =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> task = getNextTask()</span><br><span class="line">    <span class="keyword">if</span> (!task) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">await</span> task()</span><br><span class="line">    <span class="keyword">await</span> sequence(getNextTask)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> parallel = <span class="keyword">async</span> (getNextTask, size) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> taskList = <span class="built_in">Array</span>.from(&#123;</span><br><span class="line">        length: size</span><br><span class="line">    &#125;, getNextTask)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all(taskList.filter(<span class="built_in">Boolean</span>).map(<span class="function"><span class="params">task</span> =&gt;</span> task()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">async</span> (taskList, size = <span class="number">1</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> getNextTask = <span class="function"><span class="params">()</span> =&gt;</span> taskList[count++]</span><br><span class="line">    <span class="keyword">return</span> parallel(<span class="function"><span class="params">()</span> =&gt;</span> <span class="function"><span class="params">()</span> =&gt;</span> sequence(getNextTask), size)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="function">(<span class="params">data, size</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> runtasks = [...data]</span><br><span class="line">    <span class="keyword">let</span> run = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (runtasks.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> task = runtasks.shift()</span><br><span class="line">            <span class="keyword">await</span> task()</span><br><span class="line">            run()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> delay = <span class="function"><span class="params">time</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, time))</span><br><span class="line"><span class="keyword">const</span> data = <span class="built_in">Array</span>.from(&#123;</span><br><span class="line">    length: <span class="number">100</span></span><br><span class="line">&#125;, (_, i) =&gt; <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'enter'</span>, i)</span><br><span class="line">    <span class="keyword">await</span> delay(<span class="built_in">Math</span>.random() * <span class="number">10</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'leave'</span>, i)</span><br><span class="line">&#125;)</span><br><span class="line">buffer(data, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'window'</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    name: <span class="string">'person1'</span>,</span><br><span class="line">    show1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    show2: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.name</span><br><span class="line">    &#125;,</span><br><span class="line">    show3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    show4: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">    name: <span class="string">'person2'</span></span><br><span class="line">&#125;</span><br><span class="line">person1.show1()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JS训练</tag>
      </tags>
  </entry>
  <entry>
    <title>快捷键汇总</title>
    <url>/2019/12/28/%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p><a href="http://fe.surge.sh/guide/" target="_blank" rel="noopener">熟练使用快捷键</a></p>
<a id="more"></a>

<p><code>option + delete</code> 删除后一个字符<br><code>cmd + M</code> 最小化当前窗口<br><code>cmd + w</code> 关闭当前窗口<br><code>ctrl+tab</code> 切换 <code>Chrome tab</code><br><code>command + tab</code> 切换 程序 <code>tab</code><br><code>ctrl + a</code> 光标移动到行首<br><code>ctrl + e</code> 光标移动到行尾<br><code>ctrl + r</code> 打开某文件夹<br><code>cmd + n</code> 打开新窗口<br><code>cmd + m</code> 程序窗口最小化<br><code>option + shift + f</code> vscode格式化代码<br><code>shift</code> + 鼠标点击两次 选中 代码块<br><code>cmd + p</code> 快速查找文件<br><code>ctrl + a/e</code> 快速切换到当前正在输入的文本的头部／尾部<br><code>ctrl + u</code> 清空当前输入<br><code>cmd + T</code> 打开一个新的iterm2 Tab<br><code>cmd + 方向键</code> 左右切换Tab<br><code>cmd + D</code> 分屏<br><code>cmd + K</code> 清屏<br><code>cmd + N</code> 打开一个新的iterm2 窗口<br><code>cmd + k + s</code> 打开 keybinds.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; &quot;key&quot;: &quot;cmd+1&quot;,           &quot;command&quot;: &quot;workbench.view.explorer&quot; &#125;,</span><br><span class="line">&#123; &quot;key&quot;: &quot;cmd+2&quot;,           &quot;command&quot;: &quot;workbench.view.search&quot; &#125;,</span><br><span class="line">&#123; &quot;key&quot;: &quot;cmd+3&quot;,           &quot;command&quot;: &quot;workbench.view.scm&quot; &#125;,</span><br><span class="line">&#123; &quot;key&quot;: &quot;cmd+4&quot;,           &quot;command&quot;: &quot;workbench.view.debug&quot; &#125;,</span><br><span class="line">&#123; &quot;key&quot;: &quot;cmd+5&quot;,           &quot;command&quot;: &quot;workbench.view.extensions&quot; &#125;</span><br></pre></td></tr></table></figure>

<p><code>cmd + p</code> 根据关键字快速打开一个文件<br><code>cmd + ,</code> 打开VS Code配置项<br><code>cmd + d</code> 快速选取多个相同的内容块<br><code>option + shift + 鼠标左键</code> 让光标多行选取<br><code>cmd + shift + h</code> 全局替换内容<br><code>cmd + shift + g</code> 快速进入指定文件夹<br><code>cmd + shift + h</code> 进入home目录<br><code>cmd + shift + a</code> 进入Application目录<br><code>cmd + shift + F</code> 一次搜索所有文件的文本   (ctrl + shift + F)<br><code>cmd + shift + P</code> 打开命令面板    (ctrl + shift + P)<br><code>cmd + shift + T</code> 重新打开 关闭的编辑页面  (ctrl + shift + T )<br><code>cmd + T</code> 通过匹配文本打开文件  (ctrl + T)<br><code>control +</code> 打开或者关闭终端<br><code>ctrl + option + R</code> 允许你在重新加载编辑器时将窗口放在前面，同时具有与关闭和重新打开窗口相同的效果。 (ctrl + alt + R)<br><code>ctrl + Option + 右箭头</code> 将标签移动到右侧的组  (ctrl+ alt + 右箭头)<br><code>command + shift + Home/End</code> 选择右侧或左侧的所有内容  （ctrl+ shift + Home/End)<br><code>fn + 左方向键 Home</code><br><code>fn + 右方向键 End</code><br><code>fn + 上方向键 page up</code><br><code>fn + 下方向键 page down</code><br><code>option + delete</code> 删除上一个单词  (ctrl + backspace)<br><code>option + shift + 右箭头</code> 逐个选择文本 (ctrl + shift + 右箭头)<br><code>command + shift + 向下箭头</code> 复制行 （shift + alt + 向下箭头)<br><code>command + End</code> 将光标移动到文件最后一行  (ctrl + End)<br><code>command + F2</code> 批量替换当前文件中所有匹配到文本 (ctrl + F2)<br><code>command + 向上箭头</code> 当前行向上移动 (alt + 向上箭头)<br><code>command + shift + pgUp/pgDown</code> 向左/向右移动编辑器<br><code>ctrl + option + 向下箭头</code> 复制光标向下批量添加内容。 （ctrl + alt + 向下箭头）<br><code>ctrl + command + Q</code> 锁屏</p>
<p><code>ctrl + tab</code> 切换浏览器标签页</p>
<p><code>ctrl + &quot;</code>“<code>打开vscode终端</code>ctrl + shift + “<code>&quot;</code> 新建vscode终端</p>
]]></content>
  </entry>
  <entry>
    <title>编写有弹性的组件</title>
    <url>/2020/01/10/%E7%BC%96%E5%86%99%E6%9C%89%E5%BC%B9%E6%80%A7%E7%9A%84%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p><a href="https://overreacted.io/zh-hans/writing-resilient-components/" target="_blank" rel="noopener">原文链接</a></p>
<a id="more"></a>

<h3 id="不要阻止数据流"><a href="#不要阻止数据流" class="headerlink" title="不要阻止数据流"></a>不要阻止数据流</h3><p>当别人使用你的组件的时候，他们期望的是，不论他们传递什么props，组件将反应这些变化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    color,</span></span></span><br><span class="line"><span class="function"><span class="params">    children</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        button className = &#123;</span></span><br><span class="line"><span class="xml">            'Button-' + color</span></span><br><span class="line"><span class="xml">        &#125; &gt; &#123;</span></span><br><span class="line"><span class="xml">            children</span></span><br><span class="line"><span class="xml">        &#125; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        /button&gt;</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然而，一个常见的错误是，把props复制给state</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        color: <span class="keyword">this</span>.props.color</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            color</span><br><span class="line">        &#125; = <span class="keyword">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            button className = &#123;</span></span><br><span class="line"><span class="xml">                'Button-' + color</span></span><br><span class="line"><span class="xml">            &#125; &gt; &#123;</span></span><br><span class="line"><span class="xml">                this.props.children</span></span><br><span class="line"><span class="xml">            &#125; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            /button&gt;</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，通过将prop复制到state，你忽略了对他所有的更新。</p>
<p>计算值是另一个大家可能会将 props 复制到 state 的场景。举例来说，想象一下 按钮文字 的颜色是根据 color 属性通过昂贵计算得来：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        color: slowlyCalculateTextColor(<span class="keyword">this</span>.props.color)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            button className = &#123;</span></span><br><span class="line"><span class="xml">                'Button-' + this.props.color +</span></span><br><span class="line"><span class="xml">                'Button-text-' + this.state.textColor</span></span><br><span class="line"><span class="xml">            &#125; &gt; &#123;</span></span><br><span class="line"><span class="xml">                this.props.children</span></span><br><span class="line"><span class="xml">            &#125; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            /button&gt;</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最简单的修复是把 textColor 的计算放到 render 方法中，然后把组件改为 PureComponent：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> textColor = slowlyCaculateTextColor(<span class="keyword">this</span>.props.color)</span><br><span class="line">        <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            button className = &#123;</span></span><br><span class="line"><span class="xml">                'Button-' + this.props.color +</span></span><br><span class="line"><span class="xml">                'Button-text-' + textColor</span></span><br><span class="line"><span class="xml">            &#125; &gt; &#123;</span></span><br><span class="line"><span class="xml">                this.props.children</span></span><br><span class="line"><span class="xml">            &#125; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            /button&gt;</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题解决了！现在当 props 改变时重新计算 textColor，但是在属性不变时，能避免重复进行昂贵计算。</p>
<p>然而，也许我们还能再优化一下。如果 children 改变了呢？很遗憾 textColor 在这种情况下会重复计算。我们第二次尝试可能是通过在 componentDidUpdate 中调用计算。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        textColor: slowlyCaculateTextColor(<span class="keyword">this</span>.props.color)</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidUpdate(prevProps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prevProps.color !== <span class="keyword">this</span>.props.color) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                textColor: slowlyCaculateTextColor(<span class="keyword">this</span>.props.color)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            button className = &#123;</span></span><br><span class="line"><span class="xml">                'Button-' + this.props.color +</span></span><br><span class="line"><span class="xml">                ' Button-text- ' + this.state.textColor</span></span><br><span class="line"><span class="xml">            &#125; &gt; &#123;</span></span><br><span class="line"><span class="xml">                this.props.children</span></span><br><span class="line"><span class="xml">            &#125; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            /button&gt;</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    color,</span></span></span><br><span class="line"><span class="function"><span class="params">    value</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> textColor = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> slowlyCaculateTextColor(color), [color])</span><br><span class="line">    <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        button className = &#123;</span></span><br><span class="line"><span class="xml">            'Button-' + color + 'Button-text-' + textColor</span></span><br><span class="line"><span class="xml">        &#125; &gt; &#123;</span></span><br><span class="line"><span class="xml">            children</span></span><br><span class="line"><span class="xml">        &#125; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        /button&gt;</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="不要在-Side-Effects-里阻断数据流"><a href="#不要在-Side-Effects-里阻断数据流" class="headerlink" title="不要在 Side Effects 里阻断数据流"></a>不要在 Side Effects 里阻断数据流</h4><p>解决方法，使用useEffect</p>
<h3 id="时刻准备渲染"><a href="#时刻准备渲染" class="headerlink" title="时刻准备渲染"></a>时刻准备渲染</h3><p>React 组件使你写渲染代码的时候不用考虑太多关于时间。你考虑在任意时间UI应该怎么展示，React来实现他。利用好这种模式。</p>
<p>不要尝试在组件行为中，假设不必要的的时序信息。<strong>你的组件应该在任何时候都能重新渲染</strong></p>
<p>如何违背这个原则呢？——你可以使用 <code>componentWillReceiveProps</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        value: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            value: nextProps.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    handleChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            value: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            input value = &#123;</span></span><br><span class="line"><span class="xml">                this.state.value</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            onChange = &#123;</span></span><br><span class="line"><span class="xml">                this.handleChange</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            /&gt;</span></span><br><span class="line"><span class="xml">        )</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们把value值私有，但是我们依然从props接收value值，当接收到新props，我们重置状态中的value<br><strong>这种模式的问题是，他完全依赖于偶然的时间</strong><br>也许今天父组件极少地更新，我们的TextInput组件只有在重要事件发生时才会接收props，例如保存表单<br>但是明天，你可能会给父组件加一些动画，如果父组件经常re-render，它将污染子组件的状态。<a href="https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html" target="_blank" rel="noopener">你可能不需要派生state</a></p>
<p><strong>我们该怎么修复呢？</strong><br>我们需要停止将 “接收props” 和 “rendering”看成不同的东西。由父组件引起的re-render 不应与 本身状态 改变引起的 re-render。<strong>组件应该是有弹性的，能适应更少或者更频繁的渲染，否则他们会与特定父组件存在过多耦合</strong></p>
<p>从props派生state的几种解决方案，</p>
<ul>
<li>1、通常你该使用一个完全受控制的组件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextInput</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    value,</span></span></span><br><span class="line"><span class="function"><span class="params">    onChange</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        input value = &#123;</span></span><br><span class="line"><span class="xml">            value</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        onChange = &#123;</span></span><br><span class="line"><span class="xml">            onChange</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        /&gt;</span></span><br><span class="line"><span class="xml">    )</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2、或者使用一个不受控制的组件，加上key来重置他</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextInput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [value, setValue] = useState(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        input value = &#123;</span></span><br><span class="line"><span class="xml">            value</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        onChange = &#123;</span></span><br><span class="line"><span class="xml">            e =&gt; setValue(e.target.value)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        /&gt;</span></span><br><span class="line"><span class="xml">    )</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">// 通过改变key重置组件</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">TextInput key = &#123;</span></span><br><span class="line"><span class="xml">    formId</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">/&gt;</span></span><br></pre></td></tr></table></figure>

<p>本节的内容是，组件不应该因为他本身或者他父组件的重新渲染，而坏掉。</p>
<p>要对你的组件进行压力测试，可以将下面代码加入到父组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.forceUpdate(), <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你看你会想：我在props改变时重置state，再用pureComponent避免不必要的重渲染<br>这段代码应该能工作，对吧？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        value: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            value: nextProps.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            value: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            input value = &#123;</span></span><br><span class="line"><span class="xml">                this.state.value</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            onChange = &#123;</span></span><br><span class="line"><span class="xml">                this.handleChange</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            /&gt;</span></span><br><span class="line"><span class="xml">        )</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<p>乍一看，他看起来解决了 当 父组件 重新渲染的时候，子组件状态受污染的问题。但是，当props一致，我们就跳过了更新。componentWillReceiveProps也不会被执行。<br>然而，<strong>当实际props改变的时候，组件仍然没有弹性</strong>。例如，我们加另一经常改变的props：style，我们还是会丢失内部状态。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt; TextInput</span><br><span class="line">style = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        opacity: someValueFromState</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">value = &#123;</span><br><span class="line">    value</span><br><span class="line">&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>函数式编程</title>
    <url>/2019/12/28/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/" target="_blank" rel="noopener">参考文献：JS函数式编程指南</a></p>
<a id="more"></a>

<h2 id="chapter-4-柯里化"><a href="#chapter-4-柯里化" class="headerlink" title="chapter 4 柯里化"></a>chapter 4 柯里化</h2><h3 id="高阶函数：将函数作为参数或者返回值是函数的函数。"><a href="#高阶函数：将函数作为参数或者返回值是函数的函数。" class="headerlink" title="高阶函数：将函数作为参数或者返回值是函数的函数。"></a>高阶函数：将函数作为参数或者返回值是函数的函数。</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 写法</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="params">a</span> =&gt;</span> <span class="function"><span class="params">b</span> =&gt;</span> a + b</span><br></pre></td></tr></table></figure>

<h2 id="chapter-5"><a href="#chapter-5" class="headerlink" title="chapter 5"></a>chapter 5</h2><h3 id="代码组合"><a href="#代码组合" class="headerlink" title="代码组合"></a>代码组合</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span>(<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f(g(x))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> toUpperCase = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.toUpperCase()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> exclaim = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + <span class="string">'!'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="左倾-函数，函数从右向左执行。"><a href="#左倾-函数，函数从右向左执行。" class="headerlink" title="左倾 函数，函数从右向左执行。"></a>左倾 函数，函数从右向左执行。</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span>(<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f(g(x))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> head = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.reduce(<span class="function">(<span class="params">arr, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [item].concat(arr)</span><br><span class="line">  &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> last = compose(head, reverse)</span><br><span class="line"></span><br><span class="line">last([<span class="string">'jumpkick'</span>, <span class="string">'roundhouse'</span>, <span class="string">'uppercut'</span>])</span><br></pre></td></tr></table></figure>

<h3 id="结合律"><a href="#结合律" class="headerlink" title="结合律"></a>结合律</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> associative = compose(f, compose(g, h)) == compose(compose(f, g), h);</span><br></pre></td></tr></table></figure>

<h3 id="pointfree-永远不必说出你的数据"><a href="#pointfree-永远不必说出你的数据" class="headerlink" title="pointfree(永远不必说出你的数据)"></a>pointfree(永远不必说出你的数据)</h3><h3 id="非pointfree"><a href="#非pointfree" class="headerlink" title="非pointfree"></a>非pointfree</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span>(<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f(g(x))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> toUpperCase = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.toUpperCase()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> head = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> initials = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name.split(<span class="string">' '</span>).join(<span class="string">'. '</span>)</span><br><span class="line">&#125;</span><br><span class="line">initials(<span class="string">"hunter stockton thompson"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="pointfree"><a href="#pointfree" class="headerlink" title="pointfree"></a>pointfree</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span>(<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f(g(x))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> split = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.split(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> join = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.join(<span class="string">'. '</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initials = compose(join, split)</span><br><span class="line">initials(<span class="string">"hunter stockton thompson"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="chapter-6"><a href="#chapter-6" class="headerlink" title="chapter 6"></a>chapter 6</h2><h3 id="声明式代码"><a href="#声明式代码" class="headerlink" title="声明式代码"></a>声明式代码</h3><h3 id="命令式：命令式的循环要求你必须先实例化一个数组，而且执行完这个实例化语句之后，解释器才继续执行后面的代码"><a href="#命令式：命令式的循环要求你必须先实例化一个数组，而且执行完这个实例化语句之后，解释器才继续执行后面的代码" class="headerlink" title="命令式：命令式的循环要求你必须先实例化一个数组，而且执行完这个实例化语句之后，解释器才继续执行后面的代码"></a>命令式：命令式的循环要求你必须先实例化一个数组，而且执行完这个实例化语句之后，解释器才继续执行后面的代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命令式</span></span><br><span class="line"><span class="keyword">var</span> authenticate = <span class="function"><span class="keyword">function</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = toUser(form)</span><br><span class="line">    <span class="keyword">return</span> logIn(user)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明式</span></span><br><span class="line"><span class="keyword">var</span> authenticate = compose(logIn, toUser)</span><br></pre></td></tr></table></figure>

<h2 id="chapter-7-Hindley-Milner-类型签名"><a href="#chapter-7-Hindley-Milner-类型签名" class="headerlink" title="chapter 7 Hindley-Milner 类型签名"></a>chapter 7 Hindley-Milner 类型签名</h2><h2 id="chapter-8-特百惠"><a href="#chapter-8-特百惠" class="headerlink" title="chapter 8 特百惠"></a>chapter 8 特百惠</h2><h3 id="给容器一个属性"><a href="#给容器一个属性" class="headerlink" title="给容器一个属性"></a>给容器一个属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Container = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.__value = x</span><br><span class="line">&#125;</span><br><span class="line">Container.of = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Container(x)</span><br><span class="line">&#125;</span><br><span class="line">Container.of(<span class="number">3</span>)</span><br><span class="line">Container.of(<span class="string">"hotdogs"</span>)</span><br><span class="line">Container.of(Container.of(&#123;</span><br><span class="line">    name: <span class="string">"yoda"</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<h3 id="functor-提供一个方法让别的函数操作容器中的值"><a href="#functor-提供一个方法让别的函数操作容器中的值" class="headerlink" title="functor : 提供一个方法让别的函数操作容器中的值"></a>functor : 提供一个方法让别的函数操作容器中的值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Container.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Container.of(f(<span class="keyword">this</span>.__value))</span><br><span class="line">&#125;</span><br><span class="line">Container.of(<span class="number">2</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">two</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> two + <span class="number">2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Maybe = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.__value = x</span><br><span class="line">&#125;</span><br><span class="line">Maybe.of = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Maybe(x)</span><br><span class="line">&#125;</span><br><span class="line">Maybe.prototype.isNothing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.__value === <span class="literal">null</span> || <span class="keyword">this</span>.__value === <span class="literal">undefined</span>)</span><br><span class="line">&#125;</span><br><span class="line">Maybe.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.isNothing() ? Maybe.of(<span class="literal">null</span>) : Maybe.of(f(<span class="keyword">this</span>.__value))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="match-方法实现"><a href="#match-方法实现" class="headerlink" title="match 方法实现"></a>match 方法实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Maybe = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.__value = x</span><br><span class="line">&#125;</span><br><span class="line">Maybe.of = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Maybe(x)</span><br><span class="line">&#125;</span><br><span class="line">Maybe.prototype.isNothing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.__value === <span class="literal">null</span> || <span class="keyword">this</span>.__value === <span class="literal">undefined</span>)</span><br><span class="line">&#125;</span><br><span class="line">Maybe.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.isNothing() ? Maybe.of(<span class="literal">null</span>) : Maybe.of(f(<span class="keyword">this</span>.__value))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> matchReg = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.__value.match(x)</span><br><span class="line">&#125;</span><br><span class="line">Maybe.of(<span class="string">"Malkovich Malkovich"</span>).map(matchReg(<span class="regexp">/a/ig</span>))</span><br></pre></td></tr></table></figure>

<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Left = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.__value = x</span><br><span class="line">&#125;</span><br><span class="line">Left.of = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Left()</span><br><span class="line">&#125;</span><br><span class="line">Left.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Right = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.__value = x</span><br><span class="line">&#125;</span><br><span class="line">Right.of = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Right(x)</span><br><span class="line">&#125;</span><br><span class="line">Right.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Right.of(f(<span class="keyword">this</span>.__value))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Right.of(<span class="string">"rain"</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"b"</span> + str;</span><br><span class="line">&#125;);</span><br><span class="line">Right.of(&#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    port: <span class="number">80</span></span><br><span class="line">&#125;).map(<span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.host</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>函数式组件和类组件有何不同？</title>
    <url>/2020/02/10/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6%E5%92%8C%E7%B1%BB%E7%BB%84%E4%BB%B6%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C%EF%BC%9F/</url>
    <content><![CDATA[<h3 id="根本的区别"><a href="#根本的区别" class="headerlink" title="根本的区别"></a>根本的区别</h3><p>函数式组件捕获了渲染所用的值。（Function components capture the rendered values.）</p>
<a id="more"></a>
<p><a href="https://codesandbox.io/s/pjqnl16lm7" target="_blank" rel="noopener">代码见codesandbox</a><br>函数式组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ProfilePage</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> showMessage = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">'Followed '</span> + props.user);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(showMessage, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button onClick=&#123;handleClick&#125;&gt;Follow&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>类组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  showMessage = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">'Followed '</span> + <span class="keyword">this</span>.props.user);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="keyword">this</span>.showMessage, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 React 中 Props 是不可变(immutable)的，所以他们永远不会改变。然而，this是，而且永远是，可变(mutable)的。事实上，这就是类组件 this 存在的意义。React本身会随着时间的推移而改变，以便你可以在渲染方法以及生命周期方法中得到最新的实例。</p>
<p>修复：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  showMessage = <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">'Followed '</span> + user);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;user&#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.showMessage(user), <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者使用闭包：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// Capture the props!</span></span><br><span class="line">    <span class="keyword">const</span> props = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note: we are *inside render*.</span></span><br><span class="line">    <span class="comment">// These aren't class methods.</span></span><br><span class="line">    <span class="keyword">const</span> showMessage = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      alert(<span class="string">'Followed '</span> + props.user);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setTimeout(showMessage, <span class="number">3000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>从零实现react全家桶</title>
    <url>/2020/01/17/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0react%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p><a href="https://github.com/brickspert/blog/issues/1" target="_blank" rel="noopener">参考教程</a>，本文在传统react全家桶架构基础上，对react-imvc解析</p>
</blockquote>
<h3 id="带着问题去学习"><a href="#带着问题去学习" class="headerlink" title="带着问题去学习"></a>带着问题去学习</h3><ul>
<li>react-imvc中打包生成的文件，包括vendor.js、index.js 是有哪些内容打包生成的</li>
<li>项目中生成的打包内容 <code>js/number.[hash].js</code> ，可以修改命名吗？</li>
</ul>
<a id="more"></a>

<h3 id="init-项目"><a href="#init-项目" class="headerlink" title="init 项目"></a>init 项目</h3><ol>
<li><code>mkdir react-init &amp; cd react-init</code> </li>
<li><code>npm init</code> </li>
<li><code>touch webpack.dev.config.js</code> 编写基础配置文件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: path.join(__dirname, <span class="string">'src/index.js'</span>),</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerHTML = <span class="string">"This is index.html"</span></span><br></pre></td></tr></table></figure>

<p>在打包生成的 <code>bundle.js</code> 文件目录下，新建index.html，将bundle.js 插入HTML中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt; !doctype html &gt;</span><br><span class="line">    &lt;</span><br><span class="line">    html lang = <span class="string">"en"</span> &gt;</span><br><span class="line">    &lt;</span><br><span class="line">    head &gt;</span><br><span class="line">    &lt;</span><br><span class="line">    meta charset = <span class="string">"UTF-8"</span> &gt;</span><br><span class="line">    &lt;</span><br><span class="line">    title &gt; Document &lt; <span class="regexp">/title&gt; &lt;</span></span><br><span class="line"><span class="regexp">    /</span>head&gt; <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    body &gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    div id = "app" &gt; <span class="tag">&lt; /<span class="attr">div</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    script type = "text/javascript"</span></span><br><span class="line"><span class="xml">src = "./bundle.js"</span></span><br><span class="line"><span class="xml">charset = "utf-8" &gt; <span class="tag">&lt; /<span class="attr">script</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    /body&gt;</span> <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    /html&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行 webpack –config webpack.dev.config.js 生成打包文件，打开index.html 查看页面</p>
<h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><blockquote>
<p>使用babel对JSX，ES6，ES7进行编译，转换成ES5</p>
</blockquote>
<ul>
<li>babel-core 调用Babel的API进行转码</li>
<li>babel-loader</li>
<li>babel-preset-es2015 用于解析 ES6</li>
<li>babel-preset-react 用于解析 JSX</li>
<li>babel-preset-stage-0 用于解析 ES7 提案</li>
</ul>
<p><code>npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-0</code> </p>
<p>配置.babelrc文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">        <span class="string">"es2015"</span>,</span><br><span class="line">        <span class="string">"react"</span>,</span><br><span class="line">        <span class="string">"stage-0"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改webpack.dev.config.js，增加babel-loader！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*cacheDirectory是用来缓存编译结果，下次编译加速*/</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [<span class="string">'babel-loader?cacheDirectory=true'</span>],</span><br><span class="line">        include: path.join(__dirname, <span class="string">'src'</span>)</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="react"><a href="#react" class="headerlink" title="react"></a>react</h3><p><code>cnpm install react react-dom</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  src/index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./Hello/Hello.js'</span></span><br><span class="line"></span><br><span class="line">ReactDom.render( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        div &gt; <span class="tag">&lt; <span class="attr">Hello</span> / &gt;</span> <span class="tag">&lt; /<span class="attr">div</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure>

<h3 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h3><p><code>cnpm install --save react-router-dom</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">    Route,</span><br><span class="line">    Switch,</span><br><span class="line">    Link</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../pages/Home/Home'</span>;</span><br><span class="line"><span class="keyword">import</span> Page1 <span class="keyword">from</span> <span class="string">'../pages/Page1/Page1'</span>;</span><br><span class="line"><span class="keyword">const</span> getRouter = <span class="function"><span class="params">()</span> =&gt;</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    Router &gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    div &gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    ul &gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    li &gt; <span class="tag">&lt; <span class="attr">Link</span> <span class="attr">to</span> = <span class="string">"/"</span> &gt;</span> 首页 <span class="tag">&lt; /<span class="attr">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span> &gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    li &gt; <span class="tag">&lt; <span class="attr">Link</span> <span class="attr">to</span> = <span class="string">"/page1"</span> &gt;</span> Page1 <span class="tag">&lt; /<span class="attr">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span> &gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    /ul&gt;</span> <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    Switch &gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    Route exact path = "/"</span></span><br><span class="line"><span class="xml">    component = &#123;</span></span><br><span class="line"><span class="xml">        Home</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    /&gt; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    Route path = "/page1"</span></span><br><span class="line"><span class="xml">    component = &#123;</span></span><br><span class="line"><span class="xml">        Page1</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    /&gt; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    /Switch&gt;</span> <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    /div&gt;</span> <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    /Router&gt;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getRouter;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><blockquote>
<p>配置服务器</p>
</blockquote>
<p><code>npm install webpack-dev-server@2 --save-dev</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.config.js</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    historyApiFallback: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>contentBase : URL的根目录。如果不设定的话，默认指向项目根目录。<br>historyApiFallback : 让所有的404定位到index.html<br>progress : 将编译进度输出到控制台</p>
</blockquote>
<p>执行 <code>webpack-dev-server --config webpack.dev.config.js</code><br>目前：当我们修改代码的时候，浏览器会自动刷新</p>
<h3 id="热模块替换"><a href="#热模块替换" class="headerlink" title="热模块替换"></a>热模块替换</h3><blockquote>
<p>hot : 启用Webpack的模块热替换特性。</p>
</blockquote>
<p><code>webpack-dev-server --config webpack.dev.config.js --color --progress --hot</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js 增加</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 效果：不刷新页面的情况下，内容更新</p>
<p> –hot 效果可以用以下配置来替代：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line">devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><p><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="noopener">入门教程</a><br><a href="http://cn.redux.js.org/index.html" target="_blank" rel="noopener">详细教程</a><br>action / reducer /</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: INCREMENT</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>reducer 是一个纯函数，接收action和旧的state, 生成新的state</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = initState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> INCREMENT:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                count: state.count + <span class="number">1</span></span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个项目有很多的reducers, 我们要把他们整合到一起</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">combineReducers</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        counter: counter(state.counter, action)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建store"><a href="#创建store" class="headerlink" title="创建store"></a>创建store</h4><p>store 有以下职责：</p>
<ul>
<li>维持应用的 state；</li>
<li>提供 getState() 方法获取 state；</li>
<li>提供 dispatch(action) 触发reducers方法更新 state；</li>
<li>通过 subscribe(listener) 注册监听器; </li>
<li>通过 subscribe(listener) 返回的函数注销监听器。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    createStore</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> combineReducers <span class="keyword">from</span> <span class="string">'./reducers.js'</span>;</span><br><span class="line"><span class="keyword">let</span> store = createStore(combineReducers);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure>

<p>用法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    increment</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./actions/counter'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(store.getState());</span><br><span class="line"><span class="keyword">let</span> unsubscribe = store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">);</span><br><span class="line">store.dispatch(increment());</span><br><span class="line">unsubscribe();</span><br></pre></td></tr></table></figure>

<p><a href="http://cn.redux.js.org/docs/basics/DataFlow.html" target="_blank" rel="noopener">redux数据流</a><br>react-redux提供了一个方法connect<br>connect接收两个参数，一个mapStateToProps, 就是把redux的state，转为组件的Props，还有一个参数是mapDispatchToprops, 就是把发射actions的方法，转为Props属性函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;</span><br><span class="line">    Component</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    increment,</span><br><span class="line">    decrement,</span><br><span class="line">    reset</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'actions/counter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    connect</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            div &gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            div &gt; 当前计数为 &#123;</span></span><br><span class="line"><span class="xml">                this.props.counter.count</span></span><br><span class="line"><span class="xml">            &#125; <span class="tag">&lt; /<span class="attr">div</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            button onClick = &#123;</span></span><br><span class="line"><span class="xml">                () =&gt; this.props.increment()</span></span><br><span class="line"><span class="xml">            &#125; &gt; 自增 <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            /button&gt;</span> <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            button onClick = &#123;</span></span><br><span class="line"><span class="xml">                () =&gt; this.props.decrement()</span></span><br><span class="line"><span class="xml">            &#125; &gt; 自减 <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            /button&gt;</span> <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            button onClick = &#123;</span></span><br><span class="line"><span class="xml">                () =&gt; this.props.reset()</span></span><br><span class="line"><span class="xml">            &#125; &gt; 重置 <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            /button&gt;</span> <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            /div&gt;</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        counter: state.counter</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        increment: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            dispatch(increment())</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            dispatch(decrement())</span><br><span class="line">        &#125;,</span><br><span class="line">        reset: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            dispatch(reset())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(Counter);</span><br></pre></td></tr></table></figure>

<p>传入store</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    Provider</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line">ReactDom.render( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    AppContainer &gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    Provider store = &#123;</span></span><br><span class="line"><span class="xml">        store</span></span><br><span class="line"><span class="xml">    &#125; &gt; &#123;</span></span><br><span class="line"><span class="xml">        RootElement</span></span><br><span class="line"><span class="xml">    &#125; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    /Provider&gt;</span> <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    /AppContainer&gt;</span>,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>Provider组件是让所有的组件可以访问到store。不用手动去传。也不用手动去监听。</li>
<li>connect函数作用是从 Redux state 树中读取部分数据，并通过 props 来把这些数据提供给要渲染的组件。也传递dispatch(action)函数到props。</li>
</ul>
<p>…… </p>
<h3 id="编译css"><a href="#编译css" class="headerlink" title="编译css"></a>编译css</h3><p>npm install css-loader style-loader –save-dev</p>
<ul>
<li>css-loader使你能够使用类似@import 和 url(… )的方法实现 require()的功能；</li>
<li>style-loader将所有的计算后的样式加入页面中</li>
<li>二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="编译图片"><a href="#编译图片" class="headerlink" title="编译图片"></a>编译图片</h3><p>npm install –save-dev url-loader file-loader</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// options limit 8192意思是，小于等于8K的图片会被转成base64编码，直接插入HTML中，减少HTTP请求。</span></span><br><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            limit: <span class="number">8192</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h3><p><code>npm install bundle-loader --save-dev</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;</span><br><span class="line">    Component</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bundle</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        mod: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.load(<span class="keyword">this</span>.props)</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nextProps.load !== <span class="keyword">this</span>.props.load) &#123;</span><br><span class="line">            <span class="keyword">this</span>.load(nextProps)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    load(props) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            mod: <span class="literal">null</span></span><br><span class="line">        &#125;);</span><br><span class="line">        props.load(<span class="function">(<span class="params">mod</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                mod: mod.default ? mod.default : mod</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.props.children(<span class="keyword">this</span>.state.mod)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Bundle;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'bundle-loader?lazy&amp;name=home!pages/Home/Home'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Loading = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> &gt;</span> Loading... <span class="tag">&lt; /<span class="attr">div</span>&gt;</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createComponent = <span class="function">(<span class="params">component</span>) =&gt;</span> <span class="function">(<span class="params">props</span>) =&gt;</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">    Bundle load = &#123;</span></span><br><span class="line"><span class="xml">        component</span></span><br><span class="line"><span class="xml">    &#125; &gt; &#123;</span></span><br><span class="line"><span class="xml">        (Component) =&gt; Component ? <span class="tag">&lt; <span class="attr">Component</span> &#123;</span></span></span><br><span class="line"><span class="xml">            ...props</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line">        /&gt; : &lt;Loading / &gt;</span><br><span class="line">    &#125; &lt;</span><br><span class="line"><span class="xml">    /Bundle&gt;</span></span><br><span class="line"><span class="xml">);</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">Route exact path = "/"</span></span><br><span class="line"><span class="xml">component = &#123;</span></span><br><span class="line"><span class="xml">    createComponent(Home)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">/&gt;</span></span><br></pre></td></tr></table></figure>

<p>加个chunkFilename。chunkFilename是除了entry定义的入口js之外的js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].[chunkhash].js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].[chunkhash].js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a>提取公共代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    app: [</span><br><span class="line">        <span class="string">'react-hot-loader/patch'</span>,</span><br><span class="line">        path.join(__dirname, <span class="string">'src/index.js'</span>)</span><br><span class="line">    ],</span><br><span class="line">    vendor: [<span class="string">'react'</span>, <span class="string">'react-router-dom'</span>, <span class="string">'redux'</span>, <span class="string">'react-dom'</span>, <span class="string">'react-redux'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*plugins*/</span></span><br><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    name: <span class="string">'vendor'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> UglifyJSPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="指定坏境"><a href="#指定坏境" class="headerlink" title="指定坏境"></a>指定坏境</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="string">'process.env'</span>: &#123;</span><br><span class="line">                <span class="string">'NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="打包优化"><a href="#打包优化" class="headerlink" title="打包优化"></a>打包优化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>])</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="抽取css"><a href="#抽取css" class="headerlink" title="抽取css"></a>抽取css</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">                use: <span class="string">"css-loader"</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name].[contenthash:5].css'</span>,</span><br><span class="line">            allChunks: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-CSS-Modules"><a href="#使用-CSS-Modules" class="headerlink" title="使用 CSS Modules"></a>使用 CSS Modules</h3><p><a href="http://www.ruanyifeng.com/blog/2016/06/css_modules.html" target="_blank" rel="noopener">教程</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.config.js</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader?modules&amp;localIdentName=[local]-[hash:base64:5]"</span>, <span class="string">"postcss-loader"</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">            fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">            use: [<span class="string">"css-loader?modules&amp;localIdentName=[local]-[hash:base64:5]"</span>, <span class="string">"postcss-loader"</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>你不知道的JS</title>
    <url>/2019/12/28/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS/</url>
    <content><![CDATA[<p>你不知道的JavaScript分为 上、中、下 卷，耐心阅读哦~</p>
<p><a href="https://kingyinliang.github.io/PDF/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89.pdf" target="_blank" rel="noopener">你不知道的JavaScript</a></p>
<a id="more"></a>

<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><blockquote>
<p>所谓编译：分词/词法分析， 解析/语法分析， 代码生成</p>
</blockquote>
<p><strong>分词/词法分析</strong><br>字符串分解为有意义的代码块，这些代码块被分为词法单元<br><strong>解析/语法分析</strong><br>将词法单元流转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树（抽象语法树AST）<br><strong>代码生成</strong><br>将AST转换成可执行的代码</p>
<h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><h4 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h4><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = foo()</span><br><span class="line">baz()</span><br></pre></td></tr></table></figure>

<p>  &nbsp; &nbsp; 拜bar()所声明的位置所赐，它又有涵盖foo()内部作用域的闭包，使得该作用域能够一直存活，以供bar()在之后任何时间进行引用<br>  &nbsp; &nbsp; bar()依然持有对该作用域的引用，这个引用就叫闭包<br>  &nbsp; &nbsp; 这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的词法作用域。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(message)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">wait(<span class="string">"hello,closure!"</span>)</span><br></pre></td></tr></table></figure>

<p>&nbsp; &nbsp; wait 执行1000ms后，它的内部作用域不会消失，timer函数依然保有wait作用域的闭包。setTimeout持有对一个参数的引用。这个参数叫fn或者func，或其他。引擎会调用这个函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.onClick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'btn clicked'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果将函数（访问它们各自的词法作用域）当作第一</span></span><br><span class="line"><span class="comment"> * 级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、</span></span><br><span class="line"><span class="comment"> * Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步（或者同步）任务中，只要使用了回调函数，实际上就是在使用闭包！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    id: <span class="string">"awesome"</span>,</span><br><span class="line">    cool: <span class="function"><span class="keyword">function</span> <span class="title">coolFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> id = <span class="string">"not awesome"</span>;</span><br><span class="line">obj.cool();</span><br><span class="line">setTimeout(obj.cool, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"foo: "</span> + num);</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">&#125;</span><br><span class="line">foo.count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        foo(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>隐式绑定;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">something</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a, something);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = bind(foo, obj);</span><br><span class="line"><span class="keyword">var</span> b = bar(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure>

<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><h4 id="绑定规则"><a href="#绑定规则" class="headerlink" title="绑定规则"></a>绑定规则</h4><h5 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h5><blockquote>
<p>独立函数调用</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">foo() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h5 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h5><blockquote>
<p>调用位置是否包含上下文</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    a: <span class="number">42</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    obj2: obj2</span><br><span class="line">&#125;</span><br><span class="line">obj1.obj2.foo() <span class="comment">// 42</span></span><br></pre></td></tr></table></figure>

<p><strong>隐式丢失</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = obj.foo</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"oops, global"</span></span><br><span class="line">bar()</span><br></pre></td></tr></table></figure>

<h5 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.call(obj) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p><strong>硬绑定</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">something</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a, something)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + something</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = bind(foo, obj)</span><br><span class="line"><span class="keyword">var</span> b = bar(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<p><strong>API调用的“上下文”</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(el, <span class="keyword">this</span>.id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    id: <span class="string">"awesome"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(foo, obj);</span><br></pre></td></tr></table></figure>

<h5 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(bar.a)</span><br></pre></td></tr></table></figure>

<p><strong>优先级</strong></p>
<blockquote>
<p>显示绑定 &gt; new 绑定 &gt; 隐式绑定 &gt; 默认绑定</p>
</blockquote>
<h5 id="被忽略的this"><a href="#被忽略的this" class="headerlink" title="被忽略的this"></a>被忽略的this</h5><p>&nbsp; &nbsp; 如果把null或者undefined作为this的绑定对象传入call，apply或者bind，这些值在调用时会被忽略，实际应用的是默认绑定规则。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a:'</span> + a + <span class="string">'b: '</span> + b)</span><br><span class="line">&#125;</span><br><span class="line">foo.apply(<span class="literal">null</span>, [<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">var</span> bar = foo.bind(<span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">bar(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h5 id="软绑定"><a href="#软绑定" class="headerlink" title="软绑定"></a>软绑定</h5><h5 id="this词法"><a href="#this词法" class="headerlink" title="this词法"></a>this词法</h5><p>箭头函数根据外层作用域来决定this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    a: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = foo.call(obj1)</span><br><span class="line">bar.call(obj2) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>


<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>👇 报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">  suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">  cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">  createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">      <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">suit</span>: <span class="keyword">this</span>.suits[pickedSuit], <span class="attr">card</span>: pickedCard % <span class="number">13</span> &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br></pre></td></tr></table></figure>



<p>👇 能正常访问suits</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">  suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">  cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">  createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">      <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">suit</span>: <span class="keyword">this</span>.suits[pickedSuit], <span class="attr">card</span>: pickedCard % <span class="number">13</span> &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br></pre></td></tr></table></figure>

<p>setInterval中的this指向全局</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Person() 构造函数定义 `this`作为它自己的实例.</span></span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> <span class="title">growUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在非严格模式, growUp()函数定义 `this`作为全局对象, </span></span><br><span class="line">    <span class="comment">// 与在 Person()构造函数中定义的 `this`并不相同.</span></span><br><span class="line">    <span class="keyword">this</span>.age++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">  that.age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> <span class="title">growUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  回调引用的是`that`变量, 其值是预期的对象. </span></span><br><span class="line">    that.age++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.age++; <span class="comment">// |this| 正确地指向 p 实例</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure>

<p>箭头函数是如何保存引用的？ 🤔</p>
]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>react渲染机制：父组件渲染必然导致子组件渲染？</title>
    <url>/2020/02/10/react%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6%EF%BC%9A%E7%88%B6%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E5%BF%85%E7%84%B6%E5%AF%BC%E8%87%B4%E5%AD%90%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%EF%BC%9F/</url>
    <content><![CDATA[<p>在项目中，由于父组件的方法会监听父组件离页面顶部的高度，所以滚动过程中，父组件一直会重新渲染<br>如题：父组件 re-render 一定会导致子组件 re-render 吗？</p>
<a id="more"></a>

<p>一些情况下，我们并不希望子组件受到父组件 re-render 的影响</p>
<ul>
<li>子组件无状态渲染</li>
<li>父组件传给子组件的 props 没有变化</li>
</ul>
<h3 id="父组件渲染，如何保持子组件状态不受影响"><a href="#父组件渲染，如何保持子组件状态不受影响" class="headerlink" title="父组件渲染，如何保持子组件状态不受影响"></a>父组件渲染，如何保持子组件状态不受影响</h3><ul>
<li>shoudComponentUpdate<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> nowWrod = <span class="keyword">this</span>.state.count;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: nowWrod &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;button type=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.state.count&#125;</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;NumberTemp count=&#123;this.state.count&#125; /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class NumberTemp extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  shouldComponentUpdate(nextProps, nextState) &#123;</span></span><br><span class="line"><span class="regexp">    if (this.props.count === nextProps.count) &#123;</span></span><br><span class="line"><span class="regexp">      return false;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return true;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    console.log("render");</span></span><br><span class="line"><span class="regexp">    return &lt;div&gt;&#123;this.props.count&#125;&lt;/</span>div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
如果是引用类型的数据，只会比较是不是同一个地址，而不会比较数据值是否是一样的🤔<br>👇例子中，组件始终不会 re-render，因为 this.state.count 值与 nextState.count 值始终保持一致。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">count</span>: [<span class="string">"rapper"</span>] &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> words = <span class="keyword">this</span>.state.count;</span><br><span class="line">    words.push(<span class="string">"hello "</span>);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: words &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;button type=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.state.count&#125;</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;NumberTemp count=&#123;this.state.count&#125; /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class NumberTemp extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  shouldComponentUpdate(nextProps, nextState) &#123;</span></span><br><span class="line"><span class="regexp">    if (this.props.count === nextProps.count) &#123;</span></span><br><span class="line"><span class="regexp">      return false;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return true;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return &lt;div&gt;&#123;this.props.count&#125;&lt;/</span>div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
如果想让数据变化，<code>const words = this.state.count;</code> 改为 const words = this.state.count.slice(0)，就行了，因为改变了引用地址。</li>
</ul>
<ul>
<li>React.memo</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> words = <span class="keyword">this</span>.state.count;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: words &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;button type=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.state.count&#125;</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;MemoNumb count=&#123;this.state.count&#125; /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const NumberTemp = props =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  console.log("render");</span></span><br><span class="line"><span class="regexp">  return &lt;div&gt;&#123;props.count&#125;&lt;/</span>div&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MemoNumb = React.memo(NumberTemp);</span><br></pre></td></tr></table></figure>

<p>引用数据类型，子组件中的count值不改变</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">count</span>: [<span class="string">"wrapper"</span>] &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> words = <span class="keyword">this</span>.state.count;</span><br><span class="line">    words.push(<span class="string">"hello "</span>);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: words &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;button type=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.state.count&#125;</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;MemoNumb count=&#123;this.state.count&#125; /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">const NumberTemp = props =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  return &lt;div&gt;&#123;props.count&#125;&lt;/</span>div&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">areEqual</span>(<span class="params">prevProps, nextProps</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> MemoNumb = React.memo(NumberTemp, areEqual);</span><br></pre></td></tr></table></figure>

<h3 id="为什么默认情况下，父组件渲染-会-导致子组件渲染-？-🤔"><a href="#为什么默认情况下，父组件渲染-会-导致子组件渲染-？-🤔" class="headerlink" title="为什么默认情况下，父组件渲染 会 导致子组件渲染 ？ 🤔"></a>为什么默认情况下，父组件渲染 会 导致子组件渲染 ？ 🤔</h3>]]></content>
      <categories>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/18/hello-world/</url>
    <content><![CDATA[<h2 id="新人报道，多多指教哦"><a href="#新人报道，多多指教哦" class="headerlink" title="新人报道，多多指教哦~"></a>新人报道，多多指教哦~</h2>]]></content>
  </entry>
  <entry>
    <title>express</title>
    <url>/2019/12/28/express/</url>
    <content><![CDATA[<h3 id="安装nodemon"><a href="#安装nodemon" class="headerlink" title="安装nodemon"></a>安装nodemon</h3><a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>)) <span class="comment">//__dirname是必须的，不然访问不到public目录</span></span><br><span class="line">app.use(<span class="string">'/static'</span>, express.static(__dirname + <span class="string">'/public'</span>)) <span class="comment">//添加路径名称</span></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'port 3000 is listened'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="express实现路由"><a href="#express实现路由" class="headerlink" title="express实现路由"></a>express实现路由</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'root'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'about'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'port 3000 is listened'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="express路由的正则匹配"><a href="#express路由的正则匹配" class="headerlink" title="express路由的正则匹配"></a>express路由的正则匹配</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里的正则匹配与通常的正则匹配不一致，通常的* 匹配&#123;0,n&#125; 因为这里不是正则匹配</span></span><br><span class="line"><span class="comment">// 但是这里的*匹配任意字符，而* 前面的ab和后面的cd是必须要有的</span></span><br><span class="line">app.get(<span class="string">'/ab*cd'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'ab'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//完全的正则匹配，注意和上面的区别</span></span><br><span class="line">app.get(<span class="regexp">/a/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'anything string has a'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回json字符串</span></span><br><span class="line"><span class="comment">// 同样还有-和.匹配</span></span><br><span class="line">app.get(<span class="string">'/users/:userId/books/:bookId'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(req.params)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/example/b'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'the response will be sent by the next function ...'</span>)</span><br><span class="line">    next()</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello from B'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 匹配两个function是有什么用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 /user/:id 路径中为任何类型的 HTTP 请求执行此函数。</span></span><br><span class="line">app.use(<span class="string">'/user/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 此函数处理针对 /user/:id 路径的 GET 请求</span></span><br><span class="line">app.get(<span class="string">'/user/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>React-IMVC</title>
    <url>/2019/12/28/React-IMVC/</url>
    <content><![CDATA[<h3 id="带着问题去学习"><a href="#带着问题去学习" class="headerlink" title="带着问题去学习"></a>带着问题去学习</h3><ol>
<li>nodejs环境如何加载前端组件</li>
<li>组件的数据如何获取</li>
<li>HMR怎么做</li>
<li>CSS如何处理</li>
<li>如何拼接成完整的HTML结构返回</li>
<li>双端渲染结果不一致怎么办</li>
<li>如何进行路由分割</li>
<li>如何降级为客户端渲染</li>
<li>生产环境如何发布应用</li>
</ol>
<a id="more"></a>

<p><a href="https://juejin.im/post/5af443856fb9a07abc29f1eb" target="_blank" rel="noopener">React 实现服务端渲染</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/63744358?utm_source=wechat_session&utm_medium=social&utm_oi=940270556197728256" target="_blank" rel="noopener">函数式编程思想推荐阅读</a></p>
<p><a href="https://imweb.io/topic/5b189d04d4c96b9b1b4c4ed6" target="_blank" rel="noopener">React setState 实现原理</a></p>
<p><a href="https://dev.to/" target="_blank" rel="noopener">开发网站</a></p>
<p><a href="https://mp.weixin.qq.com/s/23f64lu-qAEAK76lFYyzow" target="_blank" rel="noopener">利用webpack搭建脚手架一套完整流程</a></p>
<p><a href="https://mp.weixin.qq.com/s/-Il3V0dtDA3JR1okK2yJyw" target="_blank" rel="noopener">同构</a></p>
<p><a href="https://mp.weixin.qq.com/s/W8-Cu8Mjh00Rze5o4bFKag" target="_blank" rel="noopener">css 整理</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// react-imvc 高阶组件源码</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * connect 是一个高阶函数，第一次调用时接受 selector 函数作为参数，返回 withData 函数。</span></span><br><span class="line"><span class="comment"> * withData 函数接受一个 React 组件作为参数，返回新的 React 组件。withData 会将 selector 函数返回的数据，作为 props 传入新的 React 组件</span></span><br><span class="line"><span class="comment"> * selector(&#123; state, handlers, actions &#125;) 函数将得到一个 data 参数，其中包含三个字段 state, handlers, acitons，分别对应 controller 里的 global state, global handlers 和 actions 对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> GlobalContext <span class="keyword">from</span> <span class="string">'../context'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> returnNull = <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (selector = returnNull) =&gt; <span class="function"><span class="params">InputComponent</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">Connector</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            GlobalContext.Consumer &gt; &#123;</span></span><br><span class="line"><span class="xml">                (&#123;</span></span><br><span class="line"><span class="xml">                    state,</span></span><br><span class="line"><span class="xml">                    handlers,</span></span><br><span class="line"><span class="xml">                    actions</span></span><br><span class="line"><span class="xml">                &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                    return ( <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">                        InputComponent &#123;</span></span><br><span class="line"><span class="xml">                            ...props</span></span><br><span class="line"><span class="xml">                        &#125; &#123;</span></span><br><span class="line"><span class="xml">                            ...selector(&#123;</span></span><br><span class="line"><span class="xml">                                state,</span></span><br><span class="line"><span class="xml">                                handlers,</span></span><br><span class="line"><span class="xml">                                actions,</span></span><br><span class="line"><span class="xml">                                props</span></span><br><span class="line"><span class="xml">                            &#125;)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                        /&gt;</span></span><br><span class="line"><span class="xml">                    )</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            /GlobalContext.Consumer&gt;</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> withData = connect((&#123;</span><br><span class="line">    state</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        content: state.loadingText</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withData(Loading);</span><br><span class="line"></span><br><span class="line">connect(selector)(ReactComponent);</span><br><span class="line"><span class="comment">// connect 是一个高阶函数，第一次调用时接受 selector 函数作为参数，返回 withData 函数。</span></span><br><span class="line"><span class="comment">// withData 函数接受一个 React 组件作为参数，返回新的 React 组件</span></span><br><span class="line"><span class="comment">// withData 会将 selector 函数返回的数据，作为 props 传入新的 React 组件。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperties(exports, &#123;</span><br><span class="line">    For: &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        value: For</span><br><span class="line">    &#125;,</span><br><span class="line">    __esModule: &#123;</span><br><span class="line">        value: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, props);</span><br><span class="line"><span class="comment">// __esModule表示引入的是es6模块</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor);</span><br></pre></td></tr></table></figure>

<p>取消浏览器记录滚动条位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"scrollRestoration"</span> <span class="keyword">in</span> history) &#123;</span><br><span class="line">    history.scrollRestoration = <span class="string">"manual"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.onunload = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>history.scrollRestoration 是新增的一个属性，值为 auto|manual, 默认为 auto 记录滚动条位置, 设为 manual 时就禁用记录位置的功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    history.scrollRestoration = <span class="string">'manual'</span>;</span><br><span class="line">&#125;</span><br><span class="line">componentWillUnMount() &#123;</span><br><span class="line">    history.scrollRestoration = <span class="string">'auto'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: [path.resolve(__dirname, <span class="string">"../src/single/index.js"</span>)]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">"../dist"</span>),</span><br><span class="line">        filename: <span class="string">"[name].[chunkhash:8].js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>webpack 中对代码进行了哪些操作？<br>1、 多文件时可以进行代码切割</p>
<ul>
<li>若入口（pageA, pageB）都用到了 utilB，我们希望把它抽离成单独文件，并且当用户访问 pageA 和 pageB 的时候都能去加载 utilB 这个公共模块，而不是存在于各自的入口文件中。</li>
<li>pageB 中 utilC 不是页面一开始加载时候就需要的内容，假如 utilC 很大，我们不希望页面加载时就直接加载 utilC，而是当用户达到某种条件(如：点击按钮)才去异步加载 utilC，这时候我们需要将 utilC 抽离成单独文件，当用户需要的时候再去加载该文件。</li>
</ul>
<p>多文件打包示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        pageA: [path.resolve(__dirname, <span class="string">"./src/multiple/pageA.js"</span>)],</span><br><span class="line">        pageB: path.resolve(__dirname, <span class="string">"./src/multiple/pageB.js"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">        filename: <span class="string">"[name].[chunkhash:8].js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                commons: &#123;</span><br><span class="line">                    chunks: <span class="string">"initial"</span>,</span><br><span class="line">                    minChunks: <span class="number">2</span>,</span><br><span class="line">                    maxInitialRequests: <span class="number">5</span>,</span><br><span class="line">                    minSize: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                vendor: &#123;</span><br><span class="line">                    test: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                    chunks: <span class="string">"initial"</span>,</span><br><span class="line">                    name: <span class="string">"vendor"</span>,</span><br><span class="line">                    priority: <span class="number">10</span>,</span><br><span class="line">                    enforce: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>打包出来分为：<br>1、 业务代码文件，<br>2、 共同模块文件<br>3、 异步加载的文件会直接抽离</p>
<p>react-imvc preload是如何实现的？ </p>
<p>preload提前加载的方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 link 标签静态标记需要预加载的资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"/path/to/style.css"</span> <span class="attr">as</span>=<span class="string">"style"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 或使用脚本动态创建一个 link 标签后插入到 head 头部</span></span><br><span class="line"><span class="comment">// 当浏览器解析到这行代码就会去加载 href 中对应的资源但不执行，待到真正使用到的时候再执行</span></span><br><span class="line"><span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</span><br><span class="line">link.rel = <span class="string">'preload'</span>;</span><br><span class="line">link.as = <span class="string">'style'</span>;</span><br><span class="line">link.href = <span class="string">'/path/to/style.css'</span>;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(link);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 HTTP 响应头中加上 preload 字段</span></span><br></pre></td></tr></table></figure>

<p>React组件还有很多个地方可以直接访问父组件提供的Context：</p>
<ul>
<li>构造方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props, context)</span><br></pre></td></tr></table></figure>

<ul>
<li>生命周期</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">-componentWillReceiveProps(nextProps, nextContext) -</span><br><span class="line">    shouldComponentUpdate(nextProps, nextState, nextContext) -</span><br><span class="line">    componetWillUpdate(nextProps, nextState, nextContext)</span><br></pre></td></tr></table></figure>

<ul>
<li>对于面向函数的无状态组件，可以通过函数的参数直接访问组件的context</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> StatelessComponent = <span class="function">(<span class="params">props, context</span>) =&gt;</span> (</span><br><span class="line">    ....</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>React.createContext 用法欠缺点。对于嵌套很深的context使用起来很臃肿</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CurrentRoute = React.createContext(&#123;</span><br><span class="line">    path: <span class="string">'/welcome'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> CurrentUser = React.createContext(&#123;</span><br><span class="line">    name: <span class="string">'33'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> IsStatic = React.createContext(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        CurrentRoute.Consumer &gt; &#123;</span></span><br><span class="line"><span class="xml">            currentRoute =&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            CurrentUser.Consumer &gt; &#123;</span></span><br><span class="line"><span class="xml">                currentUser =&gt;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">                IsStatic.Consumer &gt; &#123;</span></span><br><span class="line"><span class="xml">                    isStatic =&gt;</span></span><br><span class="line"><span class="xml">                    !isStatic &amp;&amp;</span></span><br><span class="line"><span class="xml">                    currentRoute.path === '/welcome' &amp;&amp;</span></span><br><span class="line"><span class="xml">                    (currentUser ?</span></span><br><span class="line"><span class="xml">`Welcome back, $&#123;currentUser.name&#125;!` :</span></span><br><span class="line"><span class="xml">                        'Welcome!'</span></span><br><span class="line"><span class="xml">                    )</span></span><br><span class="line"><span class="xml">                &#125; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">                /IsStatic.Consumer&gt;</span></span><br><span class="line">            &#125; &lt;</span><br><span class="line">            /CurrentUser.Consumer&gt;</span><br><span class="line">        &#125; &lt;</span><br><span class="line">        /CurrentRoute.Consumer&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;</span><br><span class="line">    useContext</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CurrentRoute = React.createContext(&#123;</span><br><span class="line">    path: <span class="string">'/welcome'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> CurrentUser = React.createContext(<span class="literal">undefined</span>)</span><br><span class="line"><span class="keyword">const</span> IsStatic = React.createContext(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> currentRoute = useContext(CurrentRoute)</span><br><span class="line">    <span class="keyword">let</span> currentUser = useContext(CurrentUser)</span><br><span class="line">    <span class="keyword">let</span> isStatic = useContext(IsStatic)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        !isStatic &amp;&amp;</span><br><span class="line">        currentRoute.path === <span class="string">'/welcome'</span> &amp;&amp;</span><br><span class="line">        (currentUser ?</span><br><span class="line"><span class="string">`Welcome back, <span class="subst">$&#123;currentUser.name&#125;</span>!`</span> :</span><br><span class="line">            <span class="string">'Welcome!'</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    useContext</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> GlobalContext <span class="keyword">from</span> <span class="string">'../context'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;</span><br><span class="line">        ctrl</span><br><span class="line">    &#125; = useContext(GlobalContext)</span><br><span class="line">    <span class="keyword">return</span> ctrl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>connect是一个高阶函数，第一次调用时接受selector函数作为参数，返回withData函数<br>withData函数接受一个React组件作为参数，返回新的react组件，withData会将selector函数返回的数据，作为props传入新的react组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> connect <span class="keyword">from</span> <span class="string">'react-imvc/hoc/connect'</span></span><br><span class="line"><span class="keyword">const</span> withData = connect((&#123;</span><br><span class="line">    state</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        content: state.loadingText</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withData(Loading)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Loading</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!props.content) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        div id = "wxloading"</span></span><br><span class="line"><span class="xml">        className = "wx_loading" &gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        div className = "wx_loading_inner" &gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        i className = "wx_loading_icon" / &gt; &#123;</span></span><br><span class="line"><span class="xml">            props.content</span></span><br><span class="line"><span class="xml">        &#125; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        /div&gt;</span> <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        /div&gt;</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>React 生命周期</title>
    <url>/2020/02/14/React-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<p>本文对 React 生命周期以及 setState 在各个生命周期中的使用作整理。</p>
<a id="more"></a>

<h3 id="UNSAFE-componentWillMount"><a href="#UNSAFE-componentWillMount" class="headerlink" title="UNSAFE_componentWillMount"></a>UNSAFE_componentWillMount</h3><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>render 函数必须是纯的，没有任何副作用<br>在 render 中调用 setState 会产生无限循环</p>
<h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><p>compentDidMount 方法会在元素 mount 之后 立即执行。调用 setState ，会引起另一次渲染</p>
<h3 id="UNSAFE-componentWillReceiveProps-nextProps"><a href="#UNSAFE-componentWillReceiveProps-nextProps" class="headerlink" title="UNSAFE_componentWillReceiveProps(nextProps)"></a>UNSAFE_componentWillReceiveProps(nextProps)</h3><h3 id="static-getDerivedStateFromProps"><a href="#static-getDerivedStateFromProps" class="headerlink" title="static getDerivedStateFromProps"></a>static getDerivedStateFromProps</h3><p>它在 render 之前执行，getDerivedStateFromProps 返回一个对象 去更新 state。</p>
<h3 id="shouldComponentUpdate-nextProps-nextState"><a href="#shouldComponentUpdate-nextProps-nextState" class="headerlink" title="shouldComponentUpdate(nextProps, nextState)"></a>shouldComponentUpdate(nextProps, nextState)</h3><p><strong>Should I re-render my component ？</strong><br>当组件的 state 或者 props 改变，但是不想组件 重新渲染的时候 使用。shouldComponentUpdate 是为了让 react 知道，组件不会被 state 或者 props 的改变影响。改变 state 或者 props 的时候不想让组件更新的时候可以使用这个生命周期。<br>在这个生命周期中不能 setState 。</p>
<h3 id="UNSAFE-componentWillUpdate-nextProps-nextState"><a href="#UNSAFE-componentWillUpdate-nextProps-nextState" class="headerlink" title="UNSAFE_componentWillUpdate(nextProps, nextState)"></a>UNSAFE_componentWillUpdate(nextProps, nextState)</h3><p>getSnapshotBeforeUpdate(prevProps, prevState)</p>
<h3 id="getSnapshotBeforeUpdate"><a href="#getSnapshotBeforeUpdate" class="headerlink" title="getSnapshotBeforeUpdate"></a>getSnapshotBeforeUpdate</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class="line">    <span class="keyword">return</span> prevProps;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(snapshot);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button type=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.count&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="componentDidUpdate-prevProps-prevState"><a href="#componentDidUpdate-prevProps-prevState" class="headerlink" title="componentDidUpdate(prevProps, prevState)"></a>componentDidUpdate(prevProps, prevState)</h3><p>可以在 componentDidUpdate 中 setState， 但是 必须被终止条件包裹，否则会引起无限循环</p>
<h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><h3 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="forceUpdate"></a>forceUpdate</h3><p>👇例子中 必须要对方法 bind this <a href="https://www.freecodecamp.org/news/this-is-why-we-need-to-bind-event-handlers-in-class-components-in-react-f7ea1a6f93eb/" target="_blank" rel="noopener">why</a><br>forceUpdate 直接对组件进行 re-render<br>forceUpdate 将跳过 shouldComponentUpdate 生命周期。但是对子组件，还是会正常触发生命周期的，包括 shouldComponentUpdate</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="comment">// 这里必须要bind this，否则会报错 🤔</span></span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.forceUpdate();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div ref=&#123;<span class="keyword">this</span>.refCallback&#125; style=&#123;&#123; <span class="attr">border</span>: <span class="string">"1px solid red"</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125; /&gt;</span><br><span class="line">        &#123;<span class="built_in">Math</span>.random()&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="为什么-react-class-component-中的方法，需要-bind-this"><a href="#为什么-react-class-component-中的方法，需要-bind-this" class="headerlink" title="为什么 react class component 中的方法，需要 bind this"></a>为什么 react class component 中的方法，需要 bind this</h3><ul>
<li>如果不绑定 this，代码如下👇</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;hello&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印内容</p>
<ul>
<li>在严格模式下：undefined</li>
<li>非严格模式下：全局对象<br><img src="http://ww1.sinaimg.cn/large/92babc53gy1gbvysmvugpj20t605o74u.jpg" alt="image.png"><br>handleClick 丢失了上下文 和 this 的值</li>
</ul>
<p>原理同👇</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  display()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo(<span class="string">'Saurabh'</span>);</span><br><span class="line">foo.display(); <span class="comment">// Saurabh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> display = foo.display; </span><br><span class="line">display(); <span class="comment">// TypeError: this is undefined</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript内存泄漏</title>
    <url>/2020/01/21/JavaScript%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</url>
    <content><![CDATA[<p>平时工作中基本没有考虑过内存泄漏的情况，也是因为没有遇到过内存泄漏的情况。<br>有说JavaScript有自己的垃圾回收机制</p>
<h3 id="带着问题去学习"><a href="#带着问题去学习" class="headerlink" title="带着问题去学习"></a>带着问题去学习</h3><ol>
<li>什么情况会引起内存泄漏</li>
<li>JavaScript内存泄漏机制</li>
<li><strong>闭包在内存中是什么导致的？</strong></li>
<li>从内存来看 null 和 undefined 本质的区别是什么？null 表示一个空对象指针 ，释放内存空间可以用 a=null</li>
<li>为什么typeof(null) //object typeof(undefined) //undefined？<a id="more"></a>

</li>
</ol>
<h3 id="基础回顾"><a href="#基础回顾" class="headerlink" title="基础回顾"></a>基础回顾</h3><p>JS中的基础数据类型，这些值都有固定的大小，往往都保存在栈内存中（闭包除外），由系统自动分配存储空间。我们可以直接操作保存在栈内存空间的值，因此基础数据类型都是按值访问 数据在栈内存中的存储与使用方式类似于数据结构中的堆栈数据结构，遵循后进先出的原则</p>
<p><a href="https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/" target="_blank" rel="noopener">参考文章</a><br><a href="https://medium.com/@ethannam/javascripts-memory-model-7c972cd2c239" target="_blank" rel="noopener">javascript内存模型</a></p>
<h3 id="什么是内存泄漏"><a href="#什么是内存泄漏" class="headerlink" title="什么是内存泄漏"></a>什么是内存泄漏</h3><p>当一个应用的内存不再被需要的时候，但是由于某些原因，内存没有被释放给操作系统或者内存区。编程语言倾向于通过不同的方式管理内存。这会减少内存泄漏的发生。然而，一片内存是否被使用是不确定事件。只有开发者可以判断清楚内存是否因为还给操作系统。一部分编程语言提供方法给开发者去做这件事情。另一部分希望开发者明确哪一部分内存是没有被使用的。</p>
<h3 id="JavaScript中的内存管理"><a href="#JavaScript中的内存管理" class="headerlink" title="JavaScript中的内存管理"></a>JavaScript中的内存管理</h3><p>JavaScript是一种GC语言。他通过周期性的检查，之前分配的内存是否还 在被使用，帮助开发者管理内存。</p>
<h3 id="垃圾收集是如何决定内存回收"><a href="#垃圾收集是如何决定内存回收" class="headerlink" title="垃圾收集是如何决定内存回收"></a>垃圾收集是如何决定内存回收</h3><h4 id="内存泄漏的主要起因是引用"><a href="#内存泄漏的主要起因是引用" class="headerlink" title="内存泄漏的主要起因是引用"></a>内存泄漏的主要起因是引用</h4><blockquote>
<p>不合理的引用是导致内存泄漏的主要原因。</p>
</blockquote>
<p><strong>标记清除</strong></p>
<ol>
<li>垃圾收集器建立一个roots列表。roots一般是全局变量，并且在代码中保存了引用。在JavaScript中，window就是其中一个root。window始终存在。垃圾收集器会认为window和window的子类会始终存在。</li>
<li>所有的roots被检查并且被标记为active，子类也各自被检查。可以从root追踪到的都不被认为是垃圾。</li>
<li>没有标记的内存会被认为是垃圾。收集器会释放内存。</li>
</ol>
<p>现代收集器改进了算法，但本质是一样的：reachable 内存被标记，其他的内存当做垃圾。<br>不需要的引用是指：开发者不需要这些引用，但是由于某些原因，依然保存在root的子类中。</p>
<h3 id="常见JavaScript内存泄漏"><a href="#常见JavaScript内存泄漏" class="headerlink" title="常见JavaScript内存泄漏"></a>常见JavaScript内存泄漏</h3><ol>
<li>意外的全局变量</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    bar = <span class="string">"this is an explicit global variable"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.bar = <span class="string">"this is an explicit global variable"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一个可以意外创建全局变量的方式是通过this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bar = <span class="string">"this is an explicit global variable"</span></span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p>函数foo内部忘记使用var，意外创建了一个全局变量。<br><strong>全局变量注意事项</strong></p>
<blockquote>
<p>当全局变量用于临时存储和处理大量信息时，需要小心。如果必须使用全局变量存储大量数据时，确保用完以后把它设置为null或者重新定义</p>
</blockquote>
<ol start="2">
<li>被遗忘的计时器或回调函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someResource = getData()</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="string">"Node"</span>)</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        node.innerHTML = <span class="built_in">JSON</span>.stringify(someResource)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>与节点或数据关联的计时器不再需要，node对象可以删除，整个回调函数也不需要了。可是，计数器回调函数要等计时器停止才会被回收。同时，someResource如果存储了大量的数据，也是无法被回收的。</p>
<p>对于观察者的例子，一旦不再需要他们，明确移除他们非常重要。老的IE6是无法处理循环引用的。如今，即使没有明确移除他们，一旦观察者对象变得不可达，大部分浏览器是可以回收观察者处理函数的。</p>
<p><strong>观察者代码示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClick</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    element.innerHTML = <span class="string">'text'</span></span><br><span class="line">&#125;</span><br><span class="line">element.addEventListener(<span class="string">'click'</span>, onClick)</span><br></pre></td></tr></table></figure>

<p>当对node添加了观察者之后，就会导致内存泄漏。但是，当前浏览器会监测循环引用并且正确的进行处理，调用removeEventListener不是必须的了。</p>
<ol start="3">
<li>脱离DOM的引用</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = &#123;</span><br><span class="line">    button: <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>),</span><br><span class="line">    image: <span class="built_in">document</span>.getElementById(<span class="string">'image'</span>),</span><br><span class="line">    text: <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    image.src = <span class="string">'http://some.url/image'</span></span><br><span class="line">    button.click()</span><br><span class="line">    <span class="built_in">console</span>.log(text.innerHTML)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(<span class="built_in">document</span>.getElementById(<span class="string">'button'</span>))</span><br><span class="line">    <span class="comment">// 当前，在全局依然有button的引用。button还会保存在内存中并且并不能被GC回收</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> refA = <span class="built_in">document</span>.getElementById(<span class="string">'refA'</span>)</span><br><span class="line"><span class="built_in">document</span>.body.removeChild(refA)</span><br></pre></td></tr></table></figure>

<p>解决方法：refA = null</p>
<ol start="4">
<li>闭包</li>
</ol>
<p><strong>匿名函数可以访问父级作用域的变量</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">document</span>.createElement(<span class="string">"XXX"</span>)</span><br><span class="line">    <span class="keyword">var</span> unused = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj, <span class="string">"闭包引用"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> theThing = <span class="literal">null</span></span><br><span class="line"><span class="keyword">var</span> replaceThing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> originalThing = theThing</span><br><span class="line">    <span class="keyword">var</span> unused = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (originalThing) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"hi"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        theThing = &#123;</span><br><span class="line">            longStr: <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10000000</span>).join(<span class="string">'*'</span>),</span><br><span class="line">            someMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(someMessage)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">setInterval(replaceThing, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<p>解决方法：手动解除引用obj = null</p>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title>Iterm 2 settings</title>
    <url>/2019/12/28/Iterm-2-settings/</url>
    <content><![CDATA[<p>本文记录 oh my zsh 及其插件的安装方法。在item使用过程中常用的一些命令</p>
<a id="more"></a>

<p><code>cat /etc/shells</code><br>查看系统有几个shell bash是mac中terminal自带的shell，把它换成zsh，这个的功能要多得多。拥有语法高亮，命令行tab补全，自动提示符，显示Git仓库状态等功能<br><code>chsh -s /bin/zsh</code> 设置默认shell<br><code>cd ~/.ssh</code> 进入ssh文件夹<br><code>open ~/.ssh</code> 打开ssh文件夹<br><code>cmd + w</code> 关闭当前页<br><code>history</code> 查看命令<br><code>cd ~</code> 访问用户目录<br><code>cd /</code> 访问根目录<br><code>clear</code> 清空<br><code>pwd</code> 显示当前目录</p>
<h3 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh my zsh"></a>安装 oh my zsh</h3><p><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code> </p>
<h3 id="oh-my-zsh语法高亮插件"><a href="#oh-my-zsh语法高亮插件" class="headerlink" title="oh-my-zsh语法高亮插件"></a>oh-my-zsh语法高亮插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;.oh-my-zsh&#x2F;custom&#x2F;plugins&#x2F;</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git</span><br><span class="line">vi ~&#x2F;.zshrc</span><br><span class="line">plugins&#x3D;(</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">  git </span><br><span class="line">  z</span><br><span class="line">  )</span><br><span class="line">source ~&#x2F;.zshrc</span><br><span class="line">运行 source ~&#x2F;.zshrc 更新配置后重启item2</span><br></pre></td></tr></table></figure>

<h3 id="快捷命令"><a href="#快捷命令" class="headerlink" title="快捷命令"></a>快捷命令</h3><p><code>z</code> 快速进入常用文件<br><code>trash</code> 相当于 <code>rm -rf</code> 删除某个文件，但是会放到垃圾箱里面</p>
<h3 id="oh-my-zsh命令自动补全插件"><a href="#oh-my-zsh命令自动补全插件" class="headerlink" title="oh-my-zsh命令自动补全插件"></a>oh-my-zsh命令自动补全插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;.oh-my-zsh&#x2F;custom&#x2F;plugins&#x2F;</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions</span><br><span class="line">vi ~&#x2F;.zshrc</span><br><span class="line">plugins&#x3D;(</span><br><span class="line">  git </span><br><span class="line">  z</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">  )</span><br><span class="line">source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>

<h3 id="code-自动在新窗口中打开项目"><a href="#code-自动在新窗口中打开项目" class="headerlink" title="code . 自动在新窗口中打开项目"></a>code . 自动在新窗口中打开项目</h3><p><code>shift + command + p</code> -&gt; shell command  -&gt; install ‘code’ command in PATH</p>
]]></content>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/2020/01/13/HTTP/</url>
    <content><![CDATA[<p>本篇整理 《图解HTTP》 以及 《HTTP权威指南》相关知识点</p>
<h3 id="HTTP-首部"><a href="#HTTP-首部" class="headerlink" title="HTTP 首部"></a>HTTP 首部</h3><h3 id="Access-Control-Expose-Headers"><a href="#Access-Control-Expose-Headers" class="headerlink" title="Access-Control-Expose-Headers"></a>Access-Control-Expose-Headers</h3><blockquote>
<p>列出了哪些首部可以作为响应的一部分暴露给外部</p>
</blockquote>
<p>默认情况下，只有6种简单响应首部可以暴露给外部</p>
<ul>
<li>Cache-Control</li>
<li>Content-Language</li>
<li>Content-Type</li>
<li>Expires</li>
<li>Last-Modified</li>
<li>Pragma</li>
</ul>
<h3 id="access-control-allow-credentials"><a href="#access-control-allow-credentials" class="headerlink" title="access-control-allow-credentials"></a>access-control-allow-credentials</h3><blockquote>
<p>表示是否可以将对请求的响应暴露给页面</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>底部导航</title>
    <url>/2019/12/28/ButtonNav/</url>
    <content><![CDATA[<p>底部导航项目经历</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> checkIsCurrentBottom = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isBottom =</span><br><span class="line">        <span class="built_in">window</span>.pageYOffset + <span class="built_in">document</span>.body.clientHeight ===</span><br><span class="line">        <span class="built_in">document</span>.documentElement.scrollHeight;</span><br><span class="line">    <span class="keyword">return</span> isBottom;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handleScrollCallBack = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断滚动条是否到达页面最底部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> isCurrentBottom = checkIsCurrentBottom();</span><br><span class="line">    handleAddGap(isCurrentBottom);</span><br><span class="line">&#125;;</span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    handleScrollCallBack();</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">"scroll"</span>, handleScrollCallBack);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">window</span>.removeEventListener(<span class="string">"scroll"</span>, handleScrollCallBack);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bottomNav是一个function 函数</span></span><br><span class="line"><span class="comment"> * 在这个函数里面更新一个全局的状态，会导致调用爆栈</span></span><br><span class="line"><span class="comment"> * 1、Render methods should be a pure function of props and state; </span></span><br><span class="line"><span class="comment"> * triggering nested component updates from render is not allowed. </span></span><br><span class="line"><span class="comment"> * If necessary, trigger nested updates in componentDidUpdate.</span></span><br><span class="line"><span class="comment"> * Check the render method of BottomNavigation.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2、Maximum update depth exceeded. </span></span><br><span class="line"><span class="comment"> * This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. </span></span><br><span class="line"><span class="comment"> * React limits the number of nested updates to prevent infinite loops.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  tangram 这个项目对css的敏感度要求比较高。底部导航的问题，本来以为只有offline需要修改，前端js这边并没有限制，</span></span><br><span class="line"><span class="comment"> *  后来offline发布后，前端的显示尺寸还是一样的。原因就是css限制了图片的展示大小。应该要先看下css的。</span></span><br><span class="line"><span class="comment"> *  从这也可以看出函数式编程的重要性了，代码中不应该或者尽量少的常量值，尽可能多的配置项，不然offline一修改，你这边也得跟着修改</span></span><br><span class="line"><span class="comment"> *  就算是css的水平垂直居中，也不应该使用固定元素宽高的那种方式。哎！惨遭打脸</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过offline下发的图片尺寸自动更新img大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = finalShowImage</span><br><span class="line"><span class="built_in">console</span>.log(img.width, img.height)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个时候打印出来的img.width 和 img.height 有可能是 0。</span></span><br><span class="line"><span class="comment"> * 宽高都是0的这个结果很正常，因为图片的相关数据都没有被加载前它的宽高默认就是0，我们需要它加载完所有的相关数据再获取宽和高</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 因此： 需要 onload 加载所有的相关数据后，取宽高</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = finalShowImage</span><br><span class="line">img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setImgSize(&#123;</span><br><span class="line">        imgWidth: img.width,</span><br><span class="line">        imgHeight: img.height</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过onload就能获取到图片的宽高了。但onload大一点的图通常都比较慢，</span></span><br><span class="line"><span class="comment"> * 不实用，但只要图片被浏览器缓存，那么图片加载几乎就不用等待即可触发onload，我们要的是占位符。</span></span><br><span class="line"><span class="comment"> * 所以有些人通过缓存获取也可以这么写。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = finalShowImage</span><br><span class="line"><span class="keyword">if</span> (img.complete) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img.width, img.height)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(img.width, img.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过定时循环检测获取</span></span><br><span class="line"><span class="comment"> * 各浏览器执行结果都能看到通过快速获取图片大小的方法几乎都在200毫秒以内，</span></span><br><span class="line"><span class="comment"> * 而onload至少五秒以上，这差别之大说明快速获取图片宽高非常实用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> start_time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = finalShowImage</span><br><span class="line"><span class="keyword">let</span> check = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (img.width &gt; <span class="number">0</span> || img.height &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        clearInterval(<span class="keyword">set</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let <span class="keyword">set</span> = setInterval(check, 40)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 这些操作过程要等到componentDidMount之后才能开始进行。所以会比较慢。</span><br><span class="line"> * 有了缓存之后onload就比较快了</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 底部导航图片已经加装完成，但是却没有立刻渲染。原因</span><br><span class="line"> *   会二次调用 useImage判断图片是否加载完成，useImage也没有占用太多时间，主要是要等到componentDidFirstMount之后才会触发事件</span><br><span class="line"> *</span><br><span class="line"> * 所以图片会先加载，然后调用useImage判断图片是否加载完成，而这个过程一定要等到 componentDidFirstMount ，因此造成 图片加载完成却没有立刻渲染的现象</span><br><span class="line"> *</span><br><span class="line"> * useImage 中的 useEffect 只会执行四次</span><br><span class="line"> * </span><br><span class="line"> *  但是在network里面是能看到图片的请求的</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>online 踩坑</p>
<ul>
<li><p><code>React.createRef()</code> </p>
<ul>
<li><code>function component</code> 在每次状态更新 <code>updateState</code> 的时候都会重刷页面，如果 <code>const video = React.createRef()</code> 放在 <code>function component</code> 中，那么 <code>setState</code> 之后 会重新 <code>React.createRef()</code> , 拿到的 <code>video.current === null</code> ，将 <code>const video = React.createRef()</code> 当成全局变量放在组件外部，则可以保证每次拿到的 <code>video</code> 都是原始的，但是多个视频组件被调用就会有问题，多个视频组件触发的行为都是同一个视频组件的。</li>
</ul>
</li>
<li><p><code>useRef</code> 解决了这种问题，更新状态后 始终拿到的是该视频组件的 <code>video</code> </p>
</li>
<li><p><code>functional component</code> 还是多使用hook吧，官方文档也都是用的 <code>useRef</code> </p>
</li>
</ul>
<p>底部导航</p>
<p>解决方案：如果不需要保底逻辑（未加载完成的时候显示文字），可以直接服务端渲染，效果类似icon宫格<br>如果需要保底逻辑。对比差别：<br>先清除缓存，图片下载结束会立即更新，<br>如果是已有缓存，因为判断图片加载完成需要在客户端进行，所以底部导航也有变化的过程，比icon宫格还是慢一点，和市场部广告出现的时间是一致的。</p>
<p>Tips: </p>
<ul>
<li>尝试： 更改样式，文字始终展示，图片加载成功自动覆盖文字。解决image onload判断时间长的问题。</li>
<li>操作： </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> emitFailed = statusDefault === <span class="string">'failed'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> imgFailed = emitFailed &amp;&amp; showImg</span><br><span class="line"><span class="keyword">let</span> imgStyle = &#123;</span><br><span class="line">        width: imgReady ? <span class="string">`<span class="subst">$&#123;imgWidth <span class="regexp">/ 100&#125;rem` : (imgFailed ? '0' : '1.48rem'),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">        height: imgReady ? `$&#123;imgHeight /</span> <span class="number">100</span>&#125;</span>rem`</span> : (imgFailed ? <span class="string">'0'</span> : <span class="string">'0.98rem'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;</span><br><span class="line">    p &gt; &#123;</span><br><span class="line">        text</span><br><span class="line">    &#125; &lt; <span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure>

<p>  问题：如果图片加载失败，会展示一段时间的失败图片，再被替换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt; ImageHelper imgUniqueId = &#123;</span><br><span class="line">    imgUniqueId</span><br><span class="line">&#125;</span><br><span class="line">textUniqueId = &#123;</span><br><span class="line">    textUniqueId</span><br><span class="line">&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ImageHelper</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    imgUniqueId,</span></span></span><br><span class="line"><span class="function"><span class="params">    textUniqueId</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="string">`&lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">  var targetImage_<span class="subst">$&#123;imgUniqueId&#125;</span> = document.querySelector('#<span class="subst">$&#123;imgUniqueId&#125;</span>');</span></span><br><span class="line"><span class="string">  var targetText_<span class="subst">$&#123;textUniqueId&#125;</span> = document.querySelector('#<span class="subst">$&#123;textUniqueId&#125;</span>');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function setImageStyle(textNode, imageNode) &#123;</span></span><br><span class="line"><span class="string">    if(textNode &amp;&amp; imageNode) &#123;</span></span><br><span class="line"><span class="string">      textNode.style.display = 'none';</span></span><br><span class="line"><span class="string">      imageNode.style.height = imageNode.naturalHeight / 100 + 'rem';</span></span><br><span class="line"><span class="string">      imageNode.style.width = imageNode.naturalWidth / 100 + 'rem';</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  if(targetImage_<span class="subst">$&#123;imgUniqueId&#125;</span>) &#123;</span></span><br><span class="line"><span class="string">    if(!!targetImage_<span class="subst">$&#123;imgUniqueId&#125;</span>.naturalHeight) &#123;</span></span><br><span class="line"><span class="string">      setImageStyle(targetText_<span class="subst">$&#123;textUniqueId&#125;</span>, targetImage_<span class="subst">$&#123;imgUniqueId&#125;</span>)</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      targetImage_<span class="subst">$&#123;imgUniqueId&#125;</span>.onload = function() &#123;</span></span><br><span class="line"><span class="string">        setImageStyle(targetText_<span class="subst">$&#123;textUniqueId&#125;</span>, targetImage_<span class="subst">$&#123;imgUniqueId&#125;</span>)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  &lt;/script&gt;`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span> = <span class="string">&#123;</span></span></span></span><br><span class="line"><span class="xml">        &#123;</span></span><br><span class="line"><span class="xml">            __html: script</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    /&gt; </span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;</span><br><span class="line">    useRef</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> cx <span class="keyword">from</span> <span class="string">"classnames"</span>;</span><br><span class="line"><span class="keyword">import</span> useImageRefSize <span class="keyword">from</span> <span class="string">'../../../hooks/useImageRefSize'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zIndex1000 = &#123;</span><br><span class="line">    zIndex: <span class="number">1000</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">BottomNavigation</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    templateConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">    handlers,</span></span></span><br><span class="line"><span class="function"><span class="params">    state,</span></span></span><br><span class="line"><span class="function"><span class="params">    floorId,</span></span></span><br><span class="line"><span class="function"><span class="params">    traceValue = &#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        iPhoneX,</span><br><span class="line">        isSSR</span><br><span class="line">    &#125; = state; <span class="comment">// 是否 iPhoneX 设备已经存储在 state 里, 兼容服务端 &amp; 客户端, 不需要再重新判断</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        defaultSelected,</span><br><span class="line">        contentList,</span><br><span class="line">        selectedTextColor = <span class="string">"#0086F6"</span>,</span><br><span class="line">        defaultTextColor = <span class="string">"#333333"</span>,</span><br><span class="line">        type,</span><br><span class="line">        backgroundImage,</span><br><span class="line">        backgroundColor</span><br><span class="line">    &#125; = templateConfig;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> bottomList = [];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        bottomList = <span class="built_in">JSON</span>.parse(contentList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        div className = &#123;</span></span><br><span class="line"><span class="xml">            cx("nav_bottom_wrapper expose_dom", &#123;</span></span><br><span class="line"><span class="xml">                nav_bottom_wrapper_x_or: iPhoneX</span></span><br><span class="line"><span class="xml">            &#125;)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        style = &#123;</span></span><br><span class="line"><span class="xml">            zIndex1000</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        data - expose - key = "tang_page_module_expo"</span></span><br><span class="line"><span class="xml">        data - trace - value = &#123;</span></span><br><span class="line"><span class="xml">            JSON.stringify(traceValue)</span></span><br><span class="line"><span class="xml">        &#125; &gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        div className = "nav_bottom_flex"</span></span><br><span class="line"><span class="xml">        style = &#123;</span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">                backgroundColor,</span></span><br><span class="line"><span class="xml">                backgroundImage: backgroundImage &amp;&amp; `url($&#123;backgroundImage&#125;)` </span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125; &gt;</span></span><br><span class="line"><span class="xml">        &#123;</span></span><br><span class="line"><span class="xml">            bottomList.map((bottomAnchor, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                const isCurrent = index === Number(defaultSelected);</span></span><br><span class="line"><span class="xml">                return ( <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">                    BottomNav bottomAnchor = &#123;</span></span><br><span class="line"><span class="xml">                        bottomAnchor</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    floorId = &#123;</span></span><br><span class="line"><span class="xml">                        floorId</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    key = &#123;</span></span><br><span class="line"><span class="xml">                        index</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    index = &#123;</span></span><br><span class="line"><span class="xml">                        index</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    isCurrent = &#123;</span></span><br><span class="line"><span class="xml">                        isCurrent</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    traceValue = &#123;</span></span><br><span class="line"><span class="xml">                        traceValue</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    handlers = &#123;</span></span><br><span class="line"><span class="xml">                        handlers</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    selectedTextColor = &#123;</span></span><br><span class="line"><span class="xml">                        selectedTextColor</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    defaultTextColor = &#123;</span></span><br><span class="line"><span class="xml">                        defaultTextColor</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    type = &#123;</span></span><br><span class="line"><span class="xml">                        type</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    isSSR = &#123;</span></span><br><span class="line"><span class="xml">                        isSSR</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    /&gt;</span></span><br><span class="line"><span class="xml">                );</span></span><br><span class="line"><span class="xml">            &#125;)</span></span><br><span class="line"><span class="xml">        &#125; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        /div&gt;</span> <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">        /div&gt;</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BottomNav</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    bottomAnchor,</span></span></span><br><span class="line"><span class="function"><span class="params">    index,</span></span></span><br><span class="line"><span class="function"><span class="params">    isCurrent,</span></span></span><br><span class="line"><span class="function"><span class="params">    traceValue,</span></span></span><br><span class="line"><span class="function"><span class="params">    handlers,</span></span></span><br><span class="line"><span class="function"><span class="params">    selectedTextColor,</span></span></span><br><span class="line"><span class="function"><span class="params">    defaultTextColor,</span></span></span><br><span class="line"><span class="function"><span class="params">    floorId,</span></span></span><br><span class="line"><span class="function"><span class="params">    type,</span></span></span><br><span class="line"><span class="function"><span class="params">    isSSR</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> buttonSortIndex = index + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        handleLogClickTrace,</span><br><span class="line">        handleClick</span><br><span class="line">    &#125; = handlers;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        selectedImage,</span><br><span class="line">        defaultImage,</span><br><span class="line">        text</span><br><span class="line">    &#125; = bottomAnchor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleClickBottom = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line">        <span class="keyword">if</span> (isCurrent) <span class="keyword">return</span></span><br><span class="line">        handleGotoNav(e, bottomAnchor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleGotoNav = <span class="function">(<span class="params">e, urls</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            clickLinkHttp,</span><br><span class="line">            clickLinkNative,</span><br><span class="line">            clickLinkHybrid,</span><br><span class="line">            clickLinkMiniProgram</span><br><span class="line">        &#125; = urls;</span><br><span class="line">        handleLogClickTrace(e);</span><br><span class="line">        handleClick(&#123;</span><br><span class="line">            clickLinkHttp,</span><br><span class="line">            clickLinkNative,</span><br><span class="line">            clickLinkHybrid,</span><br><span class="line">            clickLinkMiniProgram</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> showImg = type === <span class="string">"0"</span>;</span><br><span class="line">    <span class="keyword">let</span> finalShowImage = isCurrent ? selectedImage : defaultImage</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> imageRef = useRef();</span><br><span class="line">    <span class="keyword">let</span> [imgWidth, imgHeight] = useImageRefSize(imageRef);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务端已经加载完成图片, 没有触发onload事件时, 直接判断原始高度 or 触发onload事件时获得的高度</span></span><br><span class="line">    <span class="comment">// 若客户端图片加载失败 imageHasLoaded 返回的是宽高 0，hideText 是 false</span></span><br><span class="line">    <span class="comment">// 客户端的代码一直会执行，</span></span><br><span class="line">    <span class="keyword">let</span> imageHasLoaded = (imageRef.current &amp;&amp; imageRef.current.naturalHeight || imgWidth)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> hideText = showImg &amp;&amp; imageHasLoaded;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> imgStyle = &#123;</span><br><span class="line">        width: imgWidth ? <span class="string">`<span class="subst">$&#123;imgWidth <span class="regexp">/ 100&#125;rem` : 0,</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">        height: imgHeight ? `$&#123;imgHeight /</span> <span class="number">100</span>&#125;</span>rem`</span> : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务端渲染宽高初始值设置为0，后面计算出高度的时候再覆盖</span></span><br><span class="line">    <span class="keyword">if</span> (isSSR) imgStyle = &#123;</span><br><span class="line">        width: <span class="string">'0'</span>,</span><br><span class="line">        height: <span class="string">'0'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> textColor = getTextColor(</span><br><span class="line">        isCurrent,</span><br><span class="line">        type,</span><br><span class="line">        selectedTextColor,</span><br><span class="line">        defaultTextColor</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> imgUniqueId = <span class="string">`bottom_img_<span class="subst">$&#123;floorId&#125;</span>_<span class="subst">$&#123;index&#125;</span>`</span> ;</span><br><span class="line">    <span class="keyword">let</span> textUniqueId = <span class="string">`bottom_text_<span class="subst">$&#123;floorId&#125;</span>_<span class="subst">$&#123;index&#125;</span>`</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">            div data - trace - key = "tang_page_button_click"</span></span><br><span class="line"><span class="xml">            data - trace - value = &#123;</span></span><br><span class="line"><span class="xml">                JSON.stringify(&#123;</span></span><br><span class="line"><span class="xml">                    ...traceValue,</span></span><br><span class="line"><span class="xml">                    button: "bottomtab",</span></span><br><span class="line"><span class="xml">                    button_sort: buttonSortIndex,</span></span><br><span class="line"><span class="xml">                    tabname: text</span></span><br><span class="line"><span class="xml">                &#125;)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            className = &#123;</span></span><br><span class="line"><span class="xml">                cx("nav_bottom_item", &#123;</span></span><br><span class="line"><span class="xml">                    nav_bottom_item_img: hideText</span></span><br><span class="line"><span class="xml">                &#125;)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            onClick = &#123;</span></span><br><span class="line"><span class="xml">                handleClickBottom</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            style = &#123;</span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    color: textColor</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125; &gt;</span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">                !hideText &amp;&amp; <span class="tag">&lt; <span class="attr">p</span> <span class="attr">id</span> = <span class="string">&#123;</span></span></span></span><br><span class="line"><span class="xml">                    textUniqueId</span></span><br><span class="line"><span class="xml">                &#125; &gt; &#123;</span></span><br><span class="line"><span class="xml">                    text</span></span><br><span class="line"><span class="xml">                &#125; <span class="tag">&lt; /<span class="attr">p</span>&gt;</span></span>&#125; &#123;</span><br><span class="line">                    showImg &amp;&amp; <span class="xml"><span class="tag">&lt; <span class="attr">img</span> <span class="attr">src</span> = <span class="string">&#123;</span></span></span></span><br><span class="line"><span class="xml">                        finalShowImage</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    id = &#123;</span></span><br><span class="line"><span class="xml">                        imgUniqueId</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    ref = &#123;</span></span><br><span class="line"><span class="xml">                        imageRef</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    style = &#123;</span></span><br><span class="line"><span class="xml">                        imgStyle</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    /&gt;&#125; &#123;</span></span><br><span class="line"><span class="xml">                        showImg &amp;&amp; <span class="tag">&lt; <span class="attr">ImageHelper</span> <span class="attr">imgUniqueId</span> = <span class="string">&#123;</span></span></span></span><br><span class="line"><span class="xml">                            imgUniqueId</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                        textUniqueId = &#123;</span></span><br><span class="line"><span class="xml">                            textUniqueId</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                        /&gt;&#125; <span class="tag">&lt;</span></span></span><br><span class="line"><span class="xml">                        /div&gt;</span></span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 服务端代码，先于任何生命周期之前执行。</span></span><br><span class="line"><span class="comment">                 * 当dom上的img获取到 naturalHeight 或者 监听到 图片的 onload 事件，将图片的大小改变。</span></span><br><span class="line"><span class="comment">                 * 服务端渲染时，图片的原始大小一定要设置成 0，因为 如果图片加载失败，会显示一个失败的标签。设置成0 后，就算加载失败，宽高也是0，不会影响展示。</span></span><br><span class="line"><span class="comment">                 * </span></span><br><span class="line"><span class="comment">                 * 客户端渲染时，ImageHelper 这段代码不会执行。</span></span><br><span class="line"><span class="comment">                 * 通过 useImage 方法判断 图片是否加载完成，图片加载失败 返回的 宽高是 0，也是失败状态</span></span><br><span class="line"><span class="comment">                 * </span></span><br><span class="line"><span class="comment">                 * </span></span><br><span class="line"><span class="comment">                 * </span></span><br><span class="line"><span class="comment">                 * 先判断 naturalHeight 高度，是因为服务端加载图片 可能非常快，代码还没执行到 onload，图片已经下载完成，</span></span><br><span class="line"><span class="comment">                 * 那就一直都不会触发onload事件，所以先要判断 naturalHeight， 如果 naturalHeight 不为 0，说明图片已经加载完成。</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="title">ImageHelper</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                    imgUniqueId,</span></span></span><br><span class="line"><span class="function"><span class="params">                    textUniqueId</span></span></span><br><span class="line"><span class="function"><span class="params">                &#125;</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">let</span> script = <span class="string">`&lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">  var targetImage_<span class="subst">$&#123;imgUniqueId&#125;</span> = document.querySelector('#<span class="subst">$&#123;imgUniqueId&#125;</span>');</span></span><br><span class="line"><span class="string">  var targetText_<span class="subst">$&#123;textUniqueId&#125;</span> = document.querySelector('#<span class="subst">$&#123;textUniqueId&#125;</span>');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function setImageStyle(textNode, imageNode) &#123;</span></span><br><span class="line"><span class="string">    if(textNode &amp;&amp; imageNode) &#123;</span></span><br><span class="line"><span class="string">      textNode.style.display = 'none';</span></span><br><span class="line"><span class="string">      imageNode.style.height = imageNode.naturalHeight / 100 + 'rem';</span></span><br><span class="line"><span class="string">      imageNode.style.width = imageNode.naturalWidth / 100 + 'rem';</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  if(targetImage_<span class="subst">$&#123;imgUniqueId&#125;</span>) &#123;</span></span><br><span class="line"><span class="string">    if(!!targetImage_<span class="subst">$&#123;imgUniqueId&#125;</span>.naturalHeight) &#123;</span></span><br><span class="line"><span class="string">      setImageStyle(targetText_<span class="subst">$&#123;textUniqueId&#125;</span>, targetImage_<span class="subst">$&#123;imgUniqueId&#125;</span>)</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      targetImage_<span class="subst">$&#123;imgUniqueId&#125;</span>.onload = function() &#123;</span></span><br><span class="line"><span class="string">        setImageStyle(targetText_<span class="subst">$&#123;textUniqueId&#125;</span>, targetImage_<span class="subst">$&#123;imgUniqueId&#125;</span>)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  &lt;/script&gt;`</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span> = <span class="string">&#123;</span></span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            __html: script</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    /&gt;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">                const getTextColor = (isCurrent, type, selectedTextColor, defaultTextColor) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                    let textColor = "";</span></span><br><span class="line"><span class="xml">                    if (type === "1") &#123;</span></span><br><span class="line"><span class="xml">                        textColor = isCurrent ? "#0086F6" : "#333333";</span></span><br><span class="line"><span class="xml">                    &#125; else &#123;</span></span><br><span class="line"><span class="xml">                        textColor = isCurrent ? selectedTextColor : defaultTextColor;</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    return textColor;</span></span><br><span class="line"><span class="xml">                &#125;;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>  <strong>弹出蒙层后，禁止掉蒙层下面的内容滚动</strong></p>
<ul>
<li>方法一</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">disableWindowScroll() &#123;</span><br><span class="line">    <span class="keyword">const</span> bodyEl = <span class="built_in">document</span>.querySelector(<span class="string">"body"</span>);</span><br><span class="line">    <span class="keyword">const</span> htmlEl = <span class="built_in">document</span>.querySelector(<span class="string">"html"</span>);</span><br><span class="line">    bodyEl.style.overflow = <span class="string">"hidden"</span>;</span><br><span class="line">    htmlEl.style.overflow = <span class="string">"hidden"</span>;</span><br><span class="line">&#125;</span><br><span class="line">enableWindowScroll() &#123;</span><br><span class="line">    <span class="keyword">const</span> bodyEl = <span class="built_in">document</span>.querySelector(<span class="string">"body"</span>);</span><br><span class="line">    <span class="keyword">const</span> htmlEl = <span class="built_in">document</span>.querySelector(<span class="string">"html"</span>);</span><br><span class="line">    bodyEl.style.overflow = <span class="string">"auto"</span>;</span><br><span class="line">    htmlEl.style.overflow = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方法虽然能禁用掉页面的滚动，但是如果页面超长的话，会一下滑动到页面最顶部。</p>
<p>  对移动端，可以引入 <code>touch-action</code> ，限制为 <code>none</code> ，但 <code>ios</code> 的 <code>safari</code> 上不支持该属性, 这时候，就需要结合 <code>event.preventDefault</code> 属性来用了。注意在绑定 <code>addEventListener</code> 的时候，需要多传一个 <code>options</code> ，强调这个事件不是 <code>passive</code> 的，否则谷歌等新版浏览器会报错。同时最好也指定capture: true，这样可以早点禁止该事件。报错是 <code>Unable to preventDefault inside passive event listener due to target being treated as passive.</code> 谷歌建议一般情况下，将 <code>passive</code> 标志添加到每个没有调用 <code>preventDefault()</code> 的 <code>wheel</code> 、 <code>mousewheel</code> 、 <code>touchstart</code> 和 <code>touchmove</code> 事件侦听器, </p>
<ul>
<li>方法二</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">preventDefaultBehavior = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;;</span><br><span class="line">disableWindowScroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> bodyEl = <span class="built_in">document</span>.querySelector(<span class="string">"body"</span>);</span><br><span class="line">    bodyEl.addEventListener(<span class="string">"touchmove"</span>, <span class="keyword">this</span>.preventDefaultBehavior, &#123;</span><br><span class="line">        passive: <span class="literal">false</span>,</span><br><span class="line">        capture: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">enableWindowScroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> bodyEl = <span class="built_in">document</span>.querySelector(<span class="string">"body"</span>);</span><br><span class="line">    bodyEl.removeEventListener(<span class="string">"touchmove"</span>, <span class="keyword">this</span>.preventDefaultBehavior, &#123;</span><br><span class="line">        passive: <span class="literal">false</span>,</span><br><span class="line">        capture: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  上述方法会禁用掉浏览器的所有滚动事件</p>
<ul>
<li>方法三</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getScrollY = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.scrollY</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">disableWindowScroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> bodyEl = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</span><br><span class="line">    <span class="keyword">const</span> top = <span class="keyword">this</span>.getScrollY()</span><br><span class="line">    bodyEl.style.position = <span class="string">"fixed"</span></span><br><span class="line">    bodyEl.style.width = <span class="string">"100%"</span></span><br><span class="line">    bodyEl.style.top = -top + <span class="string">'px'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">enableWindowScroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> bodyEl = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</span><br><span class="line">    <span class="comment">//这里top 通过getComputedStyle获取top，在IOS设备是不正确的，始终为0，Android设备和浏览器端都是正常的</span></span><br><span class="line">    <span class="comment">//这是为什么？</span></span><br><span class="line">    <span class="keyword">const</span> top = -bodyEl.style.top.split(<span class="string">'px'</span>)[<span class="number">0</span>]</span><br><span class="line">    bodyEl.style.position = <span class="string">''</span></span><br><span class="line">    bodyEl.style.top = <span class="string">''</span></span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, top)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>项目经历</tag>
      </tags>
  </entry>
  <entry>
    <title>Debounce &amp; throttle</title>
    <url>/2019/12/28/Debounce-throttle/</url>
    <content><![CDATA[<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, wait</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">            previous = now;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 执行 throttle 函数返回新函数</span></span><br><span class="line"><span class="keyword">const</span> betterFn = throttle(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"fn 函数执行了"</span>), <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 每 10 毫秒执行一次 betterFn 函数，但是只有时间差大于 1000 时才会执行 fn</span></span><br><span class="line">setInterval(betterFn, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait = <span class="number">50</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> betterFn = debounce(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"fn 防抖执行了"</span>), <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"scroll"</span>, betterFn);</span><br><span class="line"></span><br><span class="line"><span class="comment">// immediate表示第一次是否立即执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait = <span class="number">50</span>, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) clearTimeout(timer);</span><br><span class="line">        <span class="keyword">if</span> (immediate &amp;&amp; !timer) &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> betterFn = debounce(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"fn 防抖执行了"</span>), <span class="number">1000</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"scroll"</span>, betterFn);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加强版throttle</span></span><br><span class="line"><span class="comment">// wait 时间内，可以重新生成定时器，但只要 wait 的时间到了，必须给用户一个响应</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span>,</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">if</span> (now - previous &lt; wait) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timer) clearTimeout(timer);</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                previous = now;</span><br><span class="line">                fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            previous = now;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行 throttle 函数返回新函数</span></span><br><span class="line"><span class="keyword">const</span> betterFn = throttle(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"fn 节流执行了"</span>), <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 第一次触发 scroll 执行一次 fn，每隔 1 秒后执行一次函数 fn，停止滑动 1 秒后再执行函数 fn</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"scroll"</span>, betterFn);</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>CSS世界</title>
    <url>/2019/12/31/CSS%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<h3 id="第三章-流、元素与基本尺寸"><a href="#第三章-流、元素与基本尺寸" class="headerlink" title="第三章 流、元素与基本尺寸"></a>第三章 流、元素与基本尺寸</h3><blockquote>
<p>块级元素：一个水平流上只能单独显示一个元素 </p>
</blockquote>
<p><code>&lt;div&gt; &lt;li&gt; &lt;table&gt;</code> 均是块级元素</p>
]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Articles</title>
    <url>/2019/12/28/Articles/</url>
    <content><![CDATA[<h2 id="Articles"><a href="#Articles" class="headerlink" title="Articles"></a>Articles</h2><p><a href="https://jancat.github.io/post/2019/translation-usememo-and-usecallback/" target="_blank" rel="noopener">什么时候使用 useMemo 和 useCallback</a></p>
<p><a href="https://css-tricks.com/using-requestanimationframe-with-react-hooks/" target="_blank" rel="noopener">requestAnimationFrame use hooks</a></p>
<p><a href="https://medium.com/@martin_hotell/react-typescript-and-defaultprops-dilemma-ca7f81c661c7" target="_blank" rel="noopener">typescript</a></p>
<a id="more"></a>

]]></content>
  </entry>
  <entry>
    <title>锚点导航</title>
    <url>/2019/12/28/AnchorNav/</url>
    <content><![CDATA[<h2 id="分享内容"><a href="#分享内容" class="headerlink" title="分享内容"></a>分享内容</h2><p><strong>锚点导航功能点</strong>（功能拆分）</p>
<ul>
<li>点击锚点滚动到指定楼层</li>
<li>滚动楼层自动切换到当前对应的锚点</li>
<li>导航栏吸顶，计算吸顶时机</li>
<li>吸顶高度坍塌问题，包裹层加一个高度</li>
<li>展开锚点：导航栏滚动到吸顶位置，切选中当前的锚点</li>
</ul>
<a id="more"></a>

<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ul>
<li><strong>当点击锚点导航栏的时候，需要页面滚动到对应的位置。但是，页面数据又是动态加载的，所以一次计算并不能准确滚动</strong></li>
</ul>
<p>通过 componentDidUpdate 这个方法，当楼层有加载的时候，重新触发点击锚点事件 </p>
<p>以上方案的问题在于，接口请求到数据，更新了 productHasLoaded，状态是更新了，但是 render 过程还没有执行，导致页面并没有发生变化<br>而这个时候去计算该滑动的高度，其实是没有意义的。滚动的高度也是当前的楼层的高度，实际上根本不会滑动到对应的位置。滑动的距离还是新加载楼层并没有加载进来的错误高度。</p>
<p>骚操作来了：setTimeout(()=&gt;{this.fixScroll()}, 0)</p>
<p>javascript 的过程是单线程，状态更新了之后，何时 render 页面我们并不知道，大概是放在事件队列里面等待执行，那么 setTimeout 就是等事件队列里面的事情执行结束后，再执行滚动操作</p>
<p>那么问题是： react 更新状态和 render 的先后顺序是怎么样的<br>setState（）不会立即改变 this.state，但会创建挂起状态转换<br>更：</p>
<p>状态更新一定会 render，但是 render 不表示页面已经根据状态发生改变</p>
<ul>
<li><strong>页面 loading 的时候为何 window.scrollTo(0, height)会不起作用呢</strong></li>
</ul>
<p>页面加载完之后scrollTo才会起作用，否则会一直自动滚动到起始位置。浏览器特性。</p>
<ul>
<li><strong>锚点导航添加蒙层之后的点击穿透问题</strong> </li>
</ul>
<p>点击了蒙层，触发了下面的产品链接，导致蒙层关闭同时会跳转到另一个页面。<br>原代码里添加了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onClick = &#123;</span><br><span class="line">    e =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.handleFoldAnchor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">onTouchStart = &#123;</span><br><span class="line">    e =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.handleFoldAnchor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// e.stopPropagation() 起到阻止捕获和冒泡阶段中当前事件的进一步传播</span></span><br><span class="line"><span class="comment">// event.preventDefault()可以取消默认事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用touchstart事件在某些场景下会出现点击穿透的现象。</span></span><br><span class="line"><span class="comment">// 点击穿透：假如页面上有两个元素A和B。B元素在A元素之上。我们在B元素的touchstart事件上注册了一个回调函数，该回调函数的作用是隐藏B元素。我们发现，当我们点击B元素，B元素被隐藏了，随后，A元素触发了click事件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是因为在移动端浏览器，事件执行的顺序是touchstart &gt; touchend &gt; click。而click事件有300ms的延迟</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一开始这种写法为何会穿透呢，touchStart之后，蒙层消失，然后触发了click事件，click点击了产品的链接，从而跳转。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：浏览器事件触发的顺序</span></span><br><span class="line"><span class="comment">// touchstart --&gt; mouseover(有的浏览器没有实现) --&gt; mousemove(一次) --&gt;mousedown --&gt; mouseup --&gt; click --&gt;touchend</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Touch 事件中，常用的为 touchstart, touchmove, touchend 三种。除此之外还有touchcancel</span></span><br></pre></td></tr></table></figure>

<p>换成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onTouchMove = &#123;</span><br><span class="line">    e =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.handleFoldAnchor()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">onClick = &#123;</span><br><span class="line">    e =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.handleFoldAnchor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>项目经历</tag>
      </tags>
  </entry>
</search>
